// Generated by purs bundle 0.12.0
var PS = {};
(function(exports) {
    "use strict";

  // copy an array-ish thing (like a nodelist) to an Array
  //
  // the fake array needs to have a length property and
  // have properties for all indices [0, length)
  function copyFakeArray(fake) {
    var arr = [], i;
    for (i = 0; i < fake.length; i++) {
      arr.push(fake[i]);
    }
    return arr;
  }

  exports.primitives =
  { "window": (typeof window === "undefined") ? undefined : window

  , elementById: function (id, doc) {
      return doc.getElementById(id);
    }

  , addEventListener: function(opts, evt, listener, elem) {
      elem.addEventListener(evt, listener(), opts);
    }

  , appendChild: function (child, parent) {
      return parent.appendChild(child);
    }

  , clearElement: function (elem) {
      elem.innerHTML = "";
    }

  , copyFakeArray: copyFakeArray

  , focusElement: function (elem) {
      elem.focus();
    }

  , querySelector: function (str, elem) {
      return elem.querySelector(str);
    }

  , querySelectorAll: function (str, elem) {
      return elem.querySelectorAll(str);
    }

  , selectElement: function (elem) {
      elem.select();
    }

  , setLocationHash: function (str, loc) {
      loc.hash = str;
    }

  , requestAnimationFrame: function (fn, win) {
      if (typeof win.requestAnimationFrame == "undefined") {
        win.setTimeout(fn);
        return 0xdeadbeef;
      }
      return win.requestAnimationFrame(fn);
    }
  };
})(PS["Bonsai.DOM"] = PS["Bonsai.DOM"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["compose"] = compose;
  exports["Semigroupoid"] = Semigroupoid;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS["Control.Semigroupoid"] = PS["Control.Semigroupoid"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];                 
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS["Control.Category"] = PS["Control.Category"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS["Data.Boolean"] = PS["Data.Boolean"] || {});
(function(exports) {
    "use strict";

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
    "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
    "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g, // eslint-disable-line no-control-regex
      function (c, i) {
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\x07": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Show"];
  var Data_Symbol = PS["Data.Symbol"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Show = function (show) {
      this.show = show;
  };
  var showString = new Show($foreign.showStringImpl);
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;
  exports["showString"] = showString;
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.HeytingAlgebra"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_Row = PS["Type.Data.Row"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var tt = function (dict) {
      return dict.tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var implies = function (dict) {
      return dict.implies;
  };
  var ff = function (dict) {
      return dict.ff;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  var conj = function (dict) {
      return dict.conj;
  };
  exports["HeytingAlgebra"] = HeytingAlgebra;
  exports["tt"] = tt;
  exports["ff"] = ff;
  exports["implies"] = implies;
  exports["conj"] = conj;
  exports["disj"] = disj;
  exports["not"] = not;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Eq = function (eq) {
      this.eq = eq;
  }; 
  var eqString = new Eq($foreign.refEq);
  var eqInt = new Eq($foreign.refEq);
  var eqChar = new Eq($foreign.refEq);
  var eq = function (dict) {
      return dict.eq;
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["eqInt"] = eqInt;
  exports["eqChar"] = eqChar;
  exports["eqString"] = eqString;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  exports.unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
    "use strict";

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Semigroup"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupString = new Semigroup($foreign.concatString);
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupString"] = semigroupString;
  exports["semigroupArray"] = semigroupArray;
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];                 
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS["Data.Ordering"] = PS["Data.Ordering"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];                 
  var unsafeCompare = $foreign.unsafeCompareImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value);
  exports["unsafeCompare"] = unsafeCompare;
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord_Unsafe = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];                 
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  }; 
  var ordString = new Ord(function () {
      return Data_Eq.eqString;
  }, Data_Ord_Unsafe.unsafeCompare);
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, Data_Ord_Unsafe.unsafeCompare);
  var ordChar = new Ord(function () {
      return Data_Eq.eqChar;
  }, Data_Ord_Unsafe.unsafeCompare);
  var compare = function (dict) {
      return dict.compare;
  };
  exports["Ord"] = Ord;
  exports["compare"] = compare;
  exports["ordInt"] = ordInt;
  exports["ordString"] = ordString;
  exports["ordChar"] = ordChar;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];                 
  var on = function (f) {
      return function (g) {
          return function (x) {
              return function (y) {
                  return f(g(x))(g(y));
              };
          };
      };
  };
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
  exports["on"] = on;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
    "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];                 
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["void"] = $$void;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];                 
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  var lift2 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b);
              };
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
  exports["lift2"] = lift2;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];                 
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var when = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative line 57, column 1 - line 57, column 63: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
  exports["when"] = when;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];                 
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };
  var Discard = function (discard) {
      this.discard = discard;
  };
  var discard = function (dict) {
      return dict.discard;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  var composeKleisliFlipped = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bindFlipped(dictBind)(f)(g(a));
              };
          };
      };
  };
  var discardUnit = new Discard(function (dictBind) {
      return bind(dictBind);
  });
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["Discard"] = Discard;
  exports["discard"] = discard;
  exports["composeKleisliFlipped"] = composeKleisliFlipped;
  exports["discardUnit"] = discardUnit;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Functor = PS["Data.Functor"];
  var Data_Semigroup = PS["Data.Semigroup"];                 
  var Alt = function (Functor0, alt) {
      this.Functor0 = Functor0;
      this.alt = alt;
  };                                                       
  var alt = function (dict) {
      return dict.alt;
  };
  exports["Alt"] = Alt;
  exports["alt"] = alt;
})(PS["Control.Alt"] = PS["Control.Alt"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];                 
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];                 
  var Bifunctor = function (bimap) {
      this.bimap = bimap;
  };
  var bimap = function (dict) {
      return dict.bimap;
  };
  exports["bimap"] = bimap;
  exports["Bifunctor"] = Bifunctor;
})(PS["Data.Bifunctor"] = PS["Data.Bifunctor"] || {});
(function(exports) {
    "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;

  exports.topChar = String.fromCharCode(65535);
  exports.bottomChar = String.fromCharCode(0);
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Bounded"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Unit = PS["Data.Unit"];                 
  var Bounded = function (Ord0, bottom, top) {
      this.Ord0 = Ord0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };                                            
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var boundedChar = new Bounded(function () {
      return Data_Ord.ordChar;
  }, $foreign.bottomChar, $foreign.topChar);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["Bounded"] = Bounded;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
  exports["boundedChar"] = boundedChar;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
    "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Data_Functor = PS["Data.Functor"];                 
  var Plus = function (Alt0, empty) {
      this.Alt0 = Alt0;
      this.empty = empty;
  };       
  var empty = function (dict) {
      return dict.empty;
  };
  exports["Plus"] = Plus;
  exports["empty"] = empty;
})(PS["Control.Plus"] = PS["Control.Plus"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };                 
  var monoidString = new Monoid(function () {
      return Data_Semigroup.semigroupString;
  }, "");
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["monoidString"] = monoidString;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var showMaybe = function (dictShow) {
      return new Data_Show.Show(function (v) {
          if (v instanceof Just) {
              return "(Just " + (Data_Show.show(dictShow)(v.value0) + ")");
          };
          if (v instanceof Nothing) {
              return "Nothing";
          };
          throw new Error("Failed pattern match at Data.Maybe line 206, column 1 - line 206, column 47: " + [ v.constructor.name ]);
      });
  };
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 218, column 1 - line 218, column 51: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isNothing = maybe(true)(Data_Function["const"](false));
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
  };
  var fromJust = function (dictPartial) {
      return function (v) {
          var $__unused = function (dictPartial1) {
              return function ($dollar35) {
                  return $dollar35;
              };
          };
          return $__unused(dictPartial)((function () {
              if (v instanceof Just) {
                  return v.value0;
              };
              throw new Error("Failed pattern match at Data.Maybe line 269, column 1 - line 269, column 46: " + [ v.constructor.name ]);
          })());
      };
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 67, column 1 - line 67, column 35: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 126, column 1 - line 126, column 33: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["fromMaybe"] = fromMaybe;
  exports["isNothing"] = isNothing;
  exports["fromJust"] = fromJust;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["bindMaybe"] = bindMaybe;
  exports["showMaybe"] = showMaybe;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                 
  var Disj = function (x) {
      return x;
  };
  var semigroupDisj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var monoidDisj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDisj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.ff(dictHeytingAlgebra));
  };
  exports["Disj"] = Disj;
  exports["semigroupDisj"] = semigroupDisj;
  exports["monoidDisj"] = monoidDisj;
})(PS["Data.Monoid.Disj"] = PS["Data.Monoid.Disj"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                 
  var Endo = function (x) {
      return x;
  };
  var semigroupEndo = function (dictSemigroupoid) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Control_Semigroupoid.compose(dictSemigroupoid)(v)(v1);
          };
      });
  };
  var monoidEndo = function (dictCategory) {
      return new Data_Monoid.Monoid(function () {
          return semigroupEndo(dictCategory.Semigroupoid0());
      }, Control_Category.identity(dictCategory));
  };
  exports["Endo"] = Endo;
  exports["semigroupEndo"] = semigroupEndo;
  exports["monoidEndo"] = monoidEndo;
})(PS["Data.Monoid.Endo"] = PS["Data.Monoid.Endo"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Semigroup_First = PS["Data.Semigroup.First"];
  var Data_Semigroup_Last = PS["Data.Semigroup.Last"];
  var Prelude = PS["Prelude"];                 
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };                             
  var newtypeEndo = new Newtype(function (v) {
      return v;
  }, Data_Monoid_Endo.Endo);
  var newtypeDisj = new Newtype(function (v) {
      return v;
  }, Data_Monoid_Disj.Disj);
  var alaF = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return function (f) {
                          return function ($80) {
                              return Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1))(f(Data_Functor.map(dictFunctor)(wrap(dictNewtype))($80)));
                          };
                      };
                  };
              };
          };
      };
  };
  exports["unwrap"] = unwrap;
  exports["wrap"] = wrap;
  exports["Newtype"] = Newtype;
  exports["alaF"] = alaF;
  exports["newtypeDisj"] = newtypeDisj;
  exports["newtypeEndo"] = newtypeEndo;
})(PS["Data.Newtype"] = PS["Data.Newtype"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)(function ($195) {
                  return Control_Apply.applySecond(dictApplicative.Apply0())(f($195));
              })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var for_ = function (dictApplicative) {
      return function (dictFoldable) {
          return Data_Function.flip(traverse_(dictApplicative)(dictFoldable));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var intercalate = function (dictFoldable) {
      return function (dictMonoid) {
          return function (sep) {
              return function (xs) {
                  var go = function (v) {
                      return function (x) {
                          if (v.init) {
                              return {
                                  init: false,
                                  acc: x
                              };
                          };
                          return {
                              init: false,
                              acc: Data_Semigroup.append(dictMonoid.Semigroup0())(v.acc)(Data_Semigroup.append(dictMonoid.Semigroup0())(sep)(x))
                          };
                      };
                  };
                  return (foldl(dictFoldable)(go)({
                      init: true,
                      acc: Data_Monoid.mempty(dictMonoid)
                  })(xs)).acc;
              };
          };
      };
  }; 
  var foldableMaybe = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return Data_Monoid.mempty(dictMonoid);
              };
              if (v instanceof Data_Maybe.Just) {
                  return f(v.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable line 129, column 1 - line 129, column 41: " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(z)(v1.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable line 129, column 1 - line 129, column 41: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(v1.value0)(z);
              };
              throw new Error("Failed pattern match at Data.Foldable line 129, column 1 - line 129, column 41: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMapDefaultL = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldl(dictFoldable)(function (acc) {
                  return function (x) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f(x));
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var foldrDefault = function (dictFoldable) {
      return function (c) {
          return function (u) {
              return function (xs) {
                  return Data_Newtype.unwrap(Data_Newtype.newtypeEndo)(foldMap(dictFoldable)(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn))(function ($198) {
                      return Data_Monoid_Endo.Endo(c($198));
                  })(xs))(u);
              };
          };
      };
  };
  var fold = function (dictFoldable) {
      return function (dictMonoid) {
          return foldMap(dictFoldable)(dictMonoid)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var any = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Newtype.newtypeDisj)(Data_Newtype.newtypeDisj)(Data_Monoid_Disj.Disj)(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra)));
      };
  };
  var elem = function (dictFoldable) {
      return function (dictEq) {
          return function ($199) {
              return any(dictFoldable)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Eq.eq(dictEq)($199));
          };
      };
  };
  exports["Foldable"] = Foldable;
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["foldMap"] = foldMap;
  exports["foldrDefault"] = foldrDefault;
  exports["foldMapDefaultL"] = foldMapDefaultL;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["fold"] = fold;
  exports["traverse_"] = traverse_;
  exports["for_"] = for_;
  exports["intercalate"] = intercalate;
  exports["any"] = any;
  exports["elem"] = elem;
  exports["foldableArray"] = foldableArray;
  exports["foldableMaybe"] = foldableMaybe;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Traversable"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Traversable_Accum = PS["Data.Traversable.Accum"];
  var Data_Traversable_Accum_Internal = PS["Data.Traversable.Accum.Internal"];
  var Prelude = PS["Prelude"];                 
  var Traversable = function (Foldable1, Functor0, sequence, traverse) {
      this.Foldable1 = Foldable1;
      this.Functor0 = Functor0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  }; 
  var sequence = function (dict) {
      return dict.sequence;
  };
  exports["Traversable"] = Traversable;
  exports["traverse"] = traverse;
  exports["sequence"] = sequence;
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];                 
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var functorEither = new Data_Functor.Functor(function (f) {
      return function (m) {
          if (m instanceof Left) {
              return new Left(m.value0);
          };
          if (m instanceof Right) {
              return new Right(f(m.value0));
          };
          throw new Error("Failed pattern match at Data.Either line 35, column 8 - line 35, column 52: " + [ m.constructor.name ]);
      };
  });
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either line 220, column 1 - line 220, column 64: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  }; 
  var applyEither = new Control_Apply.Apply(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return new Left(v.value0);
          };
          if (v instanceof Right) {
              return Data_Functor.map(functorEither)(v.value0)(v1);
          };
          throw new Error("Failed pattern match at Data.Either line 76, column 1 - line 76, column 41: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeEither = new Control_Applicative.Applicative(function () {
      return applyEither;
  }, Right.create);
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["functorEither"] = functorEither;
  exports["applyEither"] = applyEither;
  exports["applicativeEither"] = applicativeEither;
})(PS["Data.Either"] = PS["Data.Either"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var MonadThrow = function (Monad0, throwError) {
      this.Monad0 = Monad0;
      this.throwError = throwError;
  };
  var MonadError = function (MonadThrow0, catchError) {
      this.MonadThrow0 = MonadThrow0;
      this.catchError = catchError;
  };
  var throwError = function (dict) {
      return dict.throwError;
  }; 
  var catchError = function (dict) {
      return dict.catchError;
  };
  var $$try = function (dictMonadError) {
      return function (a) {
          return catchError(dictMonadError)(Data_Functor.map(((((dictMonadError.MonadThrow0()).Monad0()).Bind1()).Apply0()).Functor0())(Data_Either.Right.create)(a))(function ($21) {
              return Control_Applicative.pure(((dictMonadError.MonadThrow0()).Monad0()).Applicative0())(Data_Either.Left.create($21));
          });
      };
  };
  exports["catchError"] = catchError;
  exports["throwError"] = throwError;
  exports["MonadThrow"] = MonadThrow;
  exports["MonadError"] = MonadError;
  exports["try"] = $$try;
})(PS["Control.Monad.Error.Class"] = PS["Control.Monad.Error.Class"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];                 
  var Identity = function (x) {
      return x;
  };
  var newtypeIdentity = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Identity);
  var functorIdentity = new Data_Functor.Functor(function (f) {
      return function (m) {
          return f(m);
      };
  });
  var applyIdentity = new Control_Apply.Apply(function () {
      return functorIdentity;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindIdentity = new Control_Bind.Bind(function () {
      return applyIdentity;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeIdentity = new Control_Applicative.Applicative(function () {
      return applyIdentity;
  }, Identity);
  var monadIdentity = new Control_Monad.Monad(function () {
      return applicativeIdentity;
  }, function () {
      return bindIdentity;
  });
  exports["Identity"] = Identity;
  exports["newtypeIdentity"] = newtypeIdentity;
  exports["functorIdentity"] = functorIdentity;
  exports["applyIdentity"] = applyIdentity;
  exports["applicativeIdentity"] = applicativeIdentity;
  exports["bindIdentity"] = bindIdentity;
  exports["monadIdentity"] = monadIdentity;
})(PS["Data.Identity"] = PS["Data.Identity"] || {});
(function(exports) {
    "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Effect"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Prelude = PS["Prelude"];                 
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["functorEffect"] = functorEffect;
  exports["applyEffect"] = applyEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
  exports["monadEffect"] = monadEffect;
})(PS["Effect"] = PS["Effect"] || {});
(function(exports) {
    "use strict";

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports["modify'"] = function (f) {
    return function (ref) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };

  exports.write = function (val) {
    return function (ref) {
      return function () {
        ref.value = val;
        return {};
      };
    };
  };
})(PS["Effect.Ref"] = PS["Effect.Ref"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Effect.Ref"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Effect = PS["Effect"];
  var Prelude = PS["Prelude"];                 
  var modify = function (f) {
      return $foreign["modify'"](function (s) {
          var s$prime = f(s);
          return {
              state: s$prime,
              value: s$prime
          };
      });
  };
  exports["modify"] = modify;
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
  exports["modify'"] = $foreign["modify'"];
  exports["write"] = $foreign.write;
})(PS["Effect.Ref"] = PS["Effect.Ref"] || {});
(function(exports) {
    "use strict";

  // module Partial.Unsafe

  exports.unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
    "use strict";

  // module Partial

  exports.crashWith = function () {
    return function (msg) {
      throw new Error(msg);
    };
  };
})(PS["Partial"] = PS["Partial"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Partial"];
  exports["crashWith"] = $foreign.crashWith;
})(PS["Partial"] = PS["Partial"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Partial.Unsafe"];
  var Partial = PS["Partial"];
  var unsafeCrashWith = function (msg) {
      return $foreign.unsafePartial(function (dictPartial) {
          return Partial.crashWith(dictPartial)(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Effect = PS["Effect"];
  var Effect_Ref = PS["Effect.Ref"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var Loop = (function () {
      function Loop(value0) {
          this.value0 = value0;
      };
      Loop.create = function (value0) {
          return new Loop(value0);
      };
      return Loop;
  })();
  var Done = (function () {
      function Done(value0) {
          this.value0 = value0;
      };
      Done.create = function (value0) {
          return new Done(value0);
      };
      return Done;
  })();
  var MonadRec = function (Monad0, tailRecM) {
      this.Monad0 = Monad0;
      this.tailRecM = tailRecM;
  };
  var tailRecM = function (dict) {
      return dict.tailRecM;
  };
  var tailRec = function (f) {
      var go = function ($copy_v) {
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v) {
              if (v instanceof Loop) {
                  $copy_v = f(v.value0);
                  return;
              };
              if (v instanceof Done) {
                  $tco_done = true;
                  return v.value0;
              };
              throw new Error("Failed pattern match at Control.Monad.Rec.Class line 91, column 3 - line 91, column 25: " + [ v.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($copy_v);
          };
          return $tco_result;
      };
      return function ($53) {
          return go(f($53));
      };
  }; 
  var monadRecIdentity = new MonadRec(function () {
      return Data_Identity.monadIdentity;
  }, function (f) {
      var runIdentity = function (v) {
          return v;
      };
      return function ($54) {
          return Data_Identity.Identity(tailRec(function ($55) {
              return runIdentity(f($55));
          })($54));
      };
  });
  exports["Loop"] = Loop;
  exports["Done"] = Done;
  exports["MonadRec"] = MonadRec;
  exports["tailRec"] = tailRec;
  exports["tailRecM"] = tailRecM;
  exports["monadRecIdentity"] = monadRecIdentity;
})(PS["Control.Monad.Rec.Class"] = PS["Control.Monad.Rec.Class"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Distributive = PS["Data.Distributive"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Type_Equality = PS["Type.Equality"];                 
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var uncurry = function (f) {
      return function (v) {
          return f(v.value0)(v.value1);
      };
  };
  var snd = function (v) {
      return v.value1;
  };                                                                                                    
  var fst = function (v) {
      return v.value0;
  };
  var curry = function (f) {
      return function (a) {
          return function (b) {
              return f(new Tuple(a, b));
          };
      };
  };
  var bifunctorTuple = new Data_Bifunctor.Bifunctor(function (f) {
      return function (g) {
          return function (v) {
              return new Tuple(f(v.value0), g(v.value1));
          };
      };
  });
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
  exports["curry"] = curry;
  exports["uncurry"] = uncurry;
  exports["bifunctorTuple"] = bifunctorTuple;
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var MonadState = function (Monad0, state) {
      this.Monad0 = Monad0;
      this.state = state;
  };
  var state = function (dict) {
      return dict.state;
  };
  exports["state"] = state;
  exports["MonadState"] = MonadState;
})(PS["Control.Monad.State.Class"] = PS["Control.Monad.State.Class"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Effect = PS["Effect"];                 
  var MonadEffect = function (Monad0, liftEffect) {
      this.Monad0 = Monad0;
      this.liftEffect = liftEffect;
  };
  var monadEffectEffect = new MonadEffect(function () {
      return Effect.monadEffect;
  }, Control_Category.identity(Control_Category.categoryFn));
  var liftEffect = function (dict) {
      return dict.liftEffect;
  };
  exports["liftEffect"] = liftEffect;
  exports["MonadEffect"] = MonadEffect;
  exports["monadEffectEffect"] = monadEffectEffect;
})(PS["Effect.Class"] = PS["Effect.Class"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Tuple = PS["Data.Tuple"];
  var Effect_Class = PS["Effect.Class"];
  var Prelude = PS["Prelude"];                 
  var ExceptT = function (x) {
      return x;
  };
  var runExceptT = function (v) {
      return v;
  }; 
  var mapExceptT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorExceptT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
      });
  };
  var monadExceptT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeExceptT(dictMonad);
      }, function () {
          return bindExceptT(dictMonad);
      });
  };
  var bindExceptT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyExceptT(dictMonad);
      }, function (v) {
          return function (k) {
              return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either(function ($97) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Left.create($97));
              })(function (a) {
                  var v1 = k(a);
                  return v1;
              }));
          };
      });
  };
  var applyExceptT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadExceptT(dictMonad)));
  };
  var applicativeExceptT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyExceptT(dictMonad);
      }, function ($98) {
          return ExceptT(Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Right.create($98)));
      });
  };
  var monadThrowExceptT = function (dictMonad) {
      return new Control_Monad_Error_Class.MonadThrow(function () {
          return monadExceptT(dictMonad);
      }, function ($102) {
          return ExceptT(Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Left.create($102)));
      });
  };
  exports["ExceptT"] = ExceptT;
  exports["runExceptT"] = runExceptT;
  exports["mapExceptT"] = mapExceptT;
  exports["functorExceptT"] = functorExceptT;
  exports["applyExceptT"] = applyExceptT;
  exports["applicativeExceptT"] = applicativeExceptT;
  exports["bindExceptT"] = bindExceptT;
  exports["monadExceptT"] = monadExceptT;
  exports["monadThrowExceptT"] = monadThrowExceptT;
})(PS["Control.Monad.Except.Trans"] = PS["Control.Monad.Except.Trans"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Newtype = PS["Data.Newtype"];
  var Prelude = PS["Prelude"];                                                           
  var runExcept = function ($0) {
      return Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(Control_Monad_Except_Trans.runExceptT($0));
  };
  var mapExcept = function (f) {
      return Control_Monad_Except_Trans.mapExceptT(function ($1) {
          return Data_Identity.Identity(f(Data_Newtype.unwrap(Data_Identity.newtypeIdentity)($1)));
      });
  };
  exports["runExcept"] = runExcept;
  exports["mapExcept"] = mapExcept;
})(PS["Control.Monad.Except"] = PS["Control.Monad.Except"] || {});
(function(exports) {
    "use strict";

  exports.runFn2 = function (fn) {
    return function (a) {
      return function (b) {
        return fn(a, b);
      };
    };
  };

  exports.runFn3 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return fn(a, b, c);
        };
      };
    };
  };

  exports.runFn4 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return fn(a, b, c, d);
          };
        };
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Function.Uncurried"];
  var Data_Unit = PS["Data.Unit"];
  exports["runFn2"] = $foreign.runFn2;
  exports["runFn3"] = $foreign.runFn3;
  exports["runFn4"] = $foreign.runFn4;
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function(exports) {
    "use strict";

  exports.unfoldrArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var maybe = f(value);
                if (isNothing(maybe)) return result;
                var tuple = fromJust(maybe);
                result.push(fst(tuple));
                value = snd(tuple);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
    "use strict";

  exports.unfoldr1ArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var tuple = f(value);
                result.push(fst(tuple));
                var maybe = snd(tuple);
                if (isNothing(maybe)) return result;
                value = fromJust(maybe);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable1"] = PS["Data.Unfoldable1"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Unfoldable1"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Tuple = PS["Data.Tuple"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var Unfoldable1 = function (unfoldr1) {
      this.unfoldr1 = unfoldr1;
  };
  var unfoldr1 = function (dict) {
      return dict.unfoldr1;
  };
  var unfoldable1Array = new Unfoldable1($foreign.unfoldr1ArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["Unfoldable1"] = Unfoldable1;
  exports["unfoldr1"] = unfoldr1;
  exports["unfoldable1Array"] = unfoldable1Array;
})(PS["Data.Unfoldable1"] = PS["Data.Unfoldable1"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Unfoldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable1 = PS["Data.Unfoldable1"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var Unfoldable = function (Unfoldable10, unfoldr) {
      this.Unfoldable10 = Unfoldable10;
      this.unfoldr = unfoldr;
  };
  var unfoldr = function (dict) {
      return dict.unfoldr;
  };
  var unfoldableArray = new Unfoldable(function () {
      return Data_Unfoldable1.unfoldable1Array;
  }, $foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["Unfoldable"] = Unfoldable;
  exports["unfoldr"] = unfoldr;
  exports["unfoldableArray"] = unfoldableArray;
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unfoldable1 = PS["Data.Unfoldable1"];
  var Prelude = PS["Prelude"];                 
  var NonEmpty = (function () {
      function NonEmpty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NonEmpty.create = function (value0) {
          return function (value1) {
              return new NonEmpty(value0, value1);
          };
      };
      return NonEmpty;
  })();
  var singleton = function (dictPlus) {
      return function (a) {
          return new NonEmpty(a, Control_Plus.empty(dictPlus));
      };
  };
  var functorNonEmpty = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (m) {
              return new NonEmpty(f(m.value0), Data_Functor.map(dictFunctor)(f)(m.value1));
          };
      });
  };
  var foldableNonEmpty = function (dictFoldable) {
      return new Data_Foldable.Foldable(function (dictMonoid) {
          return function (f) {
              return function (v) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(Data_Foldable.foldMap(dictFoldable)(dictMonoid)(f)(v.value1));
              };
          };
      }, function (f) {
          return function (b) {
              return function (v) {
                  return Data_Foldable.foldl(dictFoldable)(f)(f(b)(v.value0))(v.value1);
              };
          };
      }, function (f) {
          return function (b) {
              return function (v) {
                  return f(v.value0)(Data_Foldable.foldr(dictFoldable)(f)(b)(v.value1));
              };
          };
      });
  };
  exports["NonEmpty"] = NonEmpty;
  exports["singleton"] = singleton;
  exports["functorNonEmpty"] = functorNonEmpty;
  exports["foldableNonEmpty"] = foldableNonEmpty;
})(PS["Data.NonEmpty"] = PS["Data.NonEmpty"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unfoldable1 = PS["Data.Unfoldable1"];
  var Prelude = PS["Prelude"];                 
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var NonEmptyList = function (x) {
      return x;
  };
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return function ($155) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f($155));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function ($copy_b) {
          return function ($copy_v) {
              var $tco_var_b = $copy_b;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(b, v) {
                  if (v instanceof Nil) {
                      $tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      $tco_var_b = f(b)(v.value0);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Types line 81, column 12 - line 83, column 30: " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_b, $copy_v);
              };
              return $tco_result;
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value);
          return function ($156) {
              return Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b)(rev($156));
          };
      };
  });
  var foldableNonEmptyList = Data_NonEmpty.foldableNonEmpty(foldableList);
  var functorList = new Data_Functor.Functor(function (f) {
      return Data_Foldable.foldr(foldableList)(function (x) {
          return function (acc) {
              return new Cons(f(x), acc);
          };
      })(Nil.value);
  });
  var functorNonEmptyList = Data_NonEmpty.functorNonEmpty(functorList);
  var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
      return function (ys) {
          return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
      };
  });
  var traversableList = new Data_Traversable.Traversable(function () {
      return foldableList;
  }, function () {
      return functorList;
  }, function (dictApplicative) {
      return Data_Traversable.traverse(traversableList)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
  }, function (dictApplicative) {
      return function (f) {
          return function ($159) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value))(Data_Foldable.foldl(foldableList)(function (acc) {
                  return function ($160) {
                      return Control_Apply.lift2(dictApplicative.Apply0())(Data_Function.flip(Cons.create))(acc)(f($160));
                  };
              })(Control_Applicative.pure(dictApplicative)(Nil.value))($159));
          };
      };
  });
  var unfoldable1List = new Data_Unfoldable1.Unfoldable1(function (f) {
      return function (b) {
          var go = function ($copy_source) {
              return function ($copy_memo) {
                  var $tco_var_source = $copy_source;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(source, memo) {
                      var v = f(source);
                      if (v.value1 instanceof Data_Maybe.Just) {
                          $tco_var_source = v.value1.value0;
                          $copy_memo = new Cons(v.value0, memo);
                          return;
                      };
                      if (v.value1 instanceof Data_Maybe.Nothing) {
                          $tco_done = true;
                          return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(new Cons(v.value0, memo));
                      };
                      throw new Error("Failed pattern match at Data.List.Types line 105, column 22 - line 107, column 61: " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_source, $copy_memo);
                  };
                  return $tco_result;
              };
          };
          return go(b)(Nil.value);
      };
  });
  var unfoldableList = new Data_Unfoldable.Unfoldable(function () {
      return unfoldable1List;
  }, function (f) {
      return function (b) {
          var go = function ($copy_source) {
              return function ($copy_memo) {
                  var $tco_var_source = $copy_source;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(source, memo) {
                      var v = f(source);
                      if (v instanceof Data_Maybe.Nothing) {
                          $tco_done = true;
                          return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(memo);
                      };
                      if (v instanceof Data_Maybe.Just) {
                          $tco_var_source = v.value0.value1;
                          $copy_memo = new Cons(v.value0.value0, memo);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List.Types line 112, column 22 - line 114, column 52: " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_source, $copy_memo);
                  };
                  return $tco_result;
              };
          };
          return go(b)(Nil.value);
      };
  });                                              
  var altList = new Control_Alt.Alt(function () {
      return functorList;
  }, Data_Semigroup.append(semigroupList));
  var plusList = new Control_Plus.Plus(function () {
      return altList;
  }, Nil.value);
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["NonEmptyList"] = NonEmptyList;
  exports["semigroupList"] = semigroupList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["unfoldable1List"] = unfoldable1List;
  exports["unfoldableList"] = unfoldableList;
  exports["traversableList"] = traversableList;
  exports["altList"] = altList;
  exports["plusList"] = plusList;
  exports["functorNonEmptyList"] = functorNonEmptyList;
  exports["foldableNonEmptyList"] = foldableNonEmptyList;
})(PS["Data.List.Types"] = PS["Data.List.Types"] || {});
(function(exports) {
  /* globals setImmediate, clearImmediate, setTimeout, clearTimeout */
  /* jshint -W083, -W098, -W003 */
  "use strict";

  var Aff = function () {
    // A unique value for empty.
    var EMPTY = {};

    /*

  An awkward approximation. We elide evidence we would otherwise need in PS for
  efficiency sake.

  data Aff eff a
    = Pure a
    | Throw Error
    | Catch (Aff eff a) (Error -> Aff eff a)
    | Sync (Eff eff a)
    | Async ((Either Error a -> Eff eff Unit) -> Eff eff (Canceler eff))
    | forall b. Bind (Aff eff b) (b -> Aff eff a)
    | forall b. Bracket (Aff eff b) (BracketConditions eff b) (b -> Aff eff a)
    | forall b. Fork Boolean (Aff eff b) ?(Fiber eff b -> a)
    | Sequential (ParAff aff a)

  */  
    var PURE    = "Pure";
    var THROW   = "Throw";
    var CATCH   = "Catch";
    var SYNC    = "Sync";
    var ASYNC   = "Async";
    var BIND    = "Bind";
    var BRACKET = "Bracket";
    var FORK    = "Fork";
    var SEQ     = "Sequential";

    /*

  data ParAff eff a
    = forall b. Map (b -> a) (ParAff eff b)
    | forall b. Apply (ParAff eff (b -> a)) (ParAff eff b)
    | Alt (ParAff eff a) (ParAff eff a)
    | ?Par (Aff eff a)

  */  
    var MAP   = "Map";
    var APPLY = "Apply";
    var ALT   = "Alt";

    // Various constructors used in interpretation
    var CONS      = "Cons";      // Cons-list, for stacks
    var RESUME    = "Resume";    // Continue indiscriminately
    var RELEASE   = "Release";   // Continue with bracket finalizers
    var FINALIZER = "Finalizer"; // A non-interruptible effect
    var FINALIZED = "Finalized"; // Marker for finalization
    var FORKED    = "Forked";    // Reference to a forked fiber, with resumption stack
    var FIBER     = "Fiber";     // Actual fiber reference
    var THUNK     = "Thunk";     // Primed effect, ready to invoke

    function Aff(tag, _1, _2, _3) {
      this.tag = tag;
      this._1  = _1;
      this._2  = _2;
      this._3  = _3;
    }

    function AffCtr(tag) {
      var fn = function (_1, _2, _3) {
        return new Aff(tag, _1, _2, _3);
      };
      fn.tag = tag;
      return fn;
    }

    function nonCanceler(error) {
      return new Aff(PURE, void 0);
    }

    function runEff(eff) {
      try {
        eff();
      } catch (error) {
        setTimeout(function () {
          throw error;
        }, 0);
      }
    }

    function runSync(left, right, eff) {
      try {
        return right(eff());
      } catch (error) {
        return left(error);
      }
    }

    function runAsync(left, eff, k) {
      try {
        return eff(k)();
      } catch (error) {
        k(left(error))();
        return nonCanceler;
      }
    }

    var Scheduler = function () {
      var limit    = 1024;
      var size     = 0;
      var ix       = 0;
      var queue    = new Array(limit);
      var draining = false;

      function drain() {
        var thunk;
        draining = true;
        while (size !== 0) {
          size--;
          thunk     = queue[ix];
          queue[ix] = void 0;
          ix        = (ix + 1) % limit;
          thunk();
        }
        draining = false;
      }

      return {
        isDraining: function () {
          return draining;
        },
        enqueue: function (cb) {
          var i, tmp;
          if (size === limit) {
            tmp = draining;
            drain();
            draining = tmp;
          }

          queue[(ix + size) % limit] = cb;
          size++;

          if (!draining) {
            drain();
          }
        }
      };
    }();

    function Supervisor(util) {
      var fibers  = {};
      var fiberId = 0;
      var count   = 0;

      return {
        register: function (fiber) {
          var fid = fiberId++;
          fiber.onComplete({
            rethrow: true,
            handler: function (result) {
              return function () {
                count--;
                delete fibers[fid];
              };
            }
          });
          fibers[fid] = fiber;
          count++;
        },
        isEmpty: function () {
          return count === 0;
        },
        killAll: function (killError, cb) {
          return function () {
            var killCount = 0;
            var kills     = {};

            function kill(fid) {
              kills[fid] = fibers[fid].kill(killError, function (result) {
                return function () {
                  delete kills[fid];
                  killCount--;
                  if (util.isLeft(result) && util.fromLeft(result)) {
                    setTimeout(function () {
                      throw util.fromLeft(result);
                    }, 0);
                  }
                  if (killCount === 0) {
                    cb();
                  }
                };
              })();
            }

            for (var k in fibers) {
              if (fibers.hasOwnProperty(k)) {
                killCount++;
                kill(k);
              }
            }

            fibers  = {};
            fiberId = 0;
            count   = 0;

            return function (error) {
              return new Aff(SYNC, function () {
                for (var k in kills) {
                  if (kills.hasOwnProperty(k)) {
                    kills[k]();
                  }
                }
              });
            };
          };
        }
      };
    }

    // Fiber state machine
    var SUSPENDED   = 0; // Suspended, pending a join.
    var CONTINUE    = 1; // Interpret the next instruction.
    var STEP_BIND   = 2; // Apply the next bind.
    var STEP_RESULT = 3; // Handle potential failure from a result.
    var PENDING     = 4; // An async effect is running.
    var RETURN      = 5; // The current stack has returned.
    var COMPLETED   = 6; // The entire fiber has completed.

    function Fiber(util, supervisor, aff) {
      // Monotonically increasing tick, increased on each asynchronous turn.
      var runTick = 0;

      // The current branch of the state machine.
      var status = SUSPENDED;

      // The current point of interest for the state machine branch.
      var step      = aff;  // Successful step
      var fail      = null; // Failure step
      var interrupt = null; // Asynchronous interrupt

      // Stack of continuations for the current fiber.
      var bhead = null;
      var btail = null;

      // Stack of attempts and finalizers for error recovery. Every `Cons` is also
      // tagged with current `interrupt` state. We use this to track which items
      // should be ignored or evaluated as a result of a kill.
      var attempts = null;

      // A special state is needed for Bracket, because it cannot be killed. When
      // we enter a bracket acquisition or finalizer, we increment the counter,
      // and then decrement once complete.
      var bracketCount = 0;

      // Each join gets a new id so they can be revoked.
      var joinId  = 0;
      var joins   = null;
      var rethrow = true;

      // Each invocation of `run` requires a tick. When an asynchronous effect is
      // resolved, we must check that the local tick coincides with the fiber
      // tick before resuming. This prevents multiple async continuations from
      // accidentally resuming the same fiber. A common example may be invoking
      // the provided callback in `makeAff` more than once, but it may also be an
      // async effect resuming after the fiber was already cancelled.
      function run(localRunTick) {
        var tmp, result, attempt, canceler;
        while (true) {
          tmp       = null;
          result    = null;
          attempt   = null;
          canceler  = null;

          switch (status) {
          case STEP_BIND:
            status = CONTINUE;
            step   = bhead(step);
            if (btail === null) {
              bhead = null;
            } else {
              bhead = btail._1;
              btail = btail._2;
            }
            break;

          case STEP_RESULT:
            if (util.isLeft(step)) {
              status = RETURN;
              fail   = step;
              step   = null;
            } else if (bhead === null) {
              status = RETURN;
            } else {
              status = STEP_BIND;
              step   = util.fromRight(step);
            }
            break;

          case CONTINUE:
            switch (step.tag) {
            case BIND:
              if (bhead) {
                btail = new Aff(CONS, bhead, btail);
              }
              bhead  = step._2;
              status = CONTINUE;
              step   = step._1;
              break;

            case PURE:
              if (bhead === null) {
                status = RETURN;
                step   = util.right(step._1);
              } else {
                status = STEP_BIND;
                step   = step._1;
              }
              break;

            case SYNC:
              status = STEP_RESULT;
              step   = runSync(util.left, util.right, step._1);
              break;

            case ASYNC:
              status = PENDING;
              step   = runAsync(util.left, step._1, function (result) {
                return function () {
                  if (runTick !== localRunTick) {
                    return;
                  }
                  runTick++;
                  Scheduler.enqueue(function () {
                    status = STEP_RESULT;
                    step   = result;
                    run(runTick);
                  });
                };
              });
              return;

            case THROW:
              status = RETURN;
              fail   = util.left(step._1);
              step   = null;
              break;

            // Enqueue the Catch so that we can call the error handler later on
            // in case of an exception.
            case CATCH:
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead    = null;
              btail    = null;
              status   = CONTINUE;
              step     = step._1;
              break;

            // Enqueue the Bracket so that we can call the appropriate handlers
            // after resource acquisition.
            case BRACKET:
              bracketCount++;
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead  = null;
              btail  = null;
              status = CONTINUE;
              step   = step._1;
              break;

            case FORK:
              status = STEP_RESULT;
              tmp    = Fiber(util, supervisor, step._2);
              if (supervisor) {
                supervisor.register(tmp);
              }
              if (step._1) {
                tmp.run();
              }
              step = util.right(tmp);
              break;

            case SEQ:
              status = CONTINUE;
              step   = sequential(util, supervisor, step._1);
              break;
            }
            break;

          case RETURN:
            bhead = null;
            btail = null;
            // If the current stack has returned, and we have no other stacks to
            // resume or finalizers to run, the fiber has halted and we can
            // invoke all join callbacks. Otherwise we need to resume.
            if (attempts === null) {
              status = COMPLETED;
              step   = interrupt || fail || step;
            } else {
              // The interrupt status for the enqueued item.
              tmp      = attempts._3;
              attempt  = attempts._1;
              attempts = attempts._2;

              switch (attempt.tag) {
              // We cannot recover from an interrupt. Otherwise we should
              // continue stepping, or run the exception handler if an exception
              // was raised.
              case CATCH:
                // We should compare the interrupt status as well because we
                // only want it to apply if there has been an interrupt since
                // enqueuing the catch.
                if (interrupt && interrupt !== tmp) {
                  status = RETURN;
                } else if (fail) {
                  status = CONTINUE;
                  step   = attempt._2(util.fromLeft(fail));
                  fail   = null;
                }
                break;

              // We cannot resume from an interrupt or exception.
              case RESUME:
                // As with Catch, we only want to ignore in the case of an
                // interrupt since enqueing the item.
                if (interrupt && interrupt !== tmp || fail) {
                  status = RETURN;
                } else {
                  bhead  = attempt._1;
                  btail  = attempt._2;
                  status = STEP_BIND;
                  step   = util.fromRight(step);
                }
                break;

              // If we have a bracket, we should enqueue the handlers,
              // and continue with the success branch only if the fiber has
              // not been interrupted. If the bracket acquisition failed, we
              // should not run either.
              case BRACKET:
                bracketCount--;
                if (fail === null) {
                  result   = util.fromRight(step);
                  // We need to enqueue the Release with the same interrupt
                  // status as the Bracket that is initiating it.
                  attempts = new Aff(CONS, new Aff(RELEASE, attempt._2, result), attempts, tmp);
                  // We should only coninue as long as the interrupt status has not changed or
                  // we are currently within a non-interruptable finalizer.
                  if (interrupt === tmp || bracketCount > 0) {
                    status = CONTINUE;
                    step   = attempt._3(result);
                  }
                }
                break;

              // Enqueue the appropriate handler. We increase the bracket count
              // because it should not be cancelled.
              case RELEASE:
                bracketCount++;
                attempts = new Aff(CONS, new Aff(FINALIZED, step), attempts, interrupt);
                status   = CONTINUE;
                // It has only been killed if the interrupt status has changed
                // since we enqueued the item.
                if (interrupt && interrupt !== tmp) {
                  step = attempt._1.killed(util.fromLeft(interrupt))(attempt._2);
                } else if (fail) {
                  step = attempt._1.failed(util.fromLeft(fail))(attempt._2);
                } else {
                  step = attempt._1.completed(util.fromRight(step))(attempt._2);
                }
                break;

              case FINALIZER:
                bracketCount++;
                attempts = new Aff(CONS, new Aff(FINALIZED, step), attempts, interrupt);
                status   = CONTINUE;
                step     = attempt._1;
                break;

              case FINALIZED:
                bracketCount--;
                status = RETURN;
                step   = attempt._1;
                break;
              }
            }
            break;

          case COMPLETED:
            for (var k in joins) {
              if (joins.hasOwnProperty(k)) {
                rethrow = rethrow && joins[k].rethrow;
                runEff(joins[k].handler(step));
              }
            }
            joins = null;
            // If we have an interrupt and a fail, then the thread threw while
            // running finalizers. This should always rethrow in a fresh stack.
            if (interrupt && fail) {
              setTimeout(function () {
                throw util.fromLeft(fail);
              }, 0);
            // If we have an unhandled exception, and no other fiber has joined
            // then we need to throw the exception in a fresh stack.
            } else if (util.isLeft(step) && rethrow) {
              setTimeout(function () {
                // Guard on reathrow because a completely synchronous fiber can
                // still have an observer which was added after-the-fact.
                if (rethrow) {
                  throw util.fromLeft(step);
                }
              }, 0);
            }
            return;
          case SUSPENDED:
            status = CONTINUE;
            break;
          case PENDING: return;
          }
        }
      }

      function onComplete(join) {
        return function () {
          if (status === COMPLETED) {
            rethrow = rethrow && join.rethrow;
            join.handler(step)();
            return function () {};
          }

          var jid    = joinId++;
          joins      = joins || {};
          joins[jid] = join;

          return function() {
            if (joins !== null) {
              delete joins[jid];
            }
          };
        };
      }

      function kill(error, cb) {
        return function () {
          if (status === COMPLETED) {
            cb(util.right(void 0))();
            return function () {};
          }

          var canceler = onComplete({
            rethrow: false,
            handler: function (/* unused */) {
              return cb(util.right(void 0));
            }
          })();

          switch (status) {
          case SUSPENDED:
            interrupt = util.left(error);
            status    = COMPLETED;
            step      = interrupt;
            run(runTick);
            break;
          case PENDING:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              if (status === PENDING) {
                attempts = new Aff(CONS, new Aff(FINALIZER, step(error)), attempts, interrupt);
              }
              status   = RETURN;
              step     = null;
              fail     = null;
              run(++runTick);
            }
            break;
          default:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              status = RETURN;
              step   = null;
              fail   = null;
            }
          }

          return canceler;
        };
      }

      function join(cb) {
        return function () {
          var canceler = onComplete({
            rethrow: false,
            handler: cb
          })();
          if (status === SUSPENDED) {
            run(runTick);
          }
          return canceler;
        };
      }

      return {
        kill: kill,
        join: join,
        onComplete: onComplete,
        isSuspended: function () {
          return status === SUSPENDED;
        },
        run: function () {
          if (status === SUSPENDED) {
            if (!Scheduler.isDraining()) {
              Scheduler.enqueue(function () {
                run(runTick);
              });
            } else {
              run(runTick);
            }
          }
        }
      };
    }

    function runPar(util, supervisor, par, cb) {
      // Table of all forked fibers.
      var fiberId   = 0;
      var fibers    = {};

      // Table of currently running cancelers, as a product of `Alt` behavior.
      var killId    = 0;
      var kills     = {};

      // Error used for early cancelation on Alt branches.
      var early     = new Error("[ParAff] Early exit");

      // Error used to kill the entire tree.
      var interrupt = null;

      // The root pointer of the tree.
      var root      = EMPTY;

      // Walks a tree, invoking all the cancelers. Returns the table of pending
      // cancellation fibers.
      function kill(error, par, cb) {
        var step  = par;
        var head  = null;
        var tail  = null;
        var count = 0;
        var kills = {};
        var tmp, kid;

        loop: while (true) {
          tmp = null;

          switch (step.tag) {
          case FORKED:
            if (step._3 === EMPTY) {
              tmp = fibers[step._1];
              kills[count++] = tmp.kill(error, function (result) {
                return function () {
                  count--;
                  if (count === 0) {
                    cb(result)();
                  }
                };
              });
            }
            // Terminal case.
            if (head === null) {
              break loop;
            }
            // Go down the right side of the tree.
            step = head._2;
            if (tail === null) {
              head = null;
            } else {
              head = tail._1;
              tail = tail._2;
            }
            break;
          case MAP:
            step = step._2;
            break;
          case APPLY:
          case ALT:
            if (head) {
              tail = new Aff(CONS, head, tail);
            }
            head = step;
            step = step._1;
            break;
          }
        }

        if (count === 0) {
          cb(util.right(void 0))();
        } else {
          // Run the cancelation effects. We alias `count` because it's mutable.
          kid = 0;
          tmp = count;
          for (; kid < tmp; kid++) {
            kills[kid] = kills[kid]();
          }
        }

        return kills;
      }

      // When a fiber resolves, we need to bubble back up the tree with the
      // result, computing the applicative nodes.
      function join(result, head, tail) {
        var fail, step, lhs, rhs, tmp, kid;

        if (util.isLeft(result)) {
          fail = result;
          step = null;
        } else {
          step = result;
          fail = null;
        }

        loop: while (true) {
          lhs = null;
          rhs = null;
          tmp = null;
          kid = null;

          // We should never continue if the entire tree has been interrupted.
          if (interrupt !== null) {
            return;
          }

          // We've made it all the way to the root of the tree, which means
          // the tree has fully evaluated.
          if (head === null) {
            cb(fail || step)();
            return;
          }

          // The tree has already been computed, so we shouldn't try to do it
          // again. This should never happen.
          // TODO: Remove this?
          if (head._3 !== EMPTY) {
            return;
          }

          switch (head.tag) {
          case MAP:
            if (fail === null) {
              head._3 = util.right(head._1(util.fromRight(step)));
              step    = head._3;
            } else {
              head._3 = fail;
            }
            break;
          case APPLY:
            lhs = head._1._3;
            rhs = head._2._3;
            // If we have a failure we should kill the other side because we
            // can't possible yield a result anymore.
            if (fail) {
              head._3 = fail;
              tmp     = true;
              kid     = killId++;

              kills[kid] = kill(early, fail === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(step, null, null);
                  } else {
                    join(step, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            } else if (lhs === EMPTY || rhs === EMPTY) {
              // We can only proceed if both sides have resolved.
              return;
            } else {
              step    = util.right(util.fromRight(lhs)(util.fromRight(rhs)));
              head._3 = step;
            }
            break;
          case ALT:
            lhs = head._1._3;
            rhs = head._2._3;
            // We can only proceed if both have resolved or we have a success
            if (lhs === EMPTY && util.isLeft(rhs) || rhs === EMPTY && util.isLeft(lhs)) {
              return;
            }
            // If both sides resolve with an error, we should continue with the
            // first error
            if (lhs !== EMPTY && util.isLeft(lhs) && rhs !== EMPTY && util.isLeft(rhs)) {
              fail    = step === lhs ? rhs : lhs;
              step    = null;
              head._3 = fail;
            } else {
              head._3 = step;
              tmp     = true;
              kid     = killId++;
              // Once a side has resolved, we need to cancel the side that is still
              // pending before we can continue.
              kills[kid] = kill(early, step === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(step, null, null);
                  } else {
                    join(step, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            }
            break;
          }

          if (tail === null) {
            head = null;
          } else {
            head = tail._1;
            tail = tail._2;
          }
        }
      }

      function resolve(fiber) {
        return function (result) {
          return function () {
            delete fibers[fiber._1];
            fiber._3 = result;
            join(result, fiber._2._1, fiber._2._2);
          };
        };
      }

      // Walks the applicative tree, substituting non-applicative nodes with
      // `FORKED` nodes. In this tree, all applicative nodes use the `_3` slot
      // as a mutable slot for memoization. In an unresolved state, the `_3`
      // slot is `EMPTY`. In the cases of `ALT` and `APPLY`, we always walk
      // the left side first, because both operations are left-associative. As
      // we `RETURN` from those branches, we then walk the right side.
      function run() {
        var status = CONTINUE;
        var step   = par;
        var head   = null;
        var tail   = null;
        var tmp, fid;

        loop: while (true) {
          tmp = null;
          fid = null;

          switch (status) {
          case CONTINUE:
            switch (step.tag) {
            case MAP:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(MAP, step._1, EMPTY, EMPTY);
              step = step._2;
              break;
            case APPLY:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(APPLY, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            case ALT:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(ALT, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            default:
              // When we hit a leaf value, we suspend the stack in the `FORKED`.
              // When the fiber resolves, it can bubble back up the tree.
              fid    = fiberId++;
              status = RETURN;
              tmp    = step;
              step   = new Aff(FORKED, fid, new Aff(CONS, head, tail), EMPTY);
              tmp    = Fiber(util, supervisor, tmp);
              tmp.onComplete({
                rethrow: false,
                handler: resolve(step)
              })();
              fibers[fid] = tmp;
              if (supervisor) {
                supervisor.register(tmp);
              }
            }
            break;
          case RETURN:
            // Terminal case, we are back at the root.
            if (head === null) {
              break loop;
            }
            // If we are done with the right side, we need to continue down the
            // left. Otherwise we should continue up the stack.
            if (head._1 === EMPTY) {
              head._1 = step;
              status  = CONTINUE;
              step    = head._2;
              head._2 = EMPTY;
            } else {
              head._2 = step;
              step    = head;
              if (tail === null) {
                head  = null;
              } else {
                head  = tail._1;
                tail  = tail._2;
              }
            }
          }
        }

        // Keep a reference to the tree root so it can be cancelled.
        root = step;

        for (fid = 0; fid < fiberId; fid++) {
          fibers[fid].run();
        }
      }

      // Cancels the entire tree. If there are already subtrees being canceled,
      // we need to first cancel those joins. We will then add fresh joins for
      // all pending branches including those that were in the process of being
      // canceled.
      function cancel(error, cb) {
        interrupt = util.left(error);
        var innerKills;
        for (var kid in kills) {
          if (kills.hasOwnProperty(kid)) {
            innerKills = kills[kid];
            for (kid in innerKills) {
              if (innerKills.hasOwnProperty(kid)) {
                innerKills[kid]();
              }
            }
          }
        }

        kills = null;
        var newKills = kill(error, root, cb);

        return function (killError) {
          return new Aff(ASYNC, function (killCb) {
            return function () {
              for (var kid in newKills) {
                if (newKills.hasOwnProperty(kid)) {
                  newKills[kid]();
                }
              }
              return nonCanceler;
            };
          });
        };
      }

      run();

      return function (killError) {
        return new Aff(ASYNC, function (killCb) {
          return function () {
            return cancel(killError, killCb);
          };
        });
      };
    }

    function sequential(util, supervisor, par) {
      return new Aff(ASYNC, function (cb) {
        return function () {
          return runPar(util, supervisor, par, cb);
        };
      });
    }

    Aff.EMPTY       = EMPTY;
    Aff.Pure        = AffCtr(PURE);
    Aff.Throw       = AffCtr(THROW);
    Aff.Catch       = AffCtr(CATCH);
    Aff.Sync        = AffCtr(SYNC);
    Aff.Async       = AffCtr(ASYNC);
    Aff.Bind        = AffCtr(BIND);
    Aff.Bracket     = AffCtr(BRACKET);
    Aff.Fork        = AffCtr(FORK);
    Aff.Seq         = AffCtr(SEQ);
    Aff.ParMap      = AffCtr(MAP);
    Aff.ParApply    = AffCtr(APPLY);
    Aff.ParAlt      = AffCtr(ALT);
    Aff.Fiber       = Fiber;
    Aff.Supervisor  = Supervisor;
    Aff.Scheduler   = Scheduler;
    Aff.nonCanceler = nonCanceler;

    return Aff;
  }();

  exports._pure = Aff.Pure;

  exports._throwError = Aff.Throw;

  exports._catchError = function (aff) {
    return function (k) {
      return Aff.Catch(aff, k);
    };
  };

  exports._map = function (f) {
    return function (aff) {
      if (aff.tag === Aff.Pure.tag) {
        return Aff.Pure(f(aff._1));
      } else {
        return Aff.Bind(aff, function (value) {
          return Aff.Pure(f(value));
        });
      }
    };
  };

  exports._bind = function (aff) {
    return function (k) {
      return Aff.Bind(aff, k);
    };
  };

  exports._fork = function (immediate) {
    return function (aff) {
      return Aff.Fork(immediate, aff);
    };
  };

  exports._liftEffect = Aff.Sync;

  exports.makeAff = Aff.Async;

  exports._makeFiber = function (util, aff) {
    return function () {
      return Aff.Fiber(util, null, aff);
    };
  };
})(PS["Effect.Aff"] = PS["Effect.Aff"] || {});
(function(exports) {
    "use strict";

  exports.error = function (msg) {
    return new Error(msg);
  };

  exports.throwException = function (e) {
    return function () {
      throw e;
    };
  };
})(PS["Effect.Exception"] = PS["Effect.Exception"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Effect.Exception"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Effect = PS["Effect"];
  var Prelude = PS["Prelude"];
  var $$throw = function ($1) {
      return $foreign.throwException($foreign.error($1));
  };
  exports["throw"] = $$throw;
  exports["error"] = $foreign.error;
})(PS["Effect.Exception"] = PS["Effect.Exception"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Effect.Aff"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Parallel = PS["Control.Parallel"];
  var Control_Parallel_Class = PS["Control.Parallel.Class"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Data_Unit = PS["Data.Unit"];
  var Effect = PS["Effect"];
  var Effect_Class = PS["Effect.Class"];
  var Effect_Exception = PS["Effect.Exception"];
  var Effect_Unsafe = PS["Effect.Unsafe"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Canceler = function (x) {
      return x;
  };
  var suspendAff = $foreign._fork(false);                           
  var functorAff = new Data_Functor.Functor($foreign._map);
  var forkAff = $foreign._fork(true);
  var ffiUtil = (function () {
      var unsafeFromRight = function (v) {
          if (v instanceof Data_Either.Right) {
              return v.value0;
          };
          if (v instanceof Data_Either.Left) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromRight: Left");
          };
          throw new Error("Failed pattern match at Effect.Aff line 395, column 21 - line 397, column 31: " + [ v.constructor.name ]);
      };
      var unsafeFromLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return v.value0;
          };
          if (v instanceof Data_Either.Right) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromLeft: Right");
          };
          throw new Error("Failed pattern match at Effect.Aff line 390, column 20 - line 394, column 3: " + [ v.constructor.name ]);
      };
      var isLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return true;
          };
          if (v instanceof Data_Either.Right) {
              return false;
          };
          throw new Error("Failed pattern match at Effect.Aff line 385, column 12 - line 387, column 20: " + [ v.constructor.name ]);
      };
      return {
          isLeft: isLeft,
          fromLeft: unsafeFromLeft,
          fromRight: unsafeFromRight,
          left: Data_Either.Left.create,
          right: Data_Either.Right.create
      };
  })();
  var makeFiber = function (aff) {
      return $foreign._makeFiber(ffiUtil, aff);
  };
  var launchAff = function (aff) {
      return function __do() {
          var v = makeFiber(aff)();
          v.run();
          return v;
      };
  };
  var launchAff_ = function ($49) {
      return Data_Functor["void"](Effect.functorEffect)(launchAff($49));
  };
  var monadAff = new Control_Monad.Monad(function () {
      return applicativeAff;
  }, function () {
      return bindAff;
  });
  var bindAff = new Control_Bind.Bind(function () {
      return applyAff;
  }, $foreign._bind);
  var applyAff = new Control_Apply.Apply(function () {
      return functorAff;
  }, Control_Monad.ap(monadAff));
  var applicativeAff = new Control_Applicative.Applicative(function () {
      return applyAff;
  }, $foreign._pure);
  var monadEffectAff = new Effect_Class.MonadEffect(function () {
      return monadAff;
  }, $foreign._liftEffect);
  var effectCanceler = function ($50) {
      return Canceler(Data_Function["const"](Effect_Class.liftEffect(monadEffectAff)($50)));
  };
  var joinFiber = function (v) {
      return $foreign.makeAff(function (k) {
          return Data_Functor.map(Effect.functorEffect)(effectCanceler)(v.join(k));
      });
  };
  var monadThrowAff = new Control_Monad_Error_Class.MonadThrow(function () {
      return monadAff;
  }, $foreign._throwError);
  var monadErrorAff = new Control_Monad_Error_Class.MonadError(function () {
      return monadThrowAff;
  }, $foreign._catchError);                                     
  var runAff = function (k) {
      return function (aff) {
          return launchAff(Control_Bind.bindFlipped(bindAff)(function ($51) {
              return Effect_Class.liftEffect(monadEffectAff)(k($51));
          })(Control_Monad_Error_Class["try"](monadErrorAff)(aff)));
      };
  };
  var runAff_ = function (k) {
      return function (aff) {
          return Data_Functor["void"](Effect.functorEffect)(runAff(k)(aff));
      };
  };
  var nonCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(Data_Unit.unit));
  exports["Canceler"] = Canceler;
  exports["launchAff"] = launchAff;
  exports["launchAff_"] = launchAff_;
  exports["runAff"] = runAff;
  exports["runAff_"] = runAff_;
  exports["forkAff"] = forkAff;
  exports["suspendAff"] = suspendAff;
  exports["joinFiber"] = joinFiber;
  exports["nonCanceler"] = nonCanceler;
  exports["effectCanceler"] = effectCanceler;
  exports["functorAff"] = functorAff;
  exports["applyAff"] = applyAff;
  exports["applicativeAff"] = applicativeAff;
  exports["bindAff"] = bindAff;
  exports["monadAff"] = monadAff;
  exports["monadThrowAff"] = monadThrowAff;
  exports["monadErrorAff"] = monadErrorAff;
  exports["monadEffectAff"] = monadEffectAff;
  exports["makeAff"] = $foreign.makeAff;
})(PS["Effect.Aff"] = PS["Effect.Aff"] || {});
(function(exports) {
    "use strict";

  exports.unsafeToForeign = function (value) {
    return value;
  };

  exports.unsafeFromForeign = function (value) {
    return value;
  };

  exports.typeOf = function (value) {
    return typeof value;
  };

  exports.tagOf = function (value) {
    return Object.prototype.toString.call(value).slice(8, -1);
  };

  exports.isNull = function (value) {
    return value === null;
  };

  exports.isUndefined = function (value) {
    return value === undefined;
  };
})(PS["Foreign"] = PS["Foreign"] || {});
(function(exports) {
    "use strict";

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Int"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_DivisionRing = PS["Data.DivisionRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Global = PS["Global"];
  var $$Math = PS["Math"];
  var Prelude = PS["Prelude"];      
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["fromNumber"] = fromNumber;
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                                                   
  var uncons = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just({
              head: v.value0,
              tail: v.value1
          });
      };
      throw new Error("Failed pattern match at Data.List line 259, column 1 - line 259, column 66: " + [ v.constructor.name ]);
  };
  var toUnfoldable = function (dictUnfoldable) {
      return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (rec) {
              return new Data_Tuple.Tuple(rec.head, rec.tail);
          })(uncons(xs));
      });
  };
  var tail = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(v.value1);
      };
      throw new Error("Failed pattern match at Data.List line 245, column 1 - line 245, column 43: " + [ v.constructor.name ]);
  };
  var singleton = function (a) {
      return new Data_List_Types.Cons(a, Data_List_Types.Nil.value);
  };
  var reverse = (function () {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return acc;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List line 368, column 3 - line 368, column 19: " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  })();
  var range = function (start) {
      return function (end) {
          if (start === end) {
              return singleton(start);
          };
          if (Data_Boolean.otherwise) {
              var go = function ($copy_s) {
                  return function ($copy_e) {
                      return function ($copy_step) {
                          return function ($copy_rest) {
                              var $tco_var_s = $copy_s;
                              var $tco_var_e = $copy_e;
                              var $tco_var_step = $copy_step;
                              var $tco_done = false;
                              var $tco_result;
                              function $tco_loop(s, e, step, rest) {
                                  if (s === e) {
                                      $tco_done = true;
                                      return new Data_List_Types.Cons(s, rest);
                                  };
                                  if (Data_Boolean.otherwise) {
                                      $tco_var_s = s + step | 0;
                                      $tco_var_e = e;
                                      $tco_var_step = step;
                                      $copy_rest = new Data_List_Types.Cons(s, rest);
                                      return;
                                  };
                                  throw new Error("Failed pattern match at Data.List line 148, column 3 - line 149, column 65: " + [ s.constructor.name, e.constructor.name, step.constructor.name, rest.constructor.name ]);
                              };
                              while (!$tco_done) {
                                  $tco_result = $tco_loop($tco_var_s, $tco_var_e, $tco_var_step, $copy_rest);
                              };
                              return $tco_result;
                          };
                      };
                  };
              };
              return go(end)(start)((function () {
                  var $223 = start > end;
                  if ($223) {
                      return 1;
                  };
                  return -1 | 0;
              })())(Data_List_Types.Nil.value);
          };
          throw new Error("Failed pattern match at Data.List line 144, column 1 - line 144, column 32: " + [ start.constructor.name, end.constructor.name ]);
      };
  };
  var head = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(v.value0);
      };
      throw new Error("Failed pattern match at Data.List line 230, column 1 - line 230, column 22: " + [ v.constructor.name ]);
  };
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(Data_List_Types.Cons.create)(Data_List_Types.Nil.value);
  };
  var filter = function (p) {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return reverse(acc);
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (p(v.value0)) {
                          $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                          $copy_v = v.value1;
                          return;
                      };
                      if (Data_Boolean.otherwise) {
                          $tco_var_acc = acc;
                          $copy_v = v.value1;
                          return;
                      };
                  };
                  throw new Error("Failed pattern match at Data.List line 390, column 3 - line 390, column 27: " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  };
  exports["toUnfoldable"] = toUnfoldable;
  exports["fromFoldable"] = fromFoldable;
  exports["singleton"] = singleton;
  exports["range"] = range;
  exports["head"] = head;
  exports["tail"] = tail;
  exports["uncons"] = uncons;
  exports["reverse"] = reverse;
  exports["filter"] = filter;
})(PS["Data.List"] = PS["Data.List"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var toList = function (v) {
      return new Data_List_Types.Cons(v.value0, v.value1);
  };
  var singleton = function ($160) {
      return Data_List_Types.NonEmptyList(Data_NonEmpty.singleton(Data_List_Types.plusList)($160));
  };
  var head = function (v) {
      return v.value0;
  };
  var fromList = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(new Data_NonEmpty.NonEmpty(v.value0, v.value1));
      };
      throw new Error("Failed pattern match at Data.List.NonEmpty line 117, column 1 - line 117, column 57: " + [ v.constructor.name ]);
  };
  var cons = function (y) {
      return function (v) {
          return new Data_NonEmpty.NonEmpty(y, new Data_List_Types.Cons(v.value0, v.value1));
      };
  };
  exports["fromList"] = fromList;
  exports["toList"] = toList;
  exports["singleton"] = singleton;
  exports["cons"] = cons;
  exports["head"] = head;
})(PS["Data.List.NonEmpty"] = PS["Data.List.NonEmpty"] || {});
(function(exports) {
    "use strict";

  exports.fromCharArray = function (a) {
    return a.join("");
  };

  exports.toCharArray = function (s) {
    return s.split("");
  };
})(PS["Data.String.CodeUnits"] = PS["Data.String.CodeUnits"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.String.CodeUnits"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_String_Pattern = PS["Data.String.Pattern"];
  var Data_String_Unsafe = PS["Data.String.Unsafe"];
  var Prelude = PS["Prelude"];
  exports["fromCharArray"] = $foreign.fromCharArray;
  exports["toCharArray"] = $foreign.toCharArray;
})(PS["Data.String.CodeUnits"] = PS["Data.String.CodeUnits"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Foreign"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Int = PS["Data.Int"];
  var Data_List_NonEmpty = PS["Data.List.NonEmpty"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_String_CodeUnits = PS["Data.String.CodeUnits"];
  var Prelude = PS["Prelude"];                 
  var ForeignError = (function () {
      function ForeignError(value0) {
          this.value0 = value0;
      };
      ForeignError.create = function (value0) {
          return new ForeignError(value0);
      };
      return ForeignError;
  })();
  var TypeMismatch = (function () {
      function TypeMismatch(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeMismatch.create = function (value0) {
          return function (value1) {
              return new TypeMismatch(value0, value1);
          };
      };
      return TypeMismatch;
  })();
  var ErrorAtIndex = (function () {
      function ErrorAtIndex(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ErrorAtIndex.create = function (value0) {
          return function (value1) {
              return new ErrorAtIndex(value0, value1);
          };
      };
      return ErrorAtIndex;
  })();
  var ErrorAtProperty = (function () {
      function ErrorAtProperty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ErrorAtProperty.create = function (value0) {
          return function (value1) {
              return new ErrorAtProperty(value0, value1);
          };
      };
      return ErrorAtProperty;
  })();
  var renderForeignError = function (v) {
      if (v instanceof ForeignError) {
          return v.value0;
      };
      if (v instanceof ErrorAtIndex) {
          return "Error at array index " + (Data_Show.show(Data_Show.showInt)(v.value0) + (": " + renderForeignError(v.value1)));
      };
      if (v instanceof ErrorAtProperty) {
          return "Error at property " + (Data_Show.show(Data_Show.showString)(v.value0) + (": " + renderForeignError(v.value1)));
      };
      if (v instanceof TypeMismatch) {
          return "Type mismatch: expected " + (v.value0 + (", found " + v.value1));
      };
      throw new Error("Failed pattern match at Foreign line 72, column 1 - line 72, column 45: " + [ v.constructor.name ]);
  };
  var fail = function ($107) {
      return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Data_Identity.monadIdentity))(Data_List_NonEmpty.singleton($107));
  };
  var unsafeReadTagged = function (tag) {
      return function (value) {
          if ($foreign.tagOf(value) === tag) {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))($foreign.unsafeFromForeign(value));
          };
          if (Data_Boolean.otherwise) {
              return fail(new TypeMismatch(tag, $foreign.tagOf(value)));
          };
          throw new Error("Failed pattern match at Foreign line 106, column 1 - line 106, column 55: " + [ tag.constructor.name, value.constructor.name ]);
      };
  };
  var readBoolean = unsafeReadTagged("Boolean");
  var readNumber = unsafeReadTagged("Number");
  var readInt = function (value) {
      var error = Data_Either.Left.create(Data_List_NonEmpty.singleton(new TypeMismatch("Int", $foreign.tagOf(value))));
      var fromNumber = function ($108) {
          return Data_Maybe.maybe(error)(Control_Applicative.pure(Data_Either.applicativeEither))(Data_Int.fromNumber($108));
      };
      return Control_Monad_Except.mapExcept(Data_Either.either(Data_Function["const"](error))(fromNumber))(readNumber(value));
  };
  var readString = unsafeReadTagged("String");
  exports["ForeignError"] = ForeignError;
  exports["TypeMismatch"] = TypeMismatch;
  exports["ErrorAtIndex"] = ErrorAtIndex;
  exports["ErrorAtProperty"] = ErrorAtProperty;
  exports["renderForeignError"] = renderForeignError;
  exports["unsafeReadTagged"] = unsafeReadTagged;
  exports["readString"] = readString;
  exports["readBoolean"] = readBoolean;
  exports["readNumber"] = readNumber;
  exports["readInt"] = readInt;
  exports["fail"] = fail;
  exports["unsafeToForeign"] = $foreign.unsafeToForeign;
  exports["typeOf"] = $foreign.typeOf;
  exports["isNull"] = $foreign.isNull;
  exports["isUndefined"] = $foreign.isUndefined;
})(PS["Foreign"] = PS["Foreign"] || {});
(function(exports) {
    "use strict";

  exports.unsafeReadPropImpl = function (f, s, key, value) {
    return value == null ? f : s(value[key]);
  };

  exports.unsafeHasOwnProperty = function (prop, value) {
    return Object.prototype.hasOwnProperty.call(value, prop);
  };

  exports.unsafeHasProperty = function (prop, value) {
    return prop in value;
  };
})(PS["Foreign.Index"] = PS["Foreign.Index"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Foreign.Index"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_List_NonEmpty = PS["Data.List.NonEmpty"];
  var Foreign = PS["Foreign"];
  var Prelude = PS["Prelude"];                 
  var Index = function (errorAt, hasOwnProperty, hasProperty, index) {
      this.errorAt = errorAt;
      this.hasOwnProperty = hasOwnProperty;
      this.hasProperty = hasProperty;
      this.index = index;
  };
  var Indexable = function (ix) {
      this.ix = ix;
  };
  var unsafeReadProp = function (k) {
      return function (value) {
          return $foreign.unsafeReadPropImpl(Foreign.fail(new Foreign.TypeMismatch("object", Foreign.typeOf(value))), Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity)), k, value);
      };
  };
  var readProp = unsafeReadProp;
  var readIndex = unsafeReadProp;
  var ix = function (dict) {
      return dict.ix;
  };
  var index = function (dict) {
      return dict.index;
  };
  var indexableExceptT = new Indexable(function (dictIndex) {
      return function (f) {
          return function (i) {
              return Control_Bind.bindFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Function.flip(index(dictIndex))(i))(f);
          };
      };
  });
  var indexableForeign = new Indexable(function (dictIndex) {
      return index(dictIndex);
  });
  var hasPropertyImpl = function (v) {
      return function (value) {
          if (Foreign.isNull(value)) {
              return false;
          };
          if (Foreign.isUndefined(value)) {
              return false;
          };
          if (Foreign.typeOf(value) === "object" || Foreign.typeOf(value) === "function") {
              return $foreign.unsafeHasProperty(v, value);
          };
          return false;
      };
  };
  var hasProperty = function (dict) {
      return dict.hasProperty;
  };
  var hasOwnPropertyImpl = function (v) {
      return function (value) {
          if (Foreign.isNull(value)) {
              return false;
          };
          if (Foreign.isUndefined(value)) {
              return false;
          };
          if (Foreign.typeOf(value) === "object" || Foreign.typeOf(value) === "function") {
              return $foreign.unsafeHasOwnProperty(v, value);
          };
          return false;
      };
  };
  var indexInt = new Index(Foreign.ErrorAtIndex.create, hasOwnPropertyImpl, hasPropertyImpl, Data_Function.flip(readIndex));
  var indexString = new Index(Foreign.ErrorAtProperty.create, hasOwnPropertyImpl, hasPropertyImpl, Data_Function.flip(readProp));
  var hasOwnProperty = function (dict) {
      return dict.hasOwnProperty;
  };
  var errorAt = function (dict) {
      return dict.errorAt;
  };
  exports["Index"] = Index;
  exports["Indexable"] = Indexable;
  exports["readProp"] = readProp;
  exports["readIndex"] = readIndex;
  exports["ix"] = ix;
  exports["index"] = index;
  exports["hasProperty"] = hasProperty;
  exports["hasOwnProperty"] = hasOwnProperty;
  exports["errorAt"] = errorAt;
  exports["indexString"] = indexString;
  exports["indexInt"] = indexInt;
  exports["indexableForeign"] = indexableForeign;
  exports["indexableExceptT"] = indexableExceptT;
})(PS["Foreign.Index"] = PS["Foreign.Index"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Bonsai.DOM"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Effect = PS["Effect"];
  var Effect_Aff = PS["Effect.Aff"];
  var Effect_Class = PS["Effect.Class"];
  var Effect_Exception = PS["Effect.Exception"];
  var Foreign = PS["Foreign"];
  var Foreign_Index = PS["Foreign.Index"];
  var Prelude = PS["Prelude"];                 
  var Window = function (x) {
      return x;
  };
  var ElementId = function (x) {
      return x;
  };
  var Element = function (x) {
      return x;
  };
  var Document = function (x) {
      return x;
  };
  var requestAnimationFrame = function (eff) {
      return function ($43) {
          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))($foreign.primitives.requestAnimationFrame(eff, $43));
      };
  };                          
  var newtypeElementId = new Data_Newtype.Newtype(function (n) {
      return n;
  }, ElementId);
  var newtypeElement = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Element);
  var newtypeDocument = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Document);
  var location = function (v) {
      return Foreign_Index.ix(Foreign_Index.indexableForeign)(Foreign_Index.indexString)(v)("location");
  };
  var locationHash = function (doc) {
      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(location(doc))(function (v) {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.ix(Foreign_Index.indexableForeign)(Foreign_Index.indexString)(v)("hash"))(Foreign.readString);
      });
  };
  var setLocationHash = function (str) {
      return function (doc) {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(location(doc))(function (v) {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))($foreign.primitives.setLocationHash(str, v));
          });
      };
  };
  var foreignErrorMsg = function (dictFoldable) {
      return function (dictFunctor) {
          return function (err) {
              return Data_Foldable.intercalate(dictFoldable)(Data_Monoid.monoidString)(", ")(Data_Functor.map(dictFunctor)(Foreign.renderForeignError)(err));
          };
      };
  };
  var failNullOrUndefined = function (msg) {
      return function (x) {
          var $36 = Foreign.isNull(x) || Foreign.isUndefined(x);
          if ($36) {
              return Foreign.fail(new Foreign.ForeignError("null or undefined: " + msg));
          };
          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(x);
      };
  };
  var window = Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(failNullOrUndefined("global window")($foreign.primitives.window))(function ($46) {
      return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Window($46));
  });
  var elementById = function (id) {
      return function (doc) {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(failNullOrUndefined("elementById #" + Data_Newtype.unwrap(newtypeElementId)(id))($foreign.primitives.elementById(id, doc)))(function ($47) {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Newtype.wrap(newtypeElement)($47));
          });
      };
  };
  var effF = function (fa) {
      var v = Control_Monad_Except.runExcept(fa);
      if (v instanceof Data_Either.Left) {
          return Effect_Exception["throw"](foreignErrorMsg(Data_List_Types.foldableNonEmptyList)(Data_List_Types.functorNonEmptyList)(v.value0));
      };
      if (v instanceof Data_Either.Right) {
          return Control_Applicative.pure(Effect.applicativeEffect)(v.value0);
      };
      throw new Error("Failed pattern match at Bonsai.DOM line 154, column 3 - line 158, column 13: " + [ v.constructor.name ]);
  };
  var document = function (v) {
      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.ix(Foreign_Index.indexableForeign)(Foreign_Index.indexString)(v)("document"))(failNullOrUndefined("element document")))(function ($48) {
          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Newtype.wrap(newtypeDocument)($48));
      });
  };
  var clearElement = function (elem) {
      var v = $foreign.primitives.clearElement(elem);
      return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(elem);
  };
  var appendChild = function (child) {
      return function (parent) {
          var v = $foreign.primitives.appendChild(child, parent);
          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(child);
      };
  };
  var affF = function (fa) {
      return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(effF(fa));
  };
  exports["Document"] = Document;
  exports["Element"] = Element;
  exports["ElementId"] = ElementId;
  exports["Window"] = Window;
  exports["failNullOrUndefined"] = failNullOrUndefined;
  exports["foreignErrorMsg"] = foreignErrorMsg;
  exports["affF"] = affF;
  exports["effF"] = effF;
  exports["appendChild"] = appendChild;
  exports["clearElement"] = clearElement;
  exports["document"] = document;
  exports["elementById"] = elementById;
  exports["location"] = location;
  exports["locationHash"] = locationHash;
  exports["requestAnimationFrame"] = requestAnimationFrame;
  exports["setLocationHash"] = setLocationHash;
  exports["window"] = window;
  exports["newtypeDocument"] = newtypeDocument;
  exports["newtypeElement"] = newtypeElement;
  exports["newtypeElementId"] = newtypeElementId;
})(PS["Bonsai.DOM"] = PS["Bonsai.DOM"] || {});
(function(exports) {
    "use strict";
  // Heaviliy inspirec by purescript-debug
  // Alias require to prevent webpack or browserify from actually requiring.
  var req = typeof module === "undefined" ? undefined : module.require;
  var util = req === undefined ? undefined : req("util");

  exports.logJsonObj = function (msg) {
    return function (obj) {
      return function () {
        // node only recurses two levels into an object before printing
        // "[object]" for further objects when using console.log()
        if (util !== undefined) {
          console.log(msg, JSON.stringify(obj), util.inspect(obj, { depth: null, colors: true }));
        } else {
          console.log(msg, JSON.stringify(obj), obj);
        }
        return obj;
      };
    };
  };

  exports.startTiming = function () {
    return new Date();
  };

  exports.logTiming = function (msg) {
    return function (start) {
      return function () {
        var end = new Date();
        console.log(msg + " " + (end - start) + "ms");
      };
    };
  };
})(PS["Bonsai.Debug"] = PS["Bonsai.Debug"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Bonsai.Debug"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Unit = PS["Data.Unit"];
  var Effect = PS["Effect"];
  var Foreign = PS["Foreign"];
  var Prelude = PS["Prelude"];
  var debugTiming = function (dbg) {
      return function (msg) {
          return function (start) {
              if (dbg) {
                  return $foreign.logTiming(msg)(start);
              };
              return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
          };
      };
  };
  var debugJsonObj = function (dbg) {
      return function (msg) {
          return function (obj) {
              if (dbg) {
                  return $foreign.logJsonObj(msg)(obj);
              };
              return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
          };
      };
  };
  exports["debugJsonObj"] = debugJsonObj;
  exports["debugTiming"] = debugTiming;
  exports["logJsonObj"] = $foreign.logJsonObj;
  exports["startTiming"] = $foreign.startTiming;
})(PS["Bonsai.Debug"] = PS["Bonsai.Debug"] || {});
(function(exports) {
  /* globals exports, setTimeout */
  "use strict";

  var AVar = function () {

    function MutableQueue () {
      this.head = null;
      this.last = null;
      this.size = 0;
    }

    function MutableCell (queue, value) {
      this.queue = queue;
      this.value = value;
      this.next  = null;
      this.prev  = null;
    }

    function AVar (value) {
      this.draining = false;
      this.error    = null;
      this.value    = value;
      this.takes    = new MutableQueue();
      this.reads    = new MutableQueue();
      this.puts     = new MutableQueue();
    }

    var EMPTY = {};

    function runEff(eff) {
      try {
        eff();
      } catch (error) {
        setTimeout(function () {
          throw error;
        }, 0);
      }
    }

    function putLast (queue, value) {
      var cell = new MutableCell(queue, value);
      switch (queue.size) {
      case 0:
        queue.head = cell;
        break;
      case 1:
        cell.prev = queue.head;
        queue.head.next = cell;
        queue.last = cell;
        break;
      default:
        cell.prev = queue.last;
        queue.last.next = cell;
        queue.last = cell;
      }
      queue.size++;
      return cell;
    }

    function takeLast (queue) {
      var cell;
      switch (queue.size) {
      case 0:
        return null;
      case 1:
        cell = queue.head;
        queue.head = null;
        break;
      case 2:
        cell = queue.last;
        queue.head.next = null;
        queue.last = null;
        break;
      default:
        cell = queue.last;
        queue.last = cell.prev;
        queue.last.next = null;
      }
      cell.prev = null;
      cell.queue = null;
      queue.size--;
      return cell.value;
    }

    function takeHead (queue) {
      var cell;
      switch (queue.size) {
      case 0:
        return null;
      case 1:
        cell = queue.head;
        queue.head = null;
        break;
      case 2:
        cell = queue.head;
        queue.last.prev = null;
        queue.head = queue.last;
        queue.last = null;
        break;
      default:
        cell = queue.head;
        queue.head = cell.next;
        queue.head.prev = null;
      }
      cell.next = null;
      cell.queue = null;
      queue.size--;
      return cell.value;
    }

    function deleteCell (cell) {
      if (cell.queue === null) {
        return;
      }
      if (cell.queue.last === cell) {
        takeLast(cell.queue);
        return;
      }
      if (cell.queue.head === cell) {
        takeHead(cell.queue);
        return;
      }
      if (cell.prev) {
        cell.prev.next = cell.next;
      }
      if (cell.next) {
        cell.next.prev = cell.prev;
      }
      cell.queue.size--;
      cell.queue = null;
      cell.value = null;
      cell.next  = null;
      cell.prev  = null;
    }

    function drainVar (util, avar) {
      if (avar.draining) {
        return;
      }

      var ps = avar.puts;
      var ts = avar.takes;
      var rs = avar.reads;
      var p, r, t, value, rsize;

      avar.draining = true;

      while (1) { // eslint-disable-line no-constant-condition
        p = null;
        r = null;
        t = null;
        value = avar.value;
        rsize = rs.size;

        if (avar.error !== null) {
          value = util.left(avar.error);
          while (p = takeHead(ps)) { // eslint-disable-line no-cond-assign
            runEff(p.cb(value));
          }
          while (r = takeHead(rs)) { // eslint-disable-line no-cond-assign
            runEff(r(value));
          }
          while (t = takeHead(ts)) { // eslint-disable-line no-cond-assign
            runEff(t(value));
          }
          break;
        }

        // Process the next put. We do not immediately invoke the callback
        // because we want to preserve ordering. If there are takes/reads
        // we want to run those first.
        if (value === EMPTY && (p = takeHead(ps))) {
          avar.value = value = p.value;
        }

        if (value !== EMPTY) {
          // We go ahead and queue up the next take for the same reasons as
          // above. Invoking the read callbacks can affect the mutable queue.
          t = takeHead(ts);
          // We only want to process the reads queued up before running these
          // callbacks so we guard on rsize.
          while (rsize-- && (r = takeHead(rs))) {
            runEff(r(util.right(value)));
          }
          if (t !== null) {
            avar.value = EMPTY;
            runEff(t(util.right(value)));
          }
        }

        if (p !== null) {
          runEff(p.cb(util.right(void 0)));
        }

        // Callbacks could have queued up more items so we need to guard on the
        // actual mutable properties.
        if (avar.value === EMPTY && ps.size === 0 || avar.value !== EMPTY && ts.size === 0) {
          break;
        }
      }
      avar.draining = false;
    }

    AVar.EMPTY      = EMPTY;
    AVar.putLast    = putLast;
    AVar.takeLast   = takeLast;
    AVar.takeHead   = takeHead;
    AVar.deleteCell = deleteCell;
    AVar.drainVar   = drainVar;

    return AVar;
  }();

  exports.empty = function () {
    return new AVar(AVar.EMPTY);
  };

  exports._putVar = function (util, value, avar, cb) {
    return function () {
      var cell = AVar.putLast(avar.puts, { cb: cb, value: value });
      AVar.drainVar(util, avar);
      return function () {
        AVar.deleteCell(cell);
      };
    };
  };

  exports._takeVar = function (util, avar, cb) {
    return function () {
      var cell = AVar.putLast(avar.takes, cb);
      AVar.drainVar(util, avar);
      return function () {
        AVar.deleteCell(cell);
      };
    };
  };
})(PS["Effect.AVar"] = PS["Effect.AVar"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Effect.AVar"];
  var Data_Either = PS["Data.Either"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Maybe = PS["Data.Maybe"];
  var Effect = PS["Effect"];
  var Effect_Exception = PS["Effect.Exception"];
  var Prelude = PS["Prelude"];                 
  var Killed = (function () {
      function Killed(value0) {
          this.value0 = value0;
      };
      Killed.create = function (value0) {
          return new Killed(value0);
      };
      return Killed;
  })();
  var Filled = (function () {
      function Filled(value0) {
          this.value0 = value0;
      };
      Filled.create = function (value0) {
          return new Filled(value0);
      };
      return Filled;
  })();
  var Empty = (function () {
      function Empty() {

      };
      Empty.value = new Empty();
      return Empty;
  })();
  var ffiUtil = {
      left: Data_Either.Left.create,
      right: Data_Either.Right.create,
      nothing: Data_Maybe.Nothing.value,
      just: Data_Maybe.Just.create,
      killed: Killed.create,
      filled: Filled.create,
      empty: Empty.value
  };
  var put = function (value) {
      return function (avar) {
          return function (cb) {
              return $foreign._putVar(ffiUtil, value, avar, cb);
          };
      };
  };
  var take = function (avar) {
      return function (cb) {
          return $foreign._takeVar(ffiUtil, avar, cb);
      };
  };
  exports["Killed"] = Killed;
  exports["Filled"] = Filled;
  exports["Empty"] = Empty;
  exports["take"] = take;
  exports["put"] = put;
  exports["empty"] = $foreign.empty;
})(PS["Effect.AVar"] = PS["Effect.AVar"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Maybe = PS["Data.Maybe"];
  var Effect = PS["Effect"];
  var Effect_AVar = PS["Effect.AVar"];
  var Effect_Aff = PS["Effect.Aff"];
  var Effect_Class = PS["Effect.Class"];
  var Effect_Exception = PS["Effect.Exception"];
  var Prelude = PS["Prelude"];
  var take = function (avar) {
      return Effect_Aff.makeAff(function (k) {
          return function __do() {
              var v = Effect_AVar.take(avar)(k)();
              return Effect_Aff.effectCanceler(v);
          };
      });
  };
  var put = function (value) {
      return function (avar) {
          return Effect_Aff.makeAff(function (k) {
              return function __do() {
                  var v = Effect_AVar.put(value)(avar)(k)();
                  return Effect_Aff.effectCanceler(v);
              };
          });
      };
  };
  var empty = Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_AVar.empty);
  exports["empty"] = empty;
  exports["take"] = take;
  exports["put"] = put;
})(PS["Effect.Aff.AVar"] = PS["Effect.Aff.AVar"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Bonsai_DOM = PS["Bonsai.DOM"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Effect = PS["Effect"];
  var Effect_Aff = PS["Effect.Aff"];
  var Effect_Aff_AVar = PS["Effect.Aff.AVar"];
  var Effect_Class = PS["Effect.Class"];
  var Prelude = PS["Prelude"];                 
  var Cmd = (function () {
      function Cmd(value0) {
          this.value0 = value0;
      };
      Cmd.create = function (value0) {
          return new Cmd(value0);
      };
      return Cmd;
  })();
  var TaskCmd = (function () {
      function TaskCmd(value0) {
          this.value0 = value0;
      };
      TaskCmd.create = function (value0) {
          return new TaskCmd(value0);
      };
      return TaskCmd;
  })();
  var unitTask = function (aff) {
      return TaskCmd.create(function (ctx) {
          return aff(ctx.document);
      });
  };                                
  var emitMessage = function (ctx) {
      return function (msg) {
          return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(ctx.emitter(msg));
      };
  };
  var semigroupCmd = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          if (v instanceof Cmd && v.value0.length === 0) {
              return v1;
          };
          if (v1 instanceof Cmd && v1.value0.length === 0) {
              return v;
          };
          if (v instanceof Cmd && v1 instanceof Cmd) {
              return new Cmd(Data_Semigroup.append(Data_Semigroup.semigroupArray)(v.value0)(v1.value0));
          };
          if (v instanceof Cmd && v1 instanceof TaskCmd) {
              return new TaskCmd(function (ctx) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Data_Foldable.for_(Effect_Aff.applicativeAff)(Data_Foldable.foldableArray)(v.value0)(emitMessage(ctx)))(function () {
                      return v1.value0(ctx);
                  });
              });
          };
          if (v instanceof TaskCmd && v1 instanceof Cmd) {
              return new TaskCmd(function (ctx) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(v.value0(ctx))(function () {
                      return Data_Foldable.for_(Effect_Aff.applicativeAff)(Data_Foldable.foldableArray)(v1.value0)(emitMessage(ctx));
                  });
              });
          };
          if (v instanceof TaskCmd && v1 instanceof TaskCmd) {
              return new TaskCmd(function (ctx) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(v.value0(ctx))(function () {
                      return v1.value0(ctx);
                  });
              });
          };
          throw new Error("Failed pattern match at Bonsai.Types line 141, column 1 - line 141, column 45: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var monoidCmd = new Data_Monoid.Monoid(function () {
      return semigroupCmd;
  }, new Cmd([  ]));
  var simpleTask = function (aff) {
      return TaskCmd.create(function (ctx) {
          return Control_Bind.bind(Effect_Aff.bindAff)(aff(ctx.document))(emitMessage(ctx));
      });
  };
  var bindCmd = function (v) {
      return function (v1) {
          if (v instanceof Cmd && v.value0.length === 0) {
              return new Cmd([  ]);
          };
          if (v instanceof Cmd) {
              return Data_Foldable.fold(Data_Foldable.foldableArray)(monoidCmd)(Data_Functor.map(Data_Functor.functorArray)(v1)(v.value0));
          };
          if (v instanceof TaskCmd) {
              return new TaskCmd(function (contextB) {
                  var emitterA = function (a) {
                      var v2 = v1(a);
                      if (v2 instanceof Cmd) {
                          return Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(v2.value0)(contextB.emitter);
                      };
                      if (v2 instanceof TaskCmd) {
                          return Effect_Aff.launchAff_(v2.value0(contextB));
                      };
                      throw new Error("Failed pattern match at Bonsai.Types line 70, column 11 - line 74, column 39: " + [ v2.constructor.name ]);
                  };
                  return v.value0({
                      emitter: emitterA,
                      delay: contextB.delay,
                      fiber: contextB.fiber,
                      document: contextB.document
                  });
              });
          };
          throw new Error("Failed pattern match at Bonsai.Types line 63, column 1 - line 63, column 54: " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var cmdMonad = new Control_Monad.Monad(function () {
      return cmdApplicative;
  }, function () {
      return cmdBind;
  });
  var cmdBind = new Control_Bind.Bind(function () {
      return cmdApply;
  }, bindCmd);
  var cmdApply = new Control_Apply.Apply(function () {
      return cmdFunctor;
  }, Control_Monad.ap(cmdMonad));
  var cmdApplicative = new Control_Applicative.Applicative(function () {
      return cmdApply;
  }, function (x) {
      return new Cmd([ x ]);
  });
  var cmdFunctor = new Data_Functor.Functor(Control_Applicative.liftA1(cmdApplicative));
  var cmdAlt = new Control_Alt.Alt(function () {
      return cmdFunctor;
  }, function (v) {
      return function (v1) {
          if (v instanceof TaskCmd && v1 instanceof Cmd) {
              return new TaskCmd(function (ctx) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Data_Foldable.for_(Effect_Aff.applicativeAff)(Data_Foldable.foldableArray)(v1.value0)(emitMessage(ctx)))(function () {
                      return v.value0(ctx);
                  });
              });
          };
          if (v instanceof TaskCmd && v1 instanceof TaskCmd) {
              return new TaskCmd(function (ctx) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff.forkAff(v.value0(ctx)))(function (v2) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(v1.value0(ctx))(function () {
                          return Effect_Aff.joinFiber(v2);
                      });
                  });
              });
          };
          return Data_Semigroup.append(semigroupCmd)(v)(v1);
      };
  });
  var cmdPlus = new Control_Plus.Plus(function () {
      return cmdAlt;
  }, new Cmd([  ]));
  exports["Cmd"] = Cmd;
  exports["TaskCmd"] = TaskCmd;
  exports["emitMessage"] = emitMessage;
  exports["simpleTask"] = simpleTask;
  exports["unitTask"] = unitTask;
  exports["cmdFunctor"] = cmdFunctor;
  exports["cmdApply"] = cmdApply;
  exports["cmdApplicative"] = cmdApplicative;
  exports["cmdBind"] = cmdBind;
  exports["cmdMonad"] = cmdMonad;
  exports["semigroupCmd"] = semigroupCmd;
  exports["monoidCmd"] = monoidCmd;
  exports["cmdAlt"] = cmdAlt;
  exports["cmdPlus"] = cmdPlus;
})(PS["Bonsai.Types"] = PS["Bonsai.Types"] || {});
(function(exports) {
    "use strict";

  // close over a document - global or jsdom
  //
  // closedDoc is a top level constant in Elm VirtualDom
  // we need it to be an argument.
  // to keep the diff minimal, we close the whole elm source
  // over the document.
  function closeOverDocument(localDoc) {

  var STYLE_KEY = 'STYLE';
  var EVENT_KEY = 'EVENT';
  var ATTR_KEY = 'ATTR';
  var ATTR_NS_KEY = 'ATTR_NS';



  ////////////  VIRTUAL DOM NODES  ////////////


  function text(string)
  {
	  return {
		  type: 'text',
		  text: string
	  };
  }


  function nodeHelp(tag, factList, kidList)
  {
	  var organized = organizeFacts(factList);
	  var namespace = organized.namespace;
	  var facts = organized.facts;

	  var children = [];
	  var descendantsCount = 0;
	  for (var i = 0; i < kidList.length; i++)
	  {
		  // xxx use read-only array as-is?
		  var kid = kidList[i];
		  descendantsCount += (kid.descendantsCount || 0);
		  children.push(kid);
	  }
	  descendantsCount += children.length;

	  return {
		  type: 'node',
		  tag: tag,
		  facts: facts,
		  children: children,
		  namespace: namespace,
		  descendantsCount: descendantsCount
	  };
  }


  function keyedNode(tag, factList, kidList)
  {
	  var organized = organizeFacts(factList);
	  var namespace = organized.namespace;
	  var facts = organized.facts;

	  var children = [];
	  var descendantsCount = 0;
	  for (var i = 0; i < kidList.length; i++)
	  {
		  var kid = kidList[i];
		  descendantsCount += (kid.value1.descendantsCount || 0);
		  children.push(kid);
	  }
	  descendantsCount += children.length;

	  return {
		  type: 'keyed-node',
		  tag: tag,
		  facts: facts,
		  children: children,
		  namespace: namespace,
		  descendantsCount: descendantsCount
	  };
  }


  function custom(factList, model, impl)
  {
	  var facts = organizeFacts(factList).facts;

	  return {
		  type: 'custom',
		  facts: facts,
		  model: model,
		  impl: impl
	  };
  }


  function map(tagger, node)
  {
	  return {
		  type: 'tagger',
		  tagger: tagger,
		  node: node,
		  descendantsCount: 1 + (node.descendantsCount || 0)
	  };
  }


  function thunk(func, args, thunk)
  {
	  return {
		  type: 'thunk',
		  func: func,
		  args: args,
		  thunk: thunk,
		  node: undefined
	  };
  }

  function lazy(fn, a)
  {
	  return thunk(fn, [a], function() {
		  return fn(a);
	  });
  }

  function lazy2(fn, a, b)
  {
	  return thunk(fn, [a,b], function() {
		  return fn(a)(b);
	  });
  }

  function lazy3(fn, a, b, c)
  {
	  return thunk(fn, [a,b,c], function() {
		  return fn(a)(b)(c);
	  });
  }



  // FACTS


  function organizeFacts(factList)
  {
	  var namespace, facts = {};

	  for (var i = 0; i < factList.length; i++)
	  {
		  var entry = factList[i];
		  var key = entry.key;

		  if (key === ATTR_KEY || key === ATTR_NS_KEY || key === EVENT_KEY)
		  {
			  var subFacts = facts[key] || {};
			  subFacts[entry.realKey] = entry.value;
			  facts[key] = subFacts;
		  }
		  else if (key === STYLE_KEY)
		  {
			  var styles = facts[key] || {};
			  var styleList = entry.value;
			  for (var j = 0; j < styleList.length; j++)
			  {
				  var style = styleList[j];
				  styles[style.value0] = style.value1;
			  }
			  facts[key] = styles;
		  }
		  else if (key === 'namespace')
		  {
			  namespace = entry.value;
		  }
		  else if (key === 'className')
		  {
			  var classes = facts[key];
			  facts[key] = typeof classes === 'undefined'
				  ? entry.value
				  : classes + ' ' + entry.value;
		  }
 		 else
		  {
			  facts[key] = entry.value;
		  }
	  }

	  return {
		  facts: facts,
		  namespace: namespace
	  };
  }



  ////////////  PROPERTIES AND ATTRIBUTES  ////////////


  function style(value)
  {
	  return {
		  key: STYLE_KEY,
		  value: value
	  };
  }


  function property(key, value)
  {
	  return {
		  key: key,
		  value: value
	  };
  }


  function attribute(key, value)
  {
	  return {
		  key: ATTR_KEY,
		  realKey: key,
		  value: value
	  };
  }


  function attributeNS(namespace, key, value)
  {
	  return {
		  key: ATTR_NS_KEY,
		  realKey: key,
		  value: {
			  value: value,
			  namespace: namespace
		  }
	  };
  }


  function on(name, options, decoder)
  {
	  return {
		  key: EVENT_KEY,
		  realKey: name,
		  value: {
			  options: options,
			  decoder: decoder,
			  filter: defaultFilter,
		  }
	  };
  }

  function defaultFilter(ev) {
    return function() {
      return true;
    };
  }

  function filterOn(name, options, filter, decoder) {
	  return {
		  key: EVENT_KEY,
		  realKey: name,
		  value: {
			  options: options,
			  decoder: decoder,
			  filter: filter,
		  }
	  };
  }


  function equalEvents(a, b)
  {
	  if (a.options !== b.options)
	  {
		  if (a.options.stopPropagation !== b.options.stopPropagation || a.options.preventDefault !== b.options.preventDefault)
		  {
			  return false;
		  }
	  }

	  // return _elm_lang$core$Native_Json.equality(a.decoder, b.decoder);
	  // XXX: event equality?
	  // console.log("event equality", a.decoder, b.decoder, a.decoder === b.decoder);
	  return a.decoder === b.decoder && a.filter === b.filter;
  }


  function mapProperty(decodeMapper, func, property)
  {
	  if (property.key !== EVENT_KEY)
	  {
		  return property;
	  }

	  return filterOn(
		  property.realKey,
		  property.value.options,
      property.value.filter,
		  decodeMapper(func)(property.value.decoder)
	  );
  }


  ////////////  RENDER  ////////////


  function render(vNode, eventNode)
  {
	  switch (vNode.type)
	  {
		  case 'thunk':
			  if (!vNode.node)
			  {
				  vNode.node = vNode.thunk();
			  }
			  return render(vNode.node, eventNode);

		  case 'tagger':
			  var subNode = vNode.node;
			  var tagger = vNode.tagger;

			  while (subNode.type === 'tagger')
			  {
				  typeof tagger !== 'object'
					  ? tagger = [tagger, subNode.tagger]
					  : tagger.push(subNode.tagger);

				  subNode = subNode.node;
			  }

			  var subEventRoot = { tagger: tagger, parent: eventNode };
			  var domNode = render(subNode, subEventRoot);
			  domNode.elm_event_node_ref = subEventRoot;
			  return domNode;

		  case 'text':
			  return localDoc.createTextNode(vNode.text);

		  case 'node':
			  var domNode = vNode.namespace
				  ? localDoc.createElementNS(vNode.namespace, vNode.tag)
				  : localDoc.createElement(vNode.tag);

			  applyFacts(domNode, eventNode, vNode.facts);

			  var children = vNode.children;

			  for (var i = 0; i < children.length; i++)
			  {
				  domNode.appendChild(render(children[i], eventNode));
			  }

			  return domNode;

		  case 'keyed-node':
			  var domNode = vNode.namespace
				  ? localDoc.createElementNS(vNode.namespace, vNode.tag)
				  : localDoc.createElement(vNode.tag);

			  applyFacts(domNode, eventNode, vNode.facts);

			  var children = vNode.children;

			  for (var i = 0; i < children.length; i++)
			  {
				  domNode.appendChild(render(children[i].value1, eventNode));
			  }

			  return domNode;

		  case 'custom':
			  var domNode = vNode.impl.render(vNode.model);
			  applyFacts(domNode, eventNode, vNode.facts);
			  return domNode;
	  }
  }



  ////////////  APPLY FACTS  ////////////


  function applyFacts(domNode, eventNode, facts)
  {
	  for (var key in facts)
	  {
		  var value = facts[key];

		  switch (key)
		  {
			  case STYLE_KEY:
				  applyStyles(domNode, value);
				  break;

			  case EVENT_KEY:
				  applyEvents(domNode, eventNode, value);
				  break;

			  case ATTR_KEY:
				  applyAttrs(domNode, value);
				  break;

			  case ATTR_NS_KEY:
				  applyAttrsNS(domNode, value);
				  break;

			  case 'value':
				  if (domNode[key] !== value)
				  {
					  domNode[key] = value;
				  }
				  break;

			  default:
				  domNode[key] = value;
				  break;
		  }
	  }
  }

  function applyStyles(domNode, styles)
  {
	  var domNodeStyle = domNode.style;

	  for (var key in styles)
	  {
		  domNodeStyle[key] = styles[key];
	  }
  }

  function applyEvents(domNode, eventNode, events)
  {
	  var allHandlers = domNode.elm_handlers || {};

	  for (var key in events)
	  {
		  var handler = allHandlers[key];
		  var value = events[key];

		  if (typeof value === 'undefined')
		  {
			  domNode.removeEventListener(key, handler);
			  allHandlers[key] = undefined;
		  }
		  else if (typeof handler === 'undefined')
		  {
			  var handler = makeEventHandler(eventNode, value);
			  domNode.addEventListener(key, handler);
			  allHandlers[key] = handler;
		  }
		  else
		  {
			  handler.info = value;
		  }
	  }

	  domNode.elm_handlers = allHandlers;
  }

  function makeEventHandler(eventNode, info)
  {
	  function eventHandler(event)
	  {
		  var info = eventHandler.info;

      var b = info.filter(event)();

		  // keep the indentation the same as in the Elm version
		  // in case of bugfixes upstream
		  if (b)
		  {
		    // var value = A2(_elm_lang$core$Native_Json.run,info.decoder, event);
		    var value = info.decoder(event);

			  // event options stop propagation/preventdefault are only
			  // applied after successful EventDecoder.
			  // this is a feature: non standard options will
			  // only apply to successful event decodes (= that emit
			  // a command).  Failures will bubble on.
			  var options = info.options;
			  if (options.stopPropagation)
			  {
				  event.stopPropagation();
			  }
			  if (options.preventDefault)
			  {
				  event.preventDefault();
			  }

			  // error/success is all handled in the purescript mapping functions
			  var message = value;

			  var currentEventNode = eventNode;
			  var tn = topEventNode(eventNode);
			  var emitter = tn.emitter;
			  var cmdMap = tn.cmdMap;

			  while (currentEventNode)
			  {
				  var tagger = currentEventNode.tagger;
				  emitter = currentEventNode.emitter;

				  if (typeof tagger === 'function')
				  {
					  message = cmdMap(tagger)(message);
				  }
				  else if (typeof tagger === 'object')
				  {
					  for (var i = tagger.length; i--; )
					  {
						  message = cmdMap(tagger[i])(message);
					  }
				  }
				  currentEventNode = currentEventNode.parent;
			  }

			  // emit the message to bonsai
			  if (emitter(message)()) {
				  console.log("triggering event: ", event);
			  }
		  }
	  };

	  eventHandler.info = info;

	  return eventHandler;
  }

  function applyAttrs(domNode, attrs)
  {
	  for (var key in attrs)
	  {
		  var value = attrs[key];
		  if (typeof value === 'undefined')
		  {
			  domNode.removeAttribute(key);
		  }
		  else
		  {
			  domNode.setAttribute(key, value);
		  }
	  }
  }

  function applyAttrsNS(domNode, nsAttrs)
  {
	  for (var key in nsAttrs)
	  {
		  var pair = nsAttrs[key];
		  var namespace = pair.namespace;
		  var value = pair.value;

		  if (typeof value === 'undefined')
		  {
			  domNode.removeAttributeNS(namespace, key);
		  }
		  else
		  {
			  domNode.setAttributeNS(namespace, key, value);
		  }
	  }
  }



  ////////////  DIFF  ////////////


  function diff(a, b)
  {
	  var patches = [];
	  diffHelp(a, b, patches, 0);
	  return patches;
  }


  function makePatch(type, index, data)
  {
	  return {
		  index: index,
		  type: type,
		  data: data,
		  domNode: undefined,
		  eventNode: undefined
	  };
  }


  function diffHelp(a, b, patches, index)
  {
	  if (a === b)
	  {
		  return;
	  }

	  var aType = a.type;
	  var bType = b.type;

	  // Bail if you run into different types of nodes. Implies that the
	  // structure has changed significantly and it's not worth a diff.
	  if (aType !== bType)
	  {
		  patches.push(makePatch('p-redraw', index, b));
		  return;
	  }

	  // Now we know that both nodes are the same type.
	  switch (bType)
	  {
		  case 'thunk':
			  var aArgs = a.args;
			  var bArgs = b.args;
			  var i = aArgs.length;
			  var same = a.func === b.func && i === bArgs.length;
			  while (same && i--)
			  {
				  same = aArgs[i] === bArgs[i];
			  }
			  if (same)
			  {
				  b.node = a.node;
				  return;
			  }
			  b.node = b.thunk();
			  var subPatches = [];
			  diffHelp(a.node, b.node, subPatches, 0);
			  if (subPatches.length > 0)
			  {
				  patches.push(makePatch('p-thunk', index, subPatches));
			  }
			  return;

		  case 'tagger':
			  // gather nested taggers
			  var aTaggers = a.tagger;
			  var bTaggers = b.tagger;
			  var nesting = false;

			  var aSubNode = a.node;
			  while (aSubNode.type === 'tagger')
			  {
				  nesting = true;

				  typeof aTaggers !== 'object'
					  ? aTaggers = [aTaggers, aSubNode.tagger]
					  : aTaggers.push(aSubNode.tagger);

				  aSubNode = aSubNode.node;
			  }

			  var bSubNode = b.node;
			  while (bSubNode.type === 'tagger')
			  {
				  nesting = true;

				  typeof bTaggers !== 'object'
					  ? bTaggers = [bTaggers, bSubNode.tagger]
					  : bTaggers.push(bSubNode.tagger);

				  bSubNode = bSubNode.node;
			  }

			  // Just bail if different numbers of taggers. This implies the
			  // structure of the virtual DOM has changed.
			  if (nesting && aTaggers.length !== bTaggers.length)
			  {
				  patches.push(makePatch('p-redraw', index, b));
				  return;
			  }

			  // check if taggers are "the same"
			  if (nesting ? !pairwiseRefEqual(aTaggers, bTaggers) : aTaggers !== bTaggers)
			  {
				  patches.push(makePatch('p-tagger', index, bTaggers));
			  }

			  // diff everything below the taggers
			  diffHelp(aSubNode, bSubNode, patches, index + 1);
			  return;

		  case 'text':
			  if (a.text !== b.text)
			  {
				  patches.push(makePatch('p-text', index, b.text));
				  return;
			  }

			  return;

		  case 'node':
			  // Bail if obvious indicators have changed. Implies more serious
			  // structural changes such that it's not worth it to diff.
			  if (a.tag !== b.tag || a.namespace !== b.namespace)
			  {
				  patches.push(makePatch('p-redraw', index, b));
				  return;
			  }

			  var factsDiff = diffFacts(a.facts, b.facts);

			  if (typeof factsDiff !== 'undefined')
			  {
				  patches.push(makePatch('p-facts', index, factsDiff));
			  }

			  diffChildren(a, b, patches, index);
			  return;

		  case 'keyed-node':
			  // Bail if obvious indicators have changed. Implies more serious
			  // structural changes such that it's not worth it to diff.
			  if (a.tag !== b.tag || a.namespace !== b.namespace)
			  {
				  patches.push(makePatch('p-redraw', index, b));
				  return;
			  }

			  var factsDiff = diffFacts(a.facts, b.facts);

			  if (typeof factsDiff !== 'undefined')
			  {
				  patches.push(makePatch('p-facts', index, factsDiff));
			  }

			  diffKeyedChildren(a, b, patches, index);
			  return;

		  case 'custom':
			  if (a.impl !== b.impl)
			  {
				  patches.push(makePatch('p-redraw', index, b));
				  return;
			  }

			  var factsDiff = diffFacts(a.facts, b.facts);
			  if (typeof factsDiff !== 'undefined')
			  {
				  patches.push(makePatch('p-facts', index, factsDiff));
			  }

			  var patch = b.impl.diff(a,b);
			  if (patch)
			  {
				  patches.push(makePatch('p-custom', index, patch));
				  return;
			  }

			  return;
	  }
  }


  // assumes the incoming arrays are the same length
  function pairwiseRefEqual(as, bs)
  {
	  for (var i = 0; i < as.length; i++)
	  {
		  if (as[i] !== bs[i])
		  {
			  return false;
		  }
	  }

	  return true;
  }


  // TODO Instead of creating a new diff object, it's possible to just test if
  // there *is* a diff. During the actual patch, do the diff again and make the
  // modifications directly. This way, there's no new allocations. Worth it?
  function diffFacts(a, b, category)
  {
	  var diff;

	  // look for changes and removals
	  for (var aKey in a)
	  {
		  if (aKey === STYLE_KEY || aKey === EVENT_KEY || aKey === ATTR_KEY || aKey === ATTR_NS_KEY)
		  {
			  var subDiff = diffFacts(a[aKey], b[aKey] || {}, aKey);
			  if (subDiff)
			  {
				  diff = diff || {};
				  diff[aKey] = subDiff;
			  }
			  continue;
		  }

		  // remove if not in the new facts
		  if (!(aKey in b))
		  {
			  diff = diff || {};
			  diff[aKey] =
				  (typeof category === 'undefined')
					  ? (typeof a[aKey] === 'string' ? '' : null)
					  :
				  (category === STYLE_KEY)
					  ? ''
					  :
				  (category === EVENT_KEY || category === ATTR_KEY)
					  ? undefined
					  :
				  { namespace: a[aKey].namespace, value: undefined };

			  continue;
		  }

		  var aValue = a[aKey];
		  var bValue = b[aKey];

		  // reference equal, so don't worry about it
		  if (aValue === bValue && aKey !== 'value'
			  || category === EVENT_KEY && equalEvents(aValue, bValue))
		  {
			  continue;
		  }

		  diff = diff || {};
		  diff[aKey] = bValue;
	  }

	  // add new stuff
	  for (var bKey in b)
	  {
		  if (!(bKey in a))
		  {
			  diff = diff || {};
			  diff[bKey] = b[bKey];
		  }
	  }

	  return diff;
  }


  function diffChildren(aParent, bParent, patches, rootIndex)
  {
	  var aChildren = aParent.children;
	  var bChildren = bParent.children;

	  var aLen = aChildren.length;
	  var bLen = bChildren.length;

	  // FIGURE OUT IF THERE ARE INSERTS OR REMOVALS

	  if (aLen > bLen)
	  {
		  patches.push(makePatch('p-remove-last', rootIndex, aLen - bLen));
	  }
	  else if (aLen < bLen)
	  {
		  patches.push(makePatch('p-append', rootIndex, bChildren.slice(aLen)));
	  }

	  // PAIRWISE DIFF EVERYTHING ELSE

	  var index = rootIndex;
	  var minLen = aLen < bLen ? aLen : bLen;
	  for (var i = 0; i < minLen; i++)
	  {
		  index++;
		  var aChild = aChildren[i];
		  diffHelp(aChild, bChildren[i], patches, index);
		  index += aChild.descendantsCount || 0;
	  }
  }



  ////////////  KEYED DIFF  ////////////


  function diffKeyedChildren(aParent, bParent, patches, rootIndex)
  {
	  var localPatches = [];

	  var changes = {}; // Dict String Entry
	  var inserts = []; // Array { index : Int, entry : Entry }
	  // type Entry = { tag : String, vnode : VNode, index : Int, data : _ }

	  var aChildren = aParent.children;
	  var bChildren = bParent.children;
	  var aLen = aChildren.length;
	  var bLen = bChildren.length;
	  var aIndex = 0;
	  var bIndex = 0;

	  var index = rootIndex;

	  while (aIndex < aLen && bIndex < bLen)
	  {
		  var a = aChildren[aIndex];
		  var b = bChildren[bIndex];

		  var aKey = a.value0;
		  var bKey = b.value0;
		  var aNode = a.value1;
		  var bNode = b.value1;

		  // check if keys match

		  if (aKey === bKey)
		  {
			  index++;
			  diffHelp(aNode, bNode, localPatches, index);
			  index += aNode.descendantsCount || 0;

			  aIndex++;
			  bIndex++;
			  continue;
		  }

		  // look ahead 1 to detect insertions and removals.

		  var aLookAhead = aIndex + 1 < aLen;
		  var bLookAhead = bIndex + 1 < bLen;

		  if (aLookAhead)
		  {
			  var aNext = aChildren[aIndex + 1];
			  var aNextKey = aNext.value0;
			  var aNextNode = aNext.value1;
			  var oldMatch = bKey === aNextKey;
		  }

		  if (bLookAhead)
		  {
			  var bNext = bChildren[bIndex + 1];
			  var bNextKey = bNext.value0;
			  var bNextNode = bNext.value1;
			  var newMatch = aKey === bNextKey;
		  }


		  // swap a and b
		  if (aLookAhead && bLookAhead && newMatch && oldMatch)
		  {
			  index++;
			  diffHelp(aNode, bNextNode, localPatches, index);
			  insertNode(changes, localPatches, aKey, bNode, bIndex, inserts);
			  index += aNode.descendantsCount || 0;

			  index++;
			  removeNode(changes, localPatches, aKey, aNextNode, index);
			  index += aNextNode.descendantsCount || 0;

			  aIndex += 2;
			  bIndex += 2;
			  continue;
		  }

		  // insert b
		  if (bLookAhead && newMatch)
		  {
			  index++;
			  insertNode(changes, localPatches, bKey, bNode, bIndex, inserts);
			  diffHelp(aNode, bNextNode, localPatches, index);
			  index += aNode.descendantsCount || 0;

			  aIndex += 1;
			  bIndex += 2;
			  continue;
		  }

		  // remove a
		  if (aLookAhead && oldMatch)
		  {
			  index++;
			  removeNode(changes, localPatches, aKey, aNode, index);
			  index += aNode.descendantsCount || 0;

			  index++;
			  diffHelp(aNextNode, bNode, localPatches, index);
			  index += aNextNode.descendantsCount || 0;

			  aIndex += 2;
			  bIndex += 1;
			  continue;
		  }

		  // remove a, insert b
		  if (aLookAhead && bLookAhead && aNextKey === bNextKey)
		  {
			  index++;
			  removeNode(changes, localPatches, aKey, aNode, index);
			  insertNode(changes, localPatches, bKey, bNode, bIndex, inserts);
			  index += aNode.descendantsCount || 0;

			  index++;
			  diffHelp(aNextNode, bNextNode, localPatches, index);
			  index += aNextNode.descendantsCount || 0;

			  aIndex += 2;
			  bIndex += 2;
			  continue;
		  }

		  break;
	  }

	  // eat up any remaining nodes with removeNode and insertNode

	  while (aIndex < aLen)
	  {
		  index++;
		  var a = aChildren[aIndex];
		  var aNode = a.value1;
		  removeNode(changes, localPatches, a.value0, aNode, index);
		  index += aNode.descendantsCount || 0;
		  aIndex++;
	  }

	  var endInserts;
	  while (bIndex < bLen)
	  {
		  endInserts = endInserts || [];
		  var b = bChildren[bIndex];
		  insertNode(changes, localPatches, b.value0, b.value1, undefined, endInserts);
		  bIndex++;
	  }

	  if (localPatches.length > 0 || inserts.length > 0 || typeof endInserts !== 'undefined')
	  {
		  patches.push(makePatch('p-reorder', rootIndex, {
			  patches: localPatches,
			  inserts: inserts,
			  endInserts: endInserts
		  }));
	  }
  }



  ////////////  CHANGES FROM KEYED DIFF  ////////////


  var POSTFIX = '_elmW6BL';


  function insertNode(changes, localPatches, key, vnode, bIndex, inserts)
  {
	  var entry = changes[key];

	  // never seen this key before
	  if (typeof entry === 'undefined')
	  {
		  entry = {
			  tag: 'insert',
			  vnode: vnode,
			  index: bIndex,
			  data: undefined
		  };

		  inserts.push({ index: bIndex, entry: entry });
		  changes[key] = entry;

		  return;
	  }

	  // this key was removed earlier, a match!
	  if (entry.tag === 'remove')
	  {
		  inserts.push({ index: bIndex, entry: entry });

		  entry.tag = 'move';
		  var subPatches = [];
		  diffHelp(entry.vnode, vnode, subPatches, entry.index);
		  entry.index = bIndex;
		  entry.data.data = {
			  patches: subPatches,
			  entry: entry
		  };

		  return;
	  }

	  // this key has already been inserted or moved, a duplicate!
	  insertNode(changes, localPatches, key + POSTFIX, vnode, bIndex, inserts);
  }


  function removeNode(changes, localPatches, key, vnode, index)
  {
	  var entry = changes[key];

	  // never seen this key before
	  if (typeof entry === 'undefined')
	  {
		  var patch = makePatch('p-remove', index, undefined);
		  localPatches.push(patch);

		  changes[key] = {
			  tag: 'remove',
			  vnode: vnode,
			  index: index,
			  data: patch
		  };

		  return;
	  }

	  // this key was inserted earlier, a match!
	  if (entry.tag === 'insert')
	  {
		  entry.tag = 'move';
		  var subPatches = [];
		  diffHelp(vnode, entry.vnode, subPatches, index);

		  var patch = makePatch('p-remove', index, {
			  patches: subPatches,
			  entry: entry
		  });
		  localPatches.push(patch);

		  return;
	  }

	  // this key has already been removed or moved, a duplicate!
	  removeNode(changes, localPatches, key + POSTFIX, vnode, index);
  }



  ////////////  ADD DOM NODES  ////////////
  //
  // Each DOM node has an "index" assigned in order of traversal. It is important
  // to minimize our crawl over the actual DOM, so these indexes (along with the
  // descendantsCount of virtual nodes) let us skip touching entire subtrees of
  // the DOM if we know there are no patches there.


  function addDomNodes(domNode, vNode, patches, eventNode)
  {
	  addDomNodesHelp(domNode, vNode, patches, 0, 0, vNode.descendantsCount, eventNode);
  }


  // assumes `patches` is non-empty and indexes increase monotonically.
  function addDomNodesHelp(domNode, vNode, patches, i, low, high, eventNode)
  {
	  var patch = patches[i];
	  var index = patch.index;

	  while (index === low)
	  {
		  var patchType = patch.type;

		  if (patchType === 'p-thunk')
		  {
			  addDomNodes(domNode, vNode.node, patch.data, eventNode);
		  }
		  else if (patchType === 'p-reorder')
		  {
			  patch.domNode = domNode;
			  patch.eventNode = eventNode;

			  var subPatches = patch.data.patches;
			  if (subPatches.length > 0)
			  {
				  addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
			  }
		  }
		  else if (patchType === 'p-remove')
		  {
			  patch.domNode = domNode;
			  patch.eventNode = eventNode;

			  var data = patch.data;
			  if (typeof data !== 'undefined')
			  {
				  data.entry.data = domNode;
				  var subPatches = data.patches;
				  if (subPatches.length > 0)
				  {
					  addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
				  }
			  }
		  }
		  else
		  {
			  patch.domNode = domNode;
			  patch.eventNode = eventNode;
		  }

		  i++;

		  if (!(patch = patches[i]) || (index = patch.index) > high)
		  {
			  return i;
		  }
	  }

	  switch (vNode.type)
	  {
		  case 'tagger':
			  var subNode = vNode.node;

			  while (subNode.type === "tagger")
			  {
				  subNode = subNode.node;
			  }

			  return addDomNodesHelp(domNode, subNode, patches, i, low + 1, high, domNode.elm_event_node_ref);

		  case 'node':
			  var vChildren = vNode.children;
			  var childNodes = domNode.childNodes;
			  for (var j = 0; j < vChildren.length; j++)
			  {
				  low++;
				  var vChild = vChildren[j];
				  var nextLow = low + (vChild.descendantsCount || 0);
				  if (low <= index && index <= nextLow)
				  {
					  i = addDomNodesHelp(childNodes[j], vChild, patches, i, low, nextLow, eventNode);
					  if (!(patch = patches[i]) || (index = patch.index) > high)
					  {
						  return i;
					  }
				  }
				  low = nextLow;
			  }
			  return i;

		  case 'keyed-node':
			  var vChildren = vNode.children;
			  var childNodes = domNode.childNodes;
			  for (var j = 0; j < vChildren.length; j++)
			  {
				  low++;
				  var vChild = vChildren[j].value1;
				  var nextLow = low + (vChild.descendantsCount || 0);
				  if (low <= index && index <= nextLow)
				  {
					  i = addDomNodesHelp(childNodes[j], vChild, patches, i, low, nextLow, eventNode);
					  if (!(patch = patches[i]) || (index = patch.index) > high)
					  {
						  return i;
					  }
				  }
				  low = nextLow;
			  }
			  return i;

		  case 'text':
		  case 'thunk':
			  throw new Error('should never traverse `text` or `thunk` nodes like this');
	  }
  }



  ////////////  APPLY PATCHES  ////////////


  function applyPatches(rootDomNode, oldVirtualNode, patches, eventNode)
  {
	  if (patches.length === 0)
	  {
		  return rootDomNode;
	  }

	  addDomNodes(rootDomNode, oldVirtualNode, patches, eventNode);
	  return applyPatchesHelp(rootDomNode, patches);
  }

  function applyPatchesHelp(rootDomNode, patches)
  {
	  for (var i = 0; i < patches.length; i++)
	  {
		  var patch = patches[i];
		  var localDomNode = patch.domNode
		  var newNode = applyPatch(localDomNode, patch);
		  if (localDomNode === rootDomNode)
		  {
			  rootDomNode = newNode;
		  }
	  }
	  return rootDomNode;
  }

  function applyPatch(domNode, patch)
  {
	  switch (patch.type)
	  {
		  case 'p-redraw':
			  return applyPatchRedraw(domNode, patch.data, patch.eventNode);

		  case 'p-facts':
			  applyFacts(domNode, patch.eventNode, patch.data);
			  return domNode;

		  case 'p-text':
			  domNode.replaceData(0, domNode.length, patch.data);
			  return domNode;

		  case 'p-thunk':
			  return applyPatchesHelp(domNode, patch.data);

		  case 'p-tagger':
			  if (typeof domNode.elm_event_node_ref !== 'undefined')
			  {
				  domNode.elm_event_node_ref.tagger = patch.data;
			  }
			  else
			  {
				  domNode.elm_event_node_ref = { tagger: patch.data, parent: patch.eventNode };
			  }
			  return domNode;

		  case 'p-remove-last':
			  var i = patch.data;
			  while (i--)
			  {
				  domNode.removeChild(domNode.lastChild);
			  }
			  return domNode;

		  case 'p-append':
			  var newNodes = patch.data;
			  for (var i = 0; i < newNodes.length; i++)
			  {
				  domNode.appendChild(render(newNodes[i], patch.eventNode));
			  }
			  return domNode;

		  case 'p-remove':
			  var data = patch.data;
			  if (typeof data === 'undefined')
			  {
				  domNode.parentNode.removeChild(domNode);
				  return domNode;
			  }
			  var entry = data.entry;
			  if (typeof entry.index !== 'undefined')
			  {
				  domNode.parentNode.removeChild(domNode);
			  }
			  entry.data = applyPatchesHelp(domNode, data.patches);
			  return domNode;

		  case 'p-reorder':
			  return applyPatchReorder(domNode, patch);

		  case 'p-custom':
			  var impl = patch.data;
			  return impl.applyPatch(domNode, impl.data);

		  default:
			  throw new Error('Ran into an unknown patch!');
	  }
  }


  function applyPatchRedraw(domNode, vNode, eventNode)
  {
	  var parentNode = domNode.parentNode;
	  var newNode = render(vNode, eventNode);

	  if (typeof newNode.elm_event_node_ref === 'undefined')
	  {
		  newNode.elm_event_node_ref = domNode.elm_event_node_ref;
	  }

	  if (parentNode && newNode !== domNode)
	  {
		  parentNode.replaceChild(newNode, domNode);
	  }
	  return newNode;
  }


  function applyPatchReorder(domNode, patch)
  {
	  var data = patch.data;

	  // remove end inserts
	  var frag = applyPatchReorderEndInsertsHelp(data.endInserts, patch);

	  // removals
	  domNode = applyPatchesHelp(domNode, data.patches);

	  // inserts
	  var inserts = data.inserts;
	  for (var i = 0; i < inserts.length; i++)
	  {
		  var insert = inserts[i];
		  var entry = insert.entry;
		  var node = entry.tag === 'move'
			  ? entry.data
			  : render(entry.vnode, patch.eventNode);
		  domNode.insertBefore(node, domNode.childNodes[insert.index]);
	  }

	  // add end inserts
	  if (typeof frag !== 'undefined')
	  {
		  domNode.appendChild(frag);
	  }

	  return domNode;
  }


  function applyPatchReorderEndInsertsHelp(endInserts, patch)
  {
	  if (typeof endInserts === 'undefined')
	  {
		  return;
	  }

	  var frag = localDoc.createDocumentFragment();
	  for (var i = 0; i < endInserts.length; i++)
	  {
		  var insert = endInserts[i];
		  var entry = insert.entry;
		  frag.appendChild(entry.tag === 'move'
			  ? entry.data
			  : render(entry.vnode, patch.eventNode)
		  );
	  }
	  return frag;
  }


  // BLOCK EVENTS

  function wrapViewIn(appEventNode, overlayNode, viewIn)
  {
	  var ignorer = makeIgnorer(overlayNode);
	  var blocking = 'Normal';
	  var overflow;

	  var normalTagger = appEventNode.tagger;
	  var blockTagger = function() {};

	  return function(model)
	  {
		  var tuple = viewIn(model);
		  var newBlocking = tuple.value0.ctor;
		  appEventNode.tagger = newBlocking === 'Normal' ? normalTagger : blockTagger;
		  if (blocking !== newBlocking)
		  {
			  traverse('removeEventListener', ignorer, blocking);
			  traverse('addEventListener', ignorer, newBlocking);

			  if (blocking === 'Normal')
			  {
				  overflow = document.body.style.overflow;
				  document.body.style.overflow = 'hidden';
			  }

			  if (newBlocking === 'Normal')
			  {
				  document.body.style.overflow = overflow;
			  }

			  blocking = newBlocking;
		  }
		  return tuple.value1;
	  }
  }

  function traverse(verbEventListener, ignorer, blocking)
  {
	  switch(blocking)
	  {
		  case 'Normal':
			  return;

		  case 'Pause':
			  return traverseHelp(verbEventListener, ignorer, mostEvents);

		  case 'Message':
			  return traverseHelp(verbEventListener, ignorer, allEvents);
	  }
  }

  function traverseHelp(verbEventListener, handler, eventNames)
  {
	  for (var i = 0; i < eventNames.length; i++)
	  {
		  document.body[verbEventListener](eventNames[i], handler, true);
	  }
  }

  function makeIgnorer(overlayNode)
  {
	  return function(event)
	  {
		  if (event.type === 'keydown' && event.metaKey && event.which === 82)
		  {
			  return;
		  }

		  var isScroll = event.type === 'scroll' || event.type === 'wheel';

		  var node = event.target;
		  while (node !== null)
		  {
			  if (node.className === 'elm-overlay-message-details' && isScroll)
			  {
				  return;
			  }

			  if (node === overlayNode && !isScroll)
			  {
				  return;
			  }
			  node = node.parentNode;
		  }

		  event.stopPropagation();
		  event.preventDefault();
	  }
  }

  var mostEvents = [
	  'click', 'dblclick', 'mousemove',
	  'mouseup', 'mousedown', 'mouseenter', 'mouseleave',
	  'touchstart', 'touchend', 'touchcancel', 'touchmove',
	  'pointerdown', 'pointerup', 'pointerover', 'pointerout',
	  'pointerenter', 'pointerleave', 'pointermove', 'pointercancel',
	  'dragstart', 'drag', 'dragend', 'dragenter', 'dragover', 'dragleave', 'drop',
	  'keyup', 'keydown', 'keypress',
	  'input', 'change',
	  'focus', 'blur'
  ];

  var allEvents = mostEvents.concat('wheel', 'scroll');

  function topEventNode(eventNode) {
	  while(eventNode.parent) {
		  eventNode = eventNode.parent;
	  }
	  return eventNode;
  }

  return {
		  nodeHelp: nodeHelp,
		  text: text,
		  map: map,
		  property: property,
		  style: style,
		  attribute: attribute,
		  attributeNS: attributeNS,
		  on: on,
    		filterOn: filterOn,
		  lazy: lazy,
		  lazy2: lazy2,
		  lazy3: lazy3,
		  keyedNode: keyedNode,

		  render: render,
		  diff: diff,
		  applyPatches: applyPatches,
  };
  // end of closed over document
  }


  //  PURESCRIPT SPECIFIC


  // make an event node for render/applyPatches
  // emitter is the function to emit events - will feed the bonsai event loop.
  // cmdMap is purescript's map function - Cmds are functors
  // so they can be mapped using purescripts implementation
  // instead of coding it in javascript
  function mkEventNode(cmdMap, emitter) {
	  return { parent: undefined, emitter: emitter, cmdMap: cmdMap};
  }

  exports.renderFn4 = function (localDoc, cmdMap, emitter, vNode) {
	  return closeOverDocument(localDoc).render(vNode, mkEventNode(cmdMap, emitter));
  };

  exports.applyPatchesFn6 = function (localDoc, cmdMap, emitter, domNode, oldVirtualNode, patches) {
	  return closeOverDocument(localDoc)
		  .applyPatches(domNode, oldVirtualNode, patches, mkEventNode(cmdMap, emitter));
  };

  var unclosed = closeOverDocument(undefined);

  exports.nodeFn3 = unclosed.nodeHelp;
  exports.text = unclosed.text;
  exports.mapFn2 = unclosed.map;
  exports.propertyFn2 = unclosed.property;
  exports.style = unclosed.style;
  exports.attributeFn2 = unclosed.attribute;  
  exports.style = unclosed.style;
  exports.onFn3 = unclosed.on;            
  exports.lazyFn2 = unclosed.lazy;  
  exports.keyedNodeFn3 = unclosed.keyedNode;
  exports.diffFn2 = unclosed.diff;
})(PS["Bonsai.VirtualDom"] = PS["Bonsai.VirtualDom"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Bonsai.VirtualDom"];
  var Bonsai_DOM = PS["Bonsai.DOM"];
  var Bonsai_Types = PS["Bonsai.Types"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Tuple = PS["Data.Tuple"];
  var Effect = PS["Effect"];
  var Effect_Exception = PS["Effect.Exception"];
  var Foreign = PS["Foreign"];
  var Prelude = PS["Prelude"];
  var property = function (key) {
      return function (value) {
          return $foreign.propertyFn2(key, Foreign.unsafeToForeign(value));
      };
  };
  var onWithOptions = function (opts) {
      return function (str) {
          return Data_Function_Uncurried.runFn3($foreign.onFn3)(str)(opts);
      };
  };
  var node = Data_Function_Uncurried.runFn3($foreign.nodeFn3);  
  var lazy = Data_Function_Uncurried.runFn2($foreign.lazyFn2);
  var keyedNode = Data_Function_Uncurried.runFn3($foreign.keyedNodeFn3);
  var functorVNode = new Data_Functor.Functor(Data_Function_Uncurried.runFn2($foreign.mapFn2));
  var diff = Data_Function_Uncurried.runFn2($foreign.diffFn2);
  var defaultOptions = {
      stopPropagation: false,
      preventDefault: false
  };
  var on = function (eventName) {
      return function (decoder) {
          return $foreign.onFn3(eventName, defaultOptions, decoder);
      };
  };
  var cmdMap = function (f) {
      return function (a) {
          return Data_Functor.map(Data_Either.functorEither)(Data_Functor.map(Bonsai_Types.cmdFunctor)(f))(a);
      };
  };
  var render = function (doc) {
      return Data_Function_Uncurried.runFn4($foreign.renderFn4)(doc)(cmdMap);
  };                                                                      
  var attribute = Data_Function_Uncurried.runFn2($foreign.attributeFn2);
  var applyPatches = function (doc) {
      return function (emitter) {
          return function (domNode) {
              return function (oldVirtualNode) {
                  return function (patches) {
                      return Control_Applicative.pure(Effect.applicativeEffect)($foreign.applyPatchesFn6(doc, cmdMap, emitter, domNode, oldVirtualNode, patches));
                  };
              };
          };
      };
  };
  exports["node"] = node;
  exports["property"] = property;
  exports["attribute"] = attribute;
  exports["on"] = on;
  exports["onWithOptions"] = onWithOptions;
  exports["defaultOptions"] = defaultOptions;
  exports["lazy"] = lazy;
  exports["keyedNode"] = keyedNode;
  exports["render"] = render;
  exports["diff"] = diff;
  exports["applyPatches"] = applyPatches;
  exports["functorVNode"] = functorVNode;
  exports["text"] = $foreign.text;
  exports["style"] = $foreign.style;
})(PS["Bonsai.VirtualDom"] = PS["Bonsai.VirtualDom"] || {});
(function(exports) {
    "use strict";                                                                                

  exports.fromFoldableImpl = (function () {
    function Cons(head, tail) {
      this.head = head;
      this.tail = tail;
    }
    var emptyList = {};

    function curryCons(head) {
      return function (tail) {
        return new Cons(head, tail);
      };
    }

    function listToArray(list) {
      var result = [];
      var count = 0;
      var xs = list;
      while (xs !== emptyList) {
        result[count++] = xs.head;
        xs = xs.tail;
      }
      return result;
    }

    return function (foldr) {
      return function (xs) {
        return listToArray(foldr(curryCons)(emptyList)(xs));
      };
    };
  })();

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  exports.snoc = function (l) {
    return function (e) {
      var l1 = l.slice();
      l1.push(e);
      return l1;
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Array"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Monad_ST_Internal = PS["Control.Monad.ST.Internal"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array_NonEmpty_Internal = PS["Data.Array.NonEmpty.Internal"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Array_ST_Iterator = PS["Data.Array.ST.Iterator"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var $$null = function (xs) {
      return $foreign.length(xs) === 0;
  };
  var fromFoldable = function (dictFoldable) {
      return $foreign.fromFoldableImpl(Data_Foldable.foldr(dictFoldable));
  };
  exports["fromFoldable"] = fromFoldable;
  exports["null"] = $$null;
  exports["length"] = $foreign.length;
  exports["snoc"] = $foreign.snoc;
  exports["slice"] = $foreign.slice;
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Array = PS["Data.Array"];
  var Data_Ring = PS["Data.Ring"];
  var Prelude = PS["Prelude"];                 
  var tail = function (dictPartial) {
      return function (xs) {
          return Data_Array.slice(1)(Data_Array.length(xs))(xs);
      };
  };
  var head = function (dictPartial) {
      return function (xs) {
          return xs[0];
      };
  };
  exports["head"] = head;
  exports["tail"] = tail;
})(PS["Data.Array.Partial"] = PS["Data.Array.Partial"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Bonsai_DOM = PS["Bonsai.DOM"];
  var Bonsai_Debug = PS["Bonsai.Debug"];
  var Bonsai_Types = PS["Bonsai.Types"];
  var Bonsai_VirtualDom = PS["Bonsai.VirtualDom"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Data_Array = PS["Data.Array"];
  var Data_Array_Partial = PS["Data.Array.Partial"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Effect = PS["Effect"];
  var Effect_Aff = PS["Effect.Aff"];
  var Effect_Aff_AVar = PS["Effect.Aff.AVar"];
  var Effect_Class = PS["Effect.Class"];
  var Effect_Exception = PS["Effect.Exception"];
  var Effect_Ref = PS["Effect.Ref"];
  var Foreign = PS["Foreign"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var queueMessages = function (env) {
      return function (msgs) {
          var $37 = Data_Array["null"](msgs);
          if ($37) {
              return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
          };
          return function __do() {
              Bonsai_Debug.debugJsonObj(env.dbg.events)("queue messages:")(msgs)();
              var v = Effect_Ref.modify(function (pending) {
                  return Data_Semigroup.append(Data_Semigroup.semigroupArray)(pending)(msgs);
              })(env.pending)();
              return Data_Unit.unit;
          };
      };
  };
  var noDebug = {
      timing: false,
      events: false,
      patch: false
  };
  var emitError = function (err) {
      return Bonsai_Debug.logJsonObj("cmd error: ")(err);
  };
  var delayUntilClean = function (env) {
      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(env.state)))(function (v) {
          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.read(env.pending)))(function (v1) {
              return Control_Applicative.when(Effect_Aff.applicativeAff)(v.dirty || !Data_Array["null"](v1))(Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff_AVar.empty)(function (v2) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Ref.modify(function (delayed) {
                      return Data_Array.snoc(delayed)(v2);
                  })(env.delayed)))(function (v3) {
                      return Effect_Aff_AVar.take(v2);
                  });
              }));
          });
      });
  };
  var continueDelayed = function (delayed) {
      return Data_Foldable.for_(Effect_Aff.applicativeAff)(Data_Foldable.foldableArray)(delayed)(function (avar) {
          return Effect_Aff_AVar.put(Data_Unit.unit)(avar);
      });
  };
  var updateModel = function (env) {
      var applyMessages = function (v) {
          return function (v1) {
              if (v1.length === 0) {
                  return Control_Applicative.pure(Effect.applicativeEffect)(new Data_Tuple.Tuple(v.value0, v.value1));
              };
              return (function (dictPartial) {
                  var msg = Data_Array_Partial.head(dictPartial)(v1);
                  var v2 = env.updater(msg)(v.value1);
                  return applyMessages(new Data_Tuple.Tuple(Data_Array.snoc(v.value0)(v2.value0), v2.value1))(Data_Array_Partial.tail(dictPartial)(v1));
              })();
          };
      };
      return function __do() {
          var v = Effect_Ref["modify'"](function (ms) {
              return {
                  state: [  ],
                  value: ms
              };
          })(env.pending)();
          var $51 = Data_Array["null"](v);
          if ($51) {
              return Data_Unit.unit;
          };
          var v1 = Effect_Class.liftEffect(Effect_Class.monadEffectEffect)(Effect_Ref.read(env.state))();
          var v2 = applyMessages(new Data_Tuple.Tuple([  ], v1.model))(v)();
          Effect_Ref.write({
              model: v2.value1,
              dirty: true,
              dnode: v1.dnode,
              vnode: v1.vnode
          })(env.state)();
          Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(v2.value0)(queueCommand(env))();
          return updateModel(env)();
      };
  };
  var updateAndRedraw = function (env) {
      return function __do() {
          updateModel(env)();
          var v = Control_Monad_Except.runExcept(Bonsai_DOM.requestAnimationFrame(redrawModel(env))(env.window));
          return Data_Unit.unit;
      };
  };
  var taskContext = function (env) {
      var emitTheTypeIsALie = function (msg) {
          return emitSuccess(env)([ msg ]);
      };
      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff_AVar.empty)(function (v) {
          return Control_Applicative.pure(Effect_Aff.applicativeAff)({
              emitter: emitTheTypeIsALie,
              delay: delayUntilClean(env),
              fiber: v,
              document: env.document
          });
      });
  };
  var redrawModel = function (env) {
      return function __do() {
          var v = Effect_Class.liftEffect(Effect_Class.monadEffectEffect)(Effect_Ref.read(env.state))();
          if (v.dirty) {
              var v1 = Bonsai_Debug.startTiming();
              var vnode2 = env.renderer(v.model);
              Bonsai_Debug.debugTiming(env.dbg.timing)("render")(v1)();
              var v2 = Bonsai_Debug.startTiming();
              var patch = Bonsai_VirtualDom.diff(v.vnode)(vnode2);
              var v3 = Effect_Class.liftEffect(Effect_Class.monadEffectEffect)(Bonsai_VirtualDom.applyPatches(env.document)(emitter(env))(v.dnode)(v.vnode)(patch))();
              Bonsai_Debug.debugTiming(env.dbg.timing)("diff/applyPatches")(v2)();
              Bonsai_Debug.debugJsonObj(env.dbg.patch)("patch:")(patch)();
              Effect_Ref.write({
                  vnode: vnode2,
                  dnode: v3,
                  dirty: false,
                  model: v.model
              })(env.state)();
              var v4 = Effect_Ref["modify'"](function (d) {
                  return {
                      state: [  ],
                      value: d
                  };
              })(env.delayed)();
              Effect_Aff.launchAff_(continueDelayed(v4))();
              return Data_Unit.unit;
          };
          return Data_Unit.unit;
      };
  };
  var queueCommand = function (env) {
      return function (cmd) {
          var taskAff = function (task) {
              return Control_Bind.bind(Effect_Aff.bindAff)(taskContext(env))(function (v) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff.suspendAff(task(v)))(function (v1) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Aff_AVar.put(v1)(v.fiber))(function () {
                          return Effect_Aff.joinFiber(v1);
                      });
                  });
              });
          };
          var queueMs = function (msgs) {
              return function __do() {
                  queueMessages(env)(msgs)();
                  return !Data_Array["null"](msgs);
              };
          };
          var emitEither = function (e) {
              if (e instanceof Data_Either.Left) {
                  return emitError(e.value0);
              };
              if (e instanceof Data_Either.Right) {
                  return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Bonsai.Core line 203, column 7 - line 205, column 29: " + [ e.constructor.name ]);
          };
          if (cmd instanceof Bonsai_Types.Cmd) {
              return queueMs(cmd.value0);
          };
          if (cmd instanceof Bonsai_Types.TaskCmd) {
              return function __do() {
                  Effect_Aff.runAff_(emitEither)(taskAff(cmd.value0))();
                  return false;
              };
          };
          throw new Error("Failed pattern match at Bonsai.Core line 187, column 3 - line 192, column 17: " + [ cmd.constructor.name ]);
      };
  };
  var emitter = function (env) {
      return function (fcmd) {
          var v = Control_Monad_Except.runExcept(fcmd);
          if (v instanceof Data_Either.Left) {
              return Control_Apply.applySecond(Effect.applyEffect)(emitError(Effect_Exception.error(Bonsai_DOM.foreignErrorMsg(Data_List_Types.foldableNonEmptyList)(Data_List_Types.functorNonEmptyList)(v.value0))))(Control_Applicative.pure(Effect.applicativeEffect)(true));
          };
          if (v instanceof Data_Either.Right) {
              return function __do() {
                  var v1 = queueCommand(env)(v.value0)();
                  if (v1) {
                      return Control_Apply.applySecond(Effect.applyEffect)(updateAndRedraw(env))(Control_Applicative.pure(Effect.applicativeEffect)(env.dbg.events))();
                  };
                  return env.dbg.events;
              };
          };
          throw new Error("Failed pattern match at Bonsai.Core line 270, column 3 - line 277, column 33: " + [ v.constructor.name ]);
      };
  };
  var emitSuccess = function (env) {
      return function (msgs) {
          return function __do() {
              queueMessages(env)(msgs)();
              var $76 = Data_Array["null"](msgs);
              if ($76) {
                  return Data_Unit.unit;
              };
              return updateAndRedraw(env)();
          };
      };
  };
  var debugProgram = function (dbg) {
      return function (v) {
          return function (updater) {
              return function (renderer) {
                  return function (model) {
                      return function (win) {
                          return function __do() {
                              var v1 = Bonsai_DOM.effF(win)();
                              var v2 = Bonsai_DOM.effF(Bonsai_DOM.document(v1))();
                              var v3 = Bonsai_DOM.effF(Bonsai_DOM.elementById(v)(v2))();
                              var vnode = renderer(model);
                              var v4 = Effect_Ref["new"]({
                                  model: model,
                                  vnode: vnode,
                                  dnode: v3,
                                  dirty: false
                              })();
                              var v5 = Effect_Ref["new"]([  ])();
                              var v6 = Effect_Ref["new"]([  ])();
                              var env = {
                                  dbg: dbg,
                                  updater: updater,
                                  renderer: renderer,
                                  pending: v5,
                                  state: v4,
                                  delayed: v6,
                                  window: v1,
                                  document: v2
                              };
                              var v7 = Bonsai_Debug.startTiming();
                              var dnode = Bonsai_VirtualDom.render(env.document)(emitter(env))(vnode);
                              var v8 = Bonsai_DOM.effF(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Bonsai_DOM.clearElement(v3))(Bonsai_DOM.appendChild(dnode)))();
                              Bonsai_Debug.debugTiming(env.dbg.timing)("render/appendChild")(v7)();
                              var v9 = Effect_Ref.modify(function (state) {
                                  return {
                                      dnode: dnode,
                                      dirty: state.dirty,
                                      model: state.model,
                                      vnode: state.vnode
                                  };
                              })(v4)();
                              return env;
                          };
                      };
                  };
              };
          };
      };
  };
  exports["debugProgram"] = debugProgram;
  exports["noDebug"] = noDebug;
})(PS["Bonsai.Core"] = PS["Bonsai.Core"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Bonsai_DOM = PS["Bonsai.DOM"];
  var Bonsai_Types = PS["Bonsai.Types"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Data_Function = PS["Data.Function"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Unit = PS["Data.Unit"];
  var Effect_Aff = PS["Effect.Aff"];
  var Foreign = PS["Foreign"];
  var Prelude = PS["Prelude"];                 
  var locationHashCmd = function (hash) {
      return Bonsai_Types.unitTask(function (doc) {
          return Bonsai_DOM.affF(Bonsai_DOM.setLocationHash(hash)(doc));
      });
  };
  exports["locationHashCmd"] = locationHashCmd;
})(PS["Bonsai.Core.DOM"] = PS["Bonsai.Core.DOM"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_List = PS["Data.List"];
  var Data_List_Lazy = PS["Data.List.Lazy"];
  var Data_List_Lazy_Types = PS["Data.List.Lazy.Types"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var Leaf = (function () {
      function Leaf() {

      };
      Leaf.value = new Leaf();
      return Leaf;
  })();
  var Two = (function () {
      function Two(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Two.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Two(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Two;
  })();
  var Three = (function () {
      function Three(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      Three.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new Three(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Three;
  })();
  var TwoLeft = (function () {
      function TwoLeft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoLeft(value0, value1, value2);
              };
          };
      };
      return TwoLeft;
  })();
  var TwoRight = (function () {
      function TwoRight(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoRight(value0, value1, value2);
              };
          };
      };
      return TwoRight;
  })();
  var ThreeLeft = (function () {
      function ThreeLeft(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeLeft;
  })();
  var ThreeMiddle = (function () {
      function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeMiddle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeMiddle;
  })();
  var ThreeRight = (function () {
      function ThreeRight(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeRight(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeRight;
  })();
  var KickUp = (function () {
      function KickUp(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      KickUp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new KickUp(value0, value1, value2, value3);
                  };
              };
          };
      };
      return KickUp;
  })();
  var singleton = function (k) {
      return function (v) {
          return new Two(Leaf.value, k, v, Leaf.value);
      };
  };
  var toUnfoldable = function (dictUnfoldable) {
      return function (m) {
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof Leaf) {
                          $copy_v = v.value1;
                          return;
                      };
                      if (v.value0 instanceof Two && (v.value0.value0 instanceof Leaf && v.value0.value3 instanceof Leaf)) {
                          $tco_done = true;
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), v.value1));
                      };
                      if (v.value0 instanceof Two && v.value0.value0 instanceof Leaf) {
                          $tco_done = true;
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                      };
                      if (v.value0 instanceof Two) {
                          $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                          return;
                      };
                      if (v.value0 instanceof Three) {
                          $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, new Data_List_Types.Cons(singleton(v.value0.value4)(v.value0.value5), new Data_List_Types.Cons(v.value0.value6, v.value1)))));
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal line 559, column 18 - line 568, column 71: " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal line 558, column 3 - line 558, column 19: " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return Data_Unfoldable.unfoldr(dictUnfoldable)(go)(new Data_List_Types.Cons(m, Data_List_Types.Nil.value));
      };
  };
  var lookup = function (dictOrd) {
      return function (k) {
          var comp = Data_Ord.compare(dictOrd);
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Leaf) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Two) {
                      var v2 = comp(k)(v.value1);
                      if (v2 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      if (v2 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  if (v instanceof Three) {
                      var v3 = comp(k)(v.value1);
                      if (v3 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      var v4 = comp(k)(v.value4);
                      if (v4 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value5);
                      };
                      if (v3 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      if (v4 instanceof Data_Ordering.GT) {
                          $copy_v = v.value6;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal line 193, column 5 - line 193, column 22: " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return go;
      };
  }; 
  var fromZipper = function ($copy_dictOrd) {
      return function ($copy_v) {
          return function ($copy_tree) {
              var $tco_var_dictOrd = $copy_dictOrd;
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(dictOrd, v, tree) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return tree;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof TwoLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
                          return;
                      };
                      if (v.value0 instanceof TwoRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
                          return;
                      };
                      if (v.value0 instanceof ThreeLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeMiddle) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal line 411, column 3 - line 416, column 88: " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal line 408, column 1 - line 408, column 80: " + [ v.constructor.name, tree.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_dictOrd, $tco_var_v, $copy_tree);
              };
              return $tco_result;
          };
      };
  };
  var insert = function (dictOrd) {
      return function (k) {
          return function (v) {
              var up = function ($copy_v1) {
                  return function ($copy_v2) {
                      var $tco_var_v1 = $copy_v1;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(v1, v2) {
                          if (v1 instanceof Data_List_Types.Nil) {
                              $tco_done = true;
                              return new Two(v2.value0, v2.value1, v2.value2, v2.value3);
                          };
                          if (v1 instanceof Data_List_Types.Cons) {
                              if (v1.value0 instanceof TwoLeft) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v2.value0, v2.value1, v2.value2, v2.value3, v1.value0.value0, v1.value0.value1, v1.value0.value2));
                              };
                              if (v1.value0 instanceof TwoRight) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0, v2.value1, v2.value2, v2.value3));
                              };
                              if (v1.value0 instanceof ThreeLeft) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v2.value0, v2.value1, v2.value2, v2.value3), v1.value0.value0, v1.value0.value1, new Two(v1.value0.value2, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeMiddle) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0), v2.value1, v2.value2, new Two(v2.value3, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeRight) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v1.value0.value3), v1.value0.value4, v1.value0.value5, new Two(v2.value0, v2.value1, v2.value2, v2.value3));
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.Map.Internal line 447, column 5 - line 452, column 108: " + [ v1.value0.constructor.name, v2.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal line 444, column 3 - line 444, column 56: " + [ v1.constructor.name, v2.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_v1, $copy_v2);
                      };
                      return $tco_result;
                  };
              };
              var comp = Data_Ord.compare(dictOrd);
              var down = function ($copy_ctx) {
                  return function ($copy_v1) {
                      var $tco_var_ctx = $copy_ctx;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(ctx, v1) {
                          if (v1 instanceof Leaf) {
                              $tco_done = true;
                              return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
                          };
                          if (v1 instanceof Two) {
                              var v2 = comp(k)(v1.value1);
                              if (v2 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
                              };
                              if (v2 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                              $copy_v1 = v1.value3;
                              return;
                          };
                          if (v1 instanceof Three) {
                              var v3 = comp(k)(v1.value1);
                              if (v3 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                              };
                              var v4 = comp(k)(v1.value4);
                              if (v4 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                              };
                              if (v3 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              if (v3 instanceof Data_Ordering.GT && v4 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value3;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                              $copy_v1 = v1.value6;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal line 427, column 3 - line 427, column 55: " + [ ctx.constructor.name, v1.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_ctx, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
              return down(Data_List_Types.Nil.value);
          };
      };
  };
  var pop = function (dictOrd) {
      return function (k) {
          var up = function (ctxs) {
              return function (tree) {
                  if (ctxs instanceof Data_List_Types.Nil) {
                      return tree;
                  };
                  if (ctxs instanceof Data_List_Types.Cons) {
                      var $__unused = function (dictPartial1) {
                          return function ($dollar55) {
                              return $dollar55;
                          };
                      };
                      return $__unused()((function () {
                          if (ctxs.value0 instanceof TwoLeft && (ctxs.value0.value2 instanceof Leaf && tree instanceof Leaf)) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoRight && (ctxs.value0.value0 instanceof Leaf && tree instanceof Leaf)) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Two) {
                              return up(ctxs.value1)(new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3));
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Two) {
                              return up(ctxs.value1)(new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree));
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6)));
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && (ctxs.value0.value2 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeRight && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value3 instanceof Leaf && tree instanceof Leaf))) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value4, ctxs.value0.value5, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Two) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Two) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Two) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0, ctxs.value0.value5.value1, ctxs.value0.value5.value2, ctxs.value0.value5.value3)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Two) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0), ctxs.value0.value5.value1, ctxs.value0.value5.value2, new Two(ctxs.value0.value5.value3, ctxs.value0.value5.value4, ctxs.value0.value5.value5, ctxs.value0.value5.value6)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3), ctxs.value0.value3.value4, ctxs.value0.value3.value5, new Two(ctxs.value0.value3.value6, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal line 497, column 9 - line 514, column 136: " + [ ctxs.value0.constructor.name, tree.constructor.name ]);
                      })());
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal line 494, column 5 - line 514, column 136: " + [ ctxs.constructor.name ]);
              };
          };
          var removeMaxNode = function (ctx) {
              return function (m) {
                  var $__unused = function (dictPartial1) {
                      return function ($dollar57) {
                          return $dollar57;
                      };
                  };
                  return $__unused()((function () {
                      if (m instanceof Two && (m.value0 instanceof Leaf && m.value3 instanceof Leaf)) {
                          return up(ctx)(Leaf.value);
                      };
                      if (m instanceof Two) {
                          return removeMaxNode(new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx))(m.value3);
                      };
                      if (m instanceof Three && (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf))) {
                          return up(new Data_List_Types.Cons(new TwoRight(Leaf.value, m.value1, m.value2), ctx))(Leaf.value);
                      };
                      if (m instanceof Three) {
                          return removeMaxNode(new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx))(m.value6);
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal line 526, column 5 - line 530, column 107: " + [ m.constructor.name ]);
                  })());
              };
          };
          var maxNode = function (m) {
              var $__unused = function (dictPartial1) {
                  return function ($dollar59) {
                      return $dollar59;
                  };
              };
              return $__unused()((function () {
                  if (m instanceof Two && m.value3 instanceof Leaf) {
                      return {
                          key: m.value1,
                          value: m.value2
                      };
                  };
                  if (m instanceof Two) {
                      return maxNode(m.value3);
                  };
                  if (m instanceof Three && m.value6 instanceof Leaf) {
                      return {
                          key: m.value4,
                          value: m.value5
                      };
                  };
                  if (m instanceof Three) {
                      return maxNode(m.value6);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal line 517, column 33 - line 521, column 45: " + [ m.constructor.name ]);
              })());
          };
          var comp = Data_Ord.compare(dictOrd);
          var down = function ($copy_ctx) {
              return function ($copy_m) {
                  var $tco_var_ctx = $copy_ctx;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(ctx, m) {
                      if (m instanceof Leaf) {
                          $tco_done = true;
                          return Data_Maybe.Nothing.value;
                      };
                      if (m instanceof Two) {
                          var v = comp(k)(m.value1);
                          if (m.value3 instanceof Leaf && v instanceof Data_Ordering.EQ) {
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, up(ctx)(Leaf.value)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new TwoLeft(max.key, max.value, m.value3), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(m.value1, m.value2, m.value3), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                          $copy_m = m.value3;
                          return;
                      };
                      if (m instanceof Three) {
                          var leaves = (function () {
                              if (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf)) {
                                  return true;
                              };
                              return false;
                          })();
                          var v = comp(k)(m.value4);
                          var v3 = comp(k)(m.value1);
                          if (leaves && v3 instanceof Data_Ordering.EQ) {
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value4, m.value5, Leaf.value))));
                          };
                          if (leaves && v instanceof Data_Ordering.EQ) {
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value1, m.value2, Leaf.value))));
                          };
                          if (v3 instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new ThreeLeft(max.key, max.value, m.value3, m.value4, m.value5, m.value6), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value3);
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, removeMaxNode(new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, max.key, max.value, m.value6), ctx))(m.value3)));
                          };
                          if (v3 instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(m.value1, m.value2, m.value3, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          if (v3 instanceof Data_Ordering.GT && v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value3;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                          $copy_m = m.value6;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal line 467, column 34 - line 490, column 80: " + [ m.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                  };
                  return $tco_result;
              };
          };
          return down(Data_List_Types.Nil.value);
      };
  };
  var empty = Leaf.value;
  var $$delete = function (dictOrd) {
      return function (k) {
          return function (m) {
              return Data_Maybe.maybe(m)(Data_Tuple.snd)(pop(dictOrd)(k)(m));
          };
      };
  }; 
  var alter = function (dictOrd) {
      return function (f) {
          return function (k) {
              return function (m) {
                  var v = f(lookup(dictOrd)(k)(m));
                  if (v instanceof Data_Maybe.Nothing) {
                      return $$delete(dictOrd)(k)(m);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return insert(dictOrd)(k)(v.value0)(m);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal line 535, column 15 - line 537, column 25: " + [ v.constructor.name ]);
              };
          };
      };
  };
  exports["empty"] = empty;
  exports["singleton"] = singleton;
  exports["insert"] = insert;
  exports["lookup"] = lookup;
  exports["toUnfoldable"] = toUnfoldable;
  exports["pop"] = pop;
  exports["alter"] = alter;
})(PS["Data.Map.Internal"] = PS["Data.Map.Internal"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Bonsai_DOM = PS["Bonsai.DOM"];
  var Bonsai_Types = PS["Bonsai.Types"];
  var Bonsai_VirtualDom = PS["Bonsai.VirtualDom"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_List = PS["Data.List"];
  var Data_List_NonEmpty = PS["Data.List.NonEmpty"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Map = PS["Data.Map"];
  var Data_Map_Internal = PS["Data.Map.Internal"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Foreign = PS["Foreign"];
  var Foreign_Index = PS["Foreign.Index"];
  var Prelude = PS["Prelude"];                 
  var targetValue = function (event) {
      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.ix(Foreign_Index.indexableExceptT)(Foreign_Index.indexString)(Foreign_Index.ix(Foreign_Index.indexableForeign)(Foreign_Index.indexString)(event)("target"))("value"))(Foreign.readString);
  };
  var targetValueHandler = function (fn) {
      return function (ev) {
          return Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(function ($40) {
              return Control_Applicative.pure(Bonsai_Types.cmdApplicative)(fn($40));
          })(targetValue(ev));
      };
  };
  var targetChecked = function (event) {
      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.ix(Foreign_Index.indexableExceptT)(Foreign_Index.indexString)(Foreign_Index.ix(Foreign_Index.indexableForeign)(Foreign_Index.indexString)(event)("target"))("checked"))(Foreign.readBoolean);
  };
  var targetCheckedHandler = function (fn) {
      return function (ev) {
          return Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(function ($41) {
              return Control_Applicative.pure(Bonsai_Types.cmdApplicative)(fn($41));
          })(targetChecked(ev));
      };
  };
  var constHandler = function (msg) {
      return Data_Function["const"](Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Control_Applicative.pure(Bonsai_Types.cmdApplicative)(msg)));
  };
  exports["constHandler"] = constHandler;
  exports["targetChecked"] = targetChecked;
  exports["targetCheckedHandler"] = targetCheckedHandler;
  exports["targetValue"] = targetValue;
  exports["targetValueHandler"] = targetValueHandler;
})(PS["Bonsai.EventHandlers"] = PS["Bonsai.EventHandlers"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Bonsai = PS["Bonsai"];
  var Bonsai_Types = PS["Bonsai.Types"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Identity = PS["Data.Identity"];
  var Data_List = PS["Data.List"];
  var Data_List_NonEmpty = PS["Data.List.NonEmpty"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Map = PS["Data.Map"];
  var Data_Map_Internal = PS["Data.Map.Internal"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Foreign = PS["Foreign"];
  var Foreign_Index = PS["Foreign.Index"];
  var Prelude = PS["Prelude"];                 
  var FormSingle = (function () {
      function FormSingle(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      FormSingle.create = function (value0) {
          return function (value1) {
              return new FormSingle(value0, value1);
          };
      };
      return FormSingle;
  })();
  var FormMulti = (function () {
      function FormMulti(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      FormMulti.create = function (value0) {
          return function (value1) {
              return new FormMulti(value0, value1);
          };
      };
      return FormMulti;
  })();
  var FormRemove = (function () {
      function FormRemove(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      FormRemove.create = function (value0) {
          return function (value1) {
              return new FormRemove(value0, value1);
          };
      };
      return FormRemove;
  })();
  var FormRemoveAll = (function () {
      function FormRemoveAll(value0) {
          this.value0 = value0;
      };
      FormRemoveAll.create = function (value0) {
          return new FormRemoveAll(value0);
      };
      return FormRemoveAll;
  })();
  var FormCheck = (function () {
      function FormCheck(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      FormCheck.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new FormCheck(value0, value1, value2);
              };
          };
      };
      return FormCheck;
  })();
  var FormOK = (function () {
      function FormOK() {

      };
      FormOK.value = new FormOK();
      return FormOK;
  })();
  var FormCancel = (function () {
      function FormCancel() {

      };
      FormCancel.value = new FormCancel();
      return FormCancel;
  })();
  var targetSelectedOptions = function (name) {
      return function (event) {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.ix(Foreign_Index.indexableExceptT)(Foreign_Index.indexString)(Foreign_Index.ix(Foreign_Index.indexableForeign)(Foreign_Index.indexString)(event)("target"))("selectedOptions"))(function (v) {
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.ix(Foreign_Index.indexableForeign)(Foreign_Index.indexString)(v)("length"))(Foreign.readInt))(function (v1) {
                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Data_Traversable.traverse(Data_List_Types.traversableList)(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(function (i) {
                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.ix(Foreign_Index.indexableExceptT)(Foreign_Index.indexString)(Foreign_Index.ix(Foreign_Index.indexableForeign)(Foreign_Index.indexInt)(v)(i))("value"))(Foreign.readString);
                  })(Data_List.range(0)(v1 - 1 | 0)))(function (v2) {
                      if (v2 instanceof Data_List_Types.Nil) {
                          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))([ new FormRemoveAll(name) ]);
                      };
                      if (v2 instanceof Data_List_Types.Cons && v2.value1 instanceof Data_List_Types.Nil) {
                          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))([ new FormSingle(name, v2.value0) ]);
                      };
                      return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Array.fromFoldable(Data_List_Types.foldableList)(new Data_List_Types.Cons(new FormRemoveAll(name), Data_Functor.map(Data_List_Types.functorList)(FormMulti.create(name))(v2))));
                  });
              });
          });
      };
  };
  var removeMulti = function (k) {
      return function (v) {
          return function (model) {
              var myRemove = function (s) {
                  return function (v1) {
                      if (v1 instanceof Data_Maybe.Nothing) {
                          return Data_Maybe.Nothing.value;
                      };
                      if (v1 instanceof Data_Maybe.Just) {
                          return Data_List_NonEmpty.fromList(Data_List.filter(function (x) {
                              return s !== x;
                          })(Data_List_NonEmpty.toList(v1.value0)));
                      };
                      throw new Error("Failed pattern match at Bonsai.Forms.Model line 124, column 5 - line 125, column 14: " + [ s.constructor.name, v1.constructor.name ]);
                  };
              };
              return Data_Map_Internal.alter(Data_Ord.ordString)(myRemove(v))(k)(model);
          };
      };
  };
  var removeAll = function (k) {
      return function (model) {
          return Data_Map_Internal.alter(Data_Ord.ordString)(Data_Function["const"](Data_Maybe.Nothing.value))(k)(model);
      };
  };
  var lookupMulti = function (k) {
      return function (model) {
          var v = Data_Map_Internal.lookup(Data_Ord.ordString)(k)(model);
          if (v instanceof Data_Maybe.Nothing) {
              return Data_List_Types.Nil.value;
          };
          if (v instanceof Data_Maybe.Just) {
              return Data_List_NonEmpty.toList(v.value0);
          };
          throw new Error("Failed pattern match at Bonsai.Forms.Model line 142, column 3 - line 146, column 21: " + [ v.constructor.name ]);
      };
  };
  var lookupChecked = function (k) {
      return function (v) {
          return function (model) {
              return Data_Foldable.elem(Data_List_Types.foldableList)(Data_Eq.eqString)(v)(lookupMulti(k)(model));
          };
      };
  };
  var lookup = function (k) {
      return function (model) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(Data_List_NonEmpty.head)(Data_Map_Internal.lookup(Data_Ord.ordString)(k)(model));
      };
  };
  var insertMulti = function (k) {
      return function (v) {
          return function (model) {
              var myAdd = function (s) {
                  return function (v1) {
                      if (v1 instanceof Data_Maybe.Nothing) {
                          return Data_Maybe.Just.create(Data_List_NonEmpty.singleton(s));
                      };
                      if (v1 instanceof Data_Maybe.Just) {
                          return Data_Maybe.Just.create(Data_List_NonEmpty.cons(s)(v1.value0));
                      };
                      throw new Error("Failed pattern match at Bonsai.Forms.Model line 113, column 5 - line 114, column 29: " + [ s.constructor.name, v1.constructor.name ]);
                  };
              };
              return Data_Map_Internal.alter(Data_Ord.ordString)(myAdd(v))(k)(removeMulti(k)(v)(model));
          };
      };
  };
  var updateChecked = function (k) {
      return function (v) {
          return function (b) {
              return function (model) {
                  return (function () {
                      if (b) {
                          return insertMulti;
                      };
                      return removeMulti;
                  })()(k)(v)(model);
              };
          };
      };
  };
  var insert = function (k) {
      return function (v) {
          return function (model) {
              return Data_Map_Internal.insert(Data_Ord.ordString)(k)(Data_List_NonEmpty.singleton(v))(model);
          };
      };
  };
  var updatePlain = function (msg) {
      return function (model) {
          if (msg instanceof FormSingle) {
              return insert(msg.value0)(msg.value1)(model);
          };
          if (msg instanceof FormMulti) {
              return insertMulti(msg.value0)(msg.value1)(model);
          };
          if (msg instanceof FormRemove) {
              return removeMulti(msg.value0)(msg.value1)(model);
          };
          if (msg instanceof FormRemoveAll) {
              return removeAll(msg.value0)(model);
          };
          if (msg instanceof FormCheck) {
              return updateChecked(msg.value0)(msg.value1)(msg.value2)(model);
          };
          return model;
      };
  };
  var updateForm = function ($32) {
      return Data_Functor.map(Data_Functor.functorFn)(Data_Tuple.Tuple.create(Control_Plus.empty(Bonsai_Types.cmdPlus)))(updatePlain($32));
  };
  var emptyFormModel = Data_Map_Internal.empty;
  exports["FormSingle"] = FormSingle;
  exports["FormMulti"] = FormMulti;
  exports["FormRemove"] = FormRemove;
  exports["FormRemoveAll"] = FormRemoveAll;
  exports["FormCheck"] = FormCheck;
  exports["FormOK"] = FormOK;
  exports["FormCancel"] = FormCancel;
  exports["emptyFormModel"] = emptyFormModel;
  exports["updateForm"] = updateForm;
  exports["updatePlain"] = updatePlain;
  exports["insert"] = insert;
  exports["insertMulti"] = insertMulti;
  exports["removeMulti"] = removeMulti;
  exports["updateChecked"] = updateChecked;
  exports["lookup"] = lookup;
  exports["lookupMulti"] = lookupMulti;
  exports["lookupChecked"] = lookupChecked;
  exports["targetSelectedOptions"] = targetSelectedOptions;
})(PS["Bonsai.Forms.Model"] = PS["Bonsai.Forms.Model"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unfoldable1 = PS["Data.Unfoldable1"];
  var Prelude = PS["Prelude"];                 
  var CatQueue = (function () {
      function CatQueue(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CatQueue.create = function (value0) {
          return function (value1) {
              return new CatQueue(value0, value1);
          };
      };
      return CatQueue;
  })();
  var uncons = function ($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
          if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
              $tco_done = true;
              return Data_Maybe.Nothing.value;
          };
          if (v.value0 instanceof Data_List_Types.Nil) {
              $copy_v = new CatQueue(Data_List.reverse(v.value1), Data_List_Types.Nil.value);
              return;
          };
          if (v.value0 instanceof Data_List_Types.Cons) {
              $tco_done = true;
              return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0.value0, new CatQueue(v.value0.value1, v.value1)));
          };
          throw new Error("Failed pattern match at Data.CatQueue line 83, column 1 - line 83, column 63: " + [ v.constructor.name ]);
      };
      while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
      };
      return $tco_result;
  };
  var snoc = function (v) {
      return function (a) {
          return new CatQueue(v.value0, new Data_List_Types.Cons(a, v.value1));
      };
  };
  var $$null = function (v) {
      if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
          return true;
      };
      return false;
  };                                                                                                
  var empty = new CatQueue(Data_List_Types.Nil.value, Data_List_Types.Nil.value);
  exports["CatQueue"] = CatQueue;
  exports["empty"] = empty;
  exports["null"] = $$null;
  exports["snoc"] = snoc;
  exports["uncons"] = uncons;
})(PS["Data.CatQueue"] = PS["Data.CatQueue"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_CatQueue = PS["Data.CatQueue"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unfoldable1 = PS["Data.Unfoldable1"];
  var Prelude = PS["Prelude"];                 
  var CatNil = (function () {
      function CatNil() {

      };
      CatNil.value = new CatNil();
      return CatNil;
  })();
  var CatCons = (function () {
      function CatCons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CatCons.create = function (value0) {
          return function (value1) {
              return new CatCons(value0, value1);
          };
      };
      return CatCons;
  })();
  var $$null = function (v) {
      if (v instanceof CatNil) {
          return true;
      };
      return false;
  };
  var link = function (v) {
      return function (cat) {
          if (v instanceof CatNil) {
              return cat;
          };
          if (v instanceof CatCons) {
              return new CatCons(v.value0, Data_CatQueue.snoc(v.value1)(cat));
          };
          throw new Error("Failed pattern match at Data.CatList line 111, column 1 - line 111, column 54: " + [ v.constructor.name, cat.constructor.name ]);
      };
  };
  var foldr = function (k) {
      return function (b) {
          return function (q) {
              var foldl = function ($copy_v) {
                  return function ($copy_c) {
                      return function ($copy_v1) {
                          var $tco_var_v = $copy_v;
                          var $tco_var_c = $copy_c;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v, c, v1) {
                              if (v1 instanceof Data_List_Types.Nil) {
                                  $tco_done = true;
                                  return c;
                              };
                              if (v1 instanceof Data_List_Types.Cons) {
                                  $tco_var_v = v;
                                  $tco_var_c = v(c)(v1.value0);
                                  $copy_v1 = v1.value1;
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.CatList line 126, column 3 - line 126, column 59: " + [ v.constructor.name, c.constructor.name, v1.constructor.name ]);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v, $tco_var_c, $copy_v1);
                          };
                          return $tco_result;
                      };
                  };
              };
              var go = function ($copy_xs) {
                  return function ($copy_ys) {
                      var $tco_var_xs = $copy_xs;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(xs, ys) {
                          var v = Data_CatQueue.uncons(xs);
                          if (v instanceof Data_Maybe.Nothing) {
                              $tco_done = true;
                              return foldl(function (x) {
                                  return function (i) {
                                      return i(x);
                                  };
                              })(b)(ys);
                          };
                          if (v instanceof Data_Maybe.Just) {
                              $tco_var_xs = v.value0.value1;
                              $copy_ys = new Data_List_Types.Cons(k(v.value0.value0), ys);
                              return;
                          };
                          throw new Error("Failed pattern match at Data.CatList line 122, column 14 - line 124, column 67: " + [ v.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_xs, $copy_ys);
                      };
                      return $tco_result;
                  };
              };
              return go(q)(Data_List_Types.Nil.value);
          };
      };
  };
  var uncons = function (v) {
      if (v instanceof CatNil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof CatCons) {
          return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, (function () {
              var $45 = Data_CatQueue["null"](v.value1);
              if ($45) {
                  return CatNil.value;
              };
              return foldr(link)(CatNil.value)(v.value1);
          })()));
      };
      throw new Error("Failed pattern match at Data.CatList line 102, column 1 - line 102, column 61: " + [ v.constructor.name ]);
  };
  var foldableCatList = new Data_Foldable.Foldable(function (dictMonoid) {
      return Data_Foldable.foldMapDefaultL(foldableCatList)(dictMonoid);
  }, function (f) {
      var go = function ($copy_acc) {
          return function ($copy_q) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, q) {
                  var v = uncons(q);
                  if (v instanceof Data_Maybe.Just) {
                      $tco_var_acc = f(acc)(v.value0.value0);
                      $copy_q = v.value0.value1;
                      return;
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      $tco_done = true;
                      return acc;
                  };
                  throw new Error("Failed pattern match at Data.CatList line 158, column 16 - line 160, column 22: " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_q);
              };
              return $tco_result;
          };
      };
      return go;
  }, function (f) {
      return function (s) {
          return function (l) {
              return Data_Foldable.foldrDefault(foldableCatList)(f)(s)(l);
          };
      };
  });
  var empty = CatNil.value;
  var append = function (v) {
      return function (v1) {
          if (v1 instanceof CatNil) {
              return v;
          };
          if (v instanceof CatNil) {
              return v1;
          };
          return link(v)(v1);
      };
  };
  var cons = function (a) {
      return function (cat) {
          return append(new CatCons(a, Data_CatQueue.empty))(cat);
      };
  };
  var functorCatList = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof CatNil) {
              return CatNil.value;
          };
          if (v1 instanceof CatCons) {
              var d = (function () {
                  var $61 = Data_CatQueue["null"](v1.value1);
                  if ($61) {
                      return CatNil.value;
                  };
                  return foldr(link)(CatNil.value)(v1.value1);
              })();
              return cons(v(v1.value0))(Data_Functor.map(functorCatList)(v)(d));
          };
          throw new Error("Failed pattern match at Data.CatList line 186, column 1 - line 186, column 43: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var semigroupCatList = new Data_Semigroup.Semigroup(append);
  var snoc = function (cat) {
      return function (a) {
          return append(cat)(new CatCons(a, Data_CatQueue.empty));
      };
  };
  exports["CatNil"] = CatNil;
  exports["CatCons"] = CatCons;
  exports["empty"] = empty;
  exports["null"] = $$null;
  exports["append"] = append;
  exports["cons"] = cons;
  exports["snoc"] = snoc;
  exports["uncons"] = uncons;
  exports["semigroupCatList"] = semigroupCatList;
  exports["foldableCatList"] = foldableCatList;
  exports["functorCatList"] = functorCatList;
})(PS["Data.CatList"] = PS["Data.CatList"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_CatList = PS["Data.CatList"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Free = (function () {
      function Free(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Free.create = function (value0) {
          return function (value1) {
              return new Free(value0, value1);
          };
      };
      return Free;
  })();
  var Return = (function () {
      function Return(value0) {
          this.value0 = value0;
      };
      Return.create = function (value0) {
          return new Return(value0);
      };
      return Return;
  })();
  var Bind = (function () {
      function Bind(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Bind.create = function (value0) {
          return function (value1) {
              return new Bind(value0, value1);
          };
      };
      return Bind;
  })();
  var toView = function ($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
          var runExpF = function (v2) {
              return v2;
          };
          var concatF = function (v2) {
              return function (r) {
                  return new Free(v2.value0, Data_Semigroup.append(Data_CatList.semigroupCatList)(v2.value1)(r));
              };
          };
          if (v.value0 instanceof Return) {
              var v2 = Data_CatList.uncons(v.value1);
              if (v2 instanceof Data_Maybe.Nothing) {
                  $tco_done = true;
                  return new Return(v.value0.value0);
              };
              if (v2 instanceof Data_Maybe.Just) {
                  $copy_v = concatF(runExpF(v2.value0.value0)(v.value0.value0))(v2.value0.value1);
                  return;
              };
              throw new Error("Failed pattern match at Control.Monad.Free line 220, column 7 - line 224, column 64: " + [ v2.constructor.name ]);
          };
          if (v.value0 instanceof Bind) {
              $tco_done = true;
              return new Bind(v.value0.value0, function (a) {
                  return concatF(v.value0.value1(a))(v.value1);
              });
          };
          throw new Error("Failed pattern match at Control.Monad.Free line 218, column 3 - line 226, column 56: " + [ v.value0.constructor.name ]);
      };
      while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
      };
      return $tco_result;
  };
  var fromView = function (f) {
      return new Free(f, Data_CatList.empty);
  };
  var freeMonad = new Control_Monad.Monad(function () {
      return freeApplicative;
  }, function () {
      return freeBind;
  });
  var freeFunctor = new Data_Functor.Functor(function (k) {
      return function (f) {
          return Control_Bind.bindFlipped(freeBind)(function ($118) {
              return Control_Applicative.pure(freeApplicative)(k($118));
          })(f);
      };
  });
  var freeBind = new Control_Bind.Bind(function () {
      return freeApply;
  }, function (v) {
      return function (k) {
          return new Free(v.value0, Data_CatList.snoc(v.value1)(k));
      };
  });
  var freeApply = new Control_Apply.Apply(function () {
      return freeFunctor;
  }, Control_Monad.ap(freeMonad));
  var freeApplicative = new Control_Applicative.Applicative(function () {
      return freeApply;
  }, function ($119) {
      return fromView(Return.create($119));
  });
  var liftF = function (f) {
      return fromView(new Bind(f, function ($120) {
          return Control_Applicative.pure(freeApplicative)($120);
      }));
  }; 
  var substFree = function (k) {
      var go = function (f) {
          var v = toView(f);
          if (v instanceof Return) {
              return Control_Applicative.pure(freeApplicative)(v.value0);
          };
          if (v instanceof Bind) {
              return Control_Bind.bind(freeBind)(k(v.value0))(Data_Functor.map(Data_Functor.functorFn)(go)(v.value1));
          };
          throw new Error("Failed pattern match at Control.Monad.Free line 161, column 10 - line 163, column 33: " + [ v.constructor.name ]);
      };
      return go;
  };
  var hoistFree = function (k) {
      return substFree(function ($121) {
          return liftF(k($121));
      });
  };
  var foldFree = function (dictMonadRec) {
      return function (k) {
          var go = function (f) {
              var v = toView(f);
              if (v instanceof Return) {
                  return Data_Functor.map((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(Control_Monad_Rec_Class.Done.create)(Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(v.value0));
              };
              if (v instanceof Bind) {
                  return Data_Functor.map((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(function ($127) {
                      return Control_Monad_Rec_Class.Loop.create(v.value1($127));
                  })(k(v.value0));
              };
              throw new Error("Failed pattern match at Control.Monad.Free line 151, column 10 - line 153, column 37: " + [ v.constructor.name ]);
          };
          return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go);
      };
  };
  exports["liftF"] = liftF;
  exports["hoistFree"] = hoistFree;
  exports["foldFree"] = foldFree;
  exports["substFree"] = substFree;
  exports["freeFunctor"] = freeFunctor;
  exports["freeBind"] = freeBind;
  exports["freeApplicative"] = freeApplicative;
  exports["freeApply"] = freeApply;
  exports["freeMonad"] = freeMonad;
})(PS["Control.Monad.Free"] = PS["Control.Monad.Free"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Effect_Class = PS["Effect.Class"];
  var Prelude = PS["Prelude"];                 
  var StateT = function (x) {
      return x;
  }; 
  var functorStateT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return function (s) {
                  return Data_Functor.map(dictFunctor)(function (v1) {
                      return new Data_Tuple.Tuple(f(v1.value0), v1.value1);
                  })(v(s));
              };
          };
      });
  };
  var monadStateT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeStateT(dictMonad);
      }, function () {
          return bindStateT(dictMonad);
      });
  };
  var bindStateT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyStateT(dictMonad);
      }, function (v) {
          return function (f) {
              return function (s) {
                  return Control_Bind.bind(dictMonad.Bind1())(v(s))(function (v1) {
                      var v3 = f(v1.value0);
                      return v3(v1.value1);
                  });
              };
          };
      });
  };
  var applyStateT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorStateT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadStateT(dictMonad)));
  };
  var applicativeStateT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyStateT(dictMonad);
      }, function (a) {
          return function (s) {
              return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(a, s));
          };
      });
  };
  var monadRecStateT = function (dictMonadRec) {
      return new Control_Monad_Rec_Class.MonadRec(function () {
          return monadStateT(dictMonadRec.Monad0());
      }, function (f) {
          return function (a) {
              var f$prime = function (v) {
                  return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())((function () {
                      var v1 = f(v.value0);
                      return v1;
                  })()(v.value1))(function (v1) {
                      return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())((function () {
                          if (v1.value0 instanceof Control_Monad_Rec_Class.Loop) {
                              return new Control_Monad_Rec_Class.Loop(new Data_Tuple.Tuple(v1.value0.value0, v1.value1));
                          };
                          if (v1.value0 instanceof Control_Monad_Rec_Class.Done) {
                              return new Control_Monad_Rec_Class.Done(new Data_Tuple.Tuple(v1.value0.value0, v1.value1));
                          };
                          throw new Error("Failed pattern match at Control.Monad.State.Trans line 87, column 16 - line 89, column 40: " + [ v1.value0.constructor.name ]);
                      })());
                  });
              };
              return function (s) {
                  return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(f$prime)(new Data_Tuple.Tuple(a, s));
              };
          };
      });
  };
  var monadStateStateT = function (dictMonad) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadStateT(dictMonad);
      }, function (f) {
          return StateT(function ($111) {
              return Control_Applicative.pure(dictMonad.Applicative0())(f($111));
          });
      });
  };
  exports["StateT"] = StateT;
  exports["functorStateT"] = functorStateT;
  exports["applyStateT"] = applyStateT;
  exports["applicativeStateT"] = applicativeStateT;
  exports["bindStateT"] = bindStateT;
  exports["monadStateT"] = monadStateT;
  exports["monadRecStateT"] = monadRecStateT;
  exports["monadStateStateT"] = monadStateStateT;
})(PS["Control.Monad.State.Trans"] = PS["Control.Monad.State.Trans"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];
  var execState = function (v) {
      return function (s) {
          var v1 = v(s);
          return v1.value1;
      };
  };
  exports["execState"] = execState;
})(PS["Control.Monad.State"] = PS["Control.Monad.State"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Bonsai_VirtualDom = PS["Bonsai.VirtualDom"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Free = PS["Control.Monad.Free"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State = PS["Control.Monad.State"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Data_Array = PS["Data.Array"];
  var Data_CatList = PS["Data.CatList"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var KeyedContentF = (function () {
      function KeyedContentF(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      KeyedContentF.create = function (value0) {
          return function (value1) {
              return new KeyedContentF(value0, value1);
          };
      };
      return KeyedContentF;
  })();
  var KeyedEmptyF = (function () {
      function KeyedEmptyF(value0) {
          this.value0 = value0;
      };
      KeyedEmptyF.create = function (value0) {
          return new KeyedEmptyF(value0);
      };
      return KeyedEmptyF;
  })();
  var ElementF = (function () {
      function ElementF(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ElementF.create = function (value0) {
          return function (value1) {
              return new ElementF(value0, value1);
          };
      };
      return ElementF;
  })();
  var KeyedElementF = (function () {
      function KeyedElementF(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      KeyedElementF.create = function (value0) {
          return function (value1) {
              return new KeyedElementF(value0, value1);
          };
      };
      return KeyedElementF;
  })();
  var VNodeF = (function () {
      function VNodeF(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      VNodeF.create = function (value0) {
          return function (value1) {
              return new VNodeF(value0, value1);
          };
      };
      return VNodeF;
  })();
  var EmptyF = (function () {
      function EmptyF(value0) {
          this.value0 = value0;
      };
      EmptyF.create = function (value0) {
          return new EmptyF(value0);
      };
      return EmptyF;
  })();
  var HasAttribute = function (withAttribute, withAttributes) {
      this.withAttribute = withAttribute;
      this.withAttributes = withAttributes;
  };
  var HasStyle = function (withStyle) {
      this.withStyle = withStyle;
  };
  var withStyle = function (dict) {
      return dict.withStyle;
  };
  var withAttributes = function (dict) {
      return dict.withAttributes;
  };
  var withAttribute = function (dict) {
      return dict.withAttribute;
  };
  var vnode = function (v) {
      return Control_Monad_Free.liftF(new VNodeF(v, Data_Unit.unit));
  };
  var text = function (s) {
      return vnode(Bonsai_VirtualDom.text(s));
  };
  var stringProperty = Bonsai_VirtualDom.property;
  var renderKeyedContent$prime = function (content) {
      var foldContentF = function (v) {
          if (v instanceof KeyedEmptyF) {
              return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(v.value0);
          };
          if (v instanceof KeyedContentF) {
              return Control_Monad_State_Class.state(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(function (acc) {
                  return new Data_Tuple.Tuple(v.value1, Data_CatList.snoc(acc)(v.value0));
              });
          };
          throw new Error("Failed pattern match at Bonsai.Html.Internal line 396, column 5 - line 396, column 87: " + [ v.constructor.name ]);
      };
      return Control_Monad_State.execState(Control_Monad_Free.foldFree(Control_Monad_State_Trans.monadRecStateT(Control_Monad_Rec_Class.monadRecIdentity))(foldContentF)(content))(Data_CatList.empty);
  };
  var render$prime = function (elem) {
      var styles2Tups = function (s) {
          return Data_Functor.map(Data_CatList.functorCatList)(function (st) {
              return new Data_Tuple.Tuple(st.name, st.value);
          })(s);
      };
      var attribsAndStyles = function (attribs) {
          return function (styles) {
              var $27 = Data_CatList["null"](styles);
              if ($27) {
                  return attribs;
              };
              return Data_CatList.snoc(attribs)(Bonsai_VirtualDom.style(Data_Array.fromFoldable(Data_CatList.foldableCatList)(styles2Tups(styles))));
          };
      };
      var renderNodes = function (content) {
          return Data_Array.fromFoldable(Data_CatList.foldableCatList)(Control_Monad_State.execState(Control_Monad_Free.foldFree(Control_Monad_State_Trans.monadRecStateT(Control_Monad_Rec_Class.monadRecIdentity))(foldMarkupF)(content))(Data_CatList.empty));
      };
      var foldMarkupF = function (v) {
          if (v instanceof EmptyF) {
              return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(v.value0);
          };
          if (v instanceof VNodeF) {
              return Control_Monad_State_Class.state(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(function (acc) {
                  return new Data_Tuple.Tuple(v.value1, Data_CatList.snoc(acc)(v.value0));
              });
          };
          if (v instanceof KeyedElementF) {
              return Control_Monad_State_Class.state(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(function (acc) {
                  return Data_Tuple.Tuple.create(v.value1)(Data_CatList.snoc(acc)(Bonsai_VirtualDom.keyedNode(v.value0.name)(Data_Array.fromFoldable(Data_CatList.foldableCatList)(attribsAndStyles(v.value0.attribs)(v.value0.styles)))(Data_Array.fromFoldable(Data_CatList.foldableCatList)(v.value0.nodes))));
              });
          };
          if (v instanceof ElementF) {
              var c = renderNodes(v.value0.content);
              var a = attribsAndStyles(v.value0.attribs)(v.value0.styles);
              return Control_Monad_State_Class.state(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(function (acc) {
                  return new Data_Tuple.Tuple(v.value1, Data_CatList.snoc(acc)(Bonsai_VirtualDom.node(v.value0.name)(Data_Array.fromFoldable(Data_CatList.foldableCatList)(a))(c)));
              });
          };
          throw new Error("Failed pattern match at Bonsai.Html.Internal line 370, column 5 - line 370, column 65: " + [ v.constructor.name ]);
      };
      return renderNodes(elem);
  };
  var render = function (elem) {
      var singleNode = function (ns) {
          if (ns.length === 0) {
              return Bonsai_VirtualDom.node("div")([  ])([  ]);
          };
          if (ns.length === 1) {
              return ns[0];
          };
          return Bonsai_VirtualDom.node("div")([  ])(ns);
      };
      return singleNode(render$prime(elem));
  };
  var parent = function (name) {
      return function (content) {
          return Control_Monad_Free.liftF(new ElementF({
              name: name,
              attribs: Data_CatList.empty,
              styles: Data_CatList.empty,
              content: content
          }, Data_Unit.unit));
      };
  };
  var keyedElement = function (name) {
      return function (keyedChildren) {
          var nodes = renderKeyedContent$prime(keyedChildren);
          return Control_Monad_Free.liftF(new KeyedElementF({
              name: name,
              attribs: Data_CatList.empty,
              styles: Data_CatList.empty,
              nodes: nodes
          }, Data_Unit.unit));
      };
  };
  var keyed = function (k) {
      return function (n) {
          return Control_Monad_Free.liftF(new KeyedContentF(new Data_Tuple.Tuple(k, n), Data_Unit.unit));
      };
  };
  var hasStyleMarkup = new HasStyle(function (elem) {
      return function (st) {
          var go = function (v) {
              if (v instanceof ElementF) {
                  return new ElementF({
                      name: v.value0.name,
                      attribs: v.value0.attribs,
                      styles: Data_CatList.snoc(v.value0.styles)(st),
                      content: v.value0.content
                  }, v.value1);
              };
              if (v instanceof KeyedElementF) {
                  return new KeyedElementF({
                      name: v.value0.name,
                      attribs: v.value0.attribs,
                      styles: Data_CatList.snoc(v.value0.styles)(st),
                      nodes: v.value0.nodes
                  }, v.value1);
              };
              return v;
          };
          return Control_Monad_Free.hoistFree(go)(elem);
      };
  });
  var hasStyleMarkupF = new HasStyle(function (efn) {
      return function (prop) {
          return function (elem) {
              return withStyle(hasStyleMarkup)(efn(elem))(prop);
          };
      };
  });
  var hasAttributeMarkup = new HasAttribute(function (elem) {
      return function (prop) {
          var go = function (v) {
              if (v instanceof ElementF) {
                  return new ElementF({
                      name: v.value0.name,
                      attribs: Data_CatList.snoc(v.value0.attribs)(prop),
                      styles: v.value0.styles,
                      content: v.value0.content
                  }, v.value1);
              };
              if (v instanceof KeyedElementF) {
                  return new KeyedElementF({
                      name: v.value0.name,
                      attribs: Data_CatList.snoc(v.value0.attribs)(prop),
                      styles: v.value0.styles,
                      nodes: v.value0.nodes
                  }, v.value1);
              };
              return v;
          };
          return Control_Monad_Free.hoistFree(go)(elem);
      };
  }, function (elem) {
      return function (props) {
          var go = function (v) {
              if (v instanceof ElementF) {
                  return new ElementF({
                      name: v.value0.name,
                      attribs: Data_Semigroup.append(Data_CatList.semigroupCatList)(v.value0.attribs)(props),
                      styles: v.value0.styles,
                      content: v.value0.content
                  }, v.value1);
              };
              if (v instanceof KeyedElementF) {
                  return new KeyedElementF({
                      name: v.value0.name,
                      attribs: Data_Semigroup.append(Data_CatList.semigroupCatList)(v.value0.attribs)(props),
                      styles: v.value0.styles,
                      nodes: v.value0.nodes
                  }, v.value1);
              };
              return v;
          };
          return Control_Monad_Free.hoistFree(go)(elem);
      };
  });
  var hasAttributeMarkupF = new HasAttribute(function (efn) {
      return function (prop) {
          return function (elem) {
              return withAttribute(hasAttributeMarkup)(efn(elem))(prop);
          };
      };
  }, function (efn) {
      return function (props) {
          return function (elem) {
              return withAttributes(hasAttributeMarkup)(efn(elem))(props);
          };
      };
  });
  var hasAttributeKeyedContentF = new HasAttribute(function (efn) {
      return function (prop) {
          return function (elem) {
              return withAttribute(hasAttributeMarkup)(efn(elem))(prop);
          };
      };
  }, function (efn) {
      return function (props) {
          return function (elem) {
              return withAttributes(hasAttributeMarkup)(efn(elem))(props);
          };
      };
  });
  var emptyMarkup = Control_Monad_Free.liftF(new EmptyF(Data_Unit.unit));
  var leaf = function (name) {
      return Control_Monad_Free.liftF(new ElementF({
          name: name,
          attribs: Data_CatList.empty,
          styles: Data_CatList.empty,
          content: emptyMarkup
      }, Data_Unit.unit));
  };
  var booleanProperty = Bonsai_VirtualDom.property;
  var attribute = Bonsai_VirtualDom.attribute;
  exports["HasAttribute"] = HasAttribute;
  exports["HasStyle"] = HasStyle;
  exports["attribute"] = attribute;
  exports["booleanProperty"] = booleanProperty;
  exports["keyed"] = keyed;
  exports["keyedElement"] = keyedElement;
  exports["leaf"] = leaf;
  exports["parent"] = parent;
  exports["render"] = render;
  exports["stringProperty"] = stringProperty;
  exports["text"] = text;
  exports["vnode"] = vnode;
  exports["withAttribute"] = withAttribute;
  exports["withAttributes"] = withAttributes;
  exports["withStyle"] = withStyle;
  exports["hasAttributeMarkup"] = hasAttributeMarkup;
  exports["hasStyleMarkup"] = hasStyleMarkup;
  exports["hasAttributeMarkupF"] = hasAttributeMarkupF;
  exports["hasStyleMarkupF"] = hasStyleMarkupF;
  exports["hasAttributeKeyedContentF"] = hasAttributeKeyedContentF;
})(PS["Bonsai.Html.Internal"] = PS["Bonsai.Html.Internal"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Bonsai_Forms_Model = PS["Bonsai.Forms.Model"];
  var Bonsai_Html = PS["Bonsai.Html"];
  var Bonsai_Html_Internal = PS["Bonsai.Html.Internal"];
  var Bonsai_VirtualDom = PS["Bonsai.VirtualDom"];
  var Control_Monad_Free = PS["Control.Monad.Free"];
  var Data_CatList = PS["Data.CatList"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];                 
  var IText = (function () {
      function IText() {

      };
      IText.value = new IText();
      return IText;
  })();
  var INumber = (function () {
      function INumber() {

      };
      INumber.value = new INumber();
      return INumber;
  })();
  var IColor = (function () {
      function IColor() {

      };
      IColor.value = new IColor();
      return IColor;
  })();
  var IEmail = (function () {
      function IEmail() {

      };
      IEmail.value = new IEmail();
      return IEmail;
  })();
  var IFile = (function () {
      function IFile() {

      };
      IFile.value = new IFile();
      return IFile;
  })();
  var IPassword = (function () {
      function IPassword() {

      };
      IPassword.value = new IPassword();
      return IPassword;
  })();
  var IRange = (function () {
      function IRange() {

      };
      IRange.value = new IRange();
      return IRange;
  })();
  var ISearch = (function () {
      function ISearch() {

      };
      ISearch.value = new ISearch();
      return ISearch;
  })();
  var ITel = (function () {
      function ITel() {

      };
      ITel.value = new ITel();
      return ITel;
  })();
  var IUrl = (function () {
      function IUrl() {

      };
      IUrl.value = new IUrl();
      return IUrl;
  })();
  var IDate = (function () {
      function IDate() {

      };
      IDate.value = new IDate();
      return IDate;
  })();
  var IMonth = (function () {
      function IMonth() {

      };
      IMonth.value = new IMonth();
      return IMonth;
  })();
  var IWeek = (function () {
      function IWeek() {

      };
      IWeek.value = new IWeek();
      return IWeek;
  })();
  var IDatetimeLocal = (function () {
      function IDatetimeLocal() {

      };
      IDatetimeLocal.value = new IDatetimeLocal();
      return IDatetimeLocal;
  })();
  var ITime = (function () {
      function ITime() {

      };
      ITime.value = new ITime();
      return ITime;
  })();
  var ICheckbox = (function () {
      function ICheckbox() {

      };
      ICheckbox.value = new ICheckbox();
      return ICheckbox;
  })();
  var IRadio = (function () {
      function IRadio() {

      };
      IRadio.value = new IRadio();
      return IRadio;
  })();
  var ITextarea = (function () {
      function ITextarea() {

      };
      ITextarea.value = new ITextarea();
      return ITextarea;
  })();
  var FormF = (function () {
      function FormF(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      FormF.create = function (value0) {
          return function (value1) {
              return new FormF(value0, value1);
          };
      };
      return FormF;
  })();
  var FieldsetF = (function () {
      function FieldsetF(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      FieldsetF.create = function (value0) {
          return function (value1) {
              return new FieldsetF(value0, value1);
          };
      };
      return FieldsetF;
  })();
  var InputF = (function () {
      function InputF(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      InputF.create = function (value0) {
          return function (value1) {
              return new InputF(value0, value1);
          };
      };
      return InputF;
  })();
  var GroupedF = (function () {
      function GroupedF(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      GroupedF.create = function (value0) {
          return function (value1) {
              return new GroupedF(value0, value1);
          };
      };
      return GroupedF;
  })();
  var CustomMarkupF = (function () {
      function CustomMarkupF(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CustomMarkupF.create = function (value0) {
          return function (value1) {
              return new CustomMarkupF(value0, value1);
          };
      };
      return CustomMarkupF;
  })();
  var CustomControlF = (function () {
      function CustomControlF(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CustomControlF.create = function (value0) {
          return function (value1) {
              return new CustomControlF(value0, value1);
          };
      };
      return CustomControlF;
  })();
  var EmptyF = (function () {
      function EmptyF(value0) {
          this.value0 = value0;
      };
      EmptyF.create = function (value0) {
          return new EmptyF(value0);
      };
      return EmptyF;
  })();
  var HasAttribute = function (withAttribute) {
      this.withAttribute = withAttribute;
  };
  var withAttribute = function (dict) {
      return dict.withAttribute;
  };
  var showInputTyp = new Data_Show.Show(function (i) {
      if (i instanceof IText) {
          return "text";
      };
      if (i instanceof INumber) {
          return "number";
      };
      if (i instanceof IColor) {
          return "color";
      };
      if (i instanceof IEmail) {
          return "email";
      };
      if (i instanceof IFile) {
          return "file";
      };
      if (i instanceof IPassword) {
          return "password";
      };
      if (i instanceof IRange) {
          return "range";
      };
      if (i instanceof ISearch) {
          return "seach";
      };
      if (i instanceof ITel) {
          return "tel";
      };
      if (i instanceof IUrl) {
          return "url";
      };
      if (i instanceof IDate) {
          return "date";
      };
      if (i instanceof IMonth) {
          return "month";
      };
      if (i instanceof IWeek) {
          return "week";
      };
      if (i instanceof IDatetimeLocal) {
          return "datetime-local";
      };
      if (i instanceof ITime) {
          return "time";
      };
      if (i instanceof ICheckbox) {
          return "checkbox";
      };
      if (i instanceof IRadio) {
          return "radio";
      };
      if (i instanceof ITextarea) {
          return "textarea";
      };
      throw new Error("Failed pattern match at Bonsai.Forms.Internal line 103, column 12 - line 128, column 1: " + [ i.constructor.name ]);
  });
  var hasAttributeFormDef = new HasAttribute(function (elem) {
      return function (prop) {
          var go = function (v) {
              if (v instanceof FormF) {
                  return new FormF({
                      name: v.value0.name,
                      legend: v.value0.legend,
                      attribs: Data_CatList.snoc(v.value0.attribs)(prop),
                      content: v.value0.content
                  }, v.value1);
              };
              if (v instanceof FieldsetF) {
                  return new FieldsetF({
                      name: v.value0.name,
                      legend: v.value0.legend,
                      attribs: Data_CatList.snoc(v.value0.attribs)(prop),
                      content: v.value0.content
                  }, v.value1);
              };
              if (v instanceof InputF) {
                  return new InputF({
                      typ: v.value0.typ,
                      name: v.value0.name,
                      label: v.value0.label,
                      message: v.value0.message,
                      attribs: Data_CatList.snoc(v.value0.attribs)(prop)
                  }, v.value1);
              };
              if (v instanceof GroupedF) {
                  return new GroupedF({
                      typ: v.value0.typ,
                      name: v.value0.name,
                      message: v.value0.message,
                      attribs: Data_CatList.snoc(v.value0.attribs)(prop),
                      inputs: v.value0.inputs
                  }, v.value1);
              };
              if (v instanceof CustomMarkupF) {
                  return new CustomMarkupF(Bonsai_Html_Internal.withAttribute(Bonsai_Html_Internal.hasAttributeMarkup)(v.value0)(prop), v.value1);
              };
              if (v instanceof CustomControlF) {
                  return new CustomControlF({
                      name: v.value0.name,
                      label: v.value0.label,
                      message: v.value0.message,
                      markup: Data_Functor.map(Data_Functor.functorFn)(function (m) {
                          return Bonsai_Html_Internal.withAttribute(Bonsai_Html_Internal.hasAttributeMarkup)(m)(prop);
                      })(v.value0.markup)
                  }, v.value1);
              };
              if (v instanceof EmptyF) {
                  return new EmptyF(v.value0);
              };
              throw new Error("Failed pattern match at Bonsai.Forms.Internal line 163, column 7 - line 163, column 33: " + [ v.constructor.name ]);
          };
          return Control_Monad_Free.hoistFree(go)(elem);
      };
  });
  exports["IText"] = IText;
  exports["INumber"] = INumber;
  exports["IColor"] = IColor;
  exports["IEmail"] = IEmail;
  exports["IFile"] = IFile;
  exports["IPassword"] = IPassword;
  exports["IRange"] = IRange;
  exports["ISearch"] = ISearch;
  exports["ITel"] = ITel;
  exports["IUrl"] = IUrl;
  exports["IDate"] = IDate;
  exports["IMonth"] = IMonth;
  exports["IWeek"] = IWeek;
  exports["IDatetimeLocal"] = IDatetimeLocal;
  exports["ITime"] = ITime;
  exports["ICheckbox"] = ICheckbox;
  exports["IRadio"] = IRadio;
  exports["ITextarea"] = ITextarea;
  exports["FormF"] = FormF;
  exports["FieldsetF"] = FieldsetF;
  exports["InputF"] = InputF;
  exports["GroupedF"] = GroupedF;
  exports["CustomMarkupF"] = CustomMarkupF;
  exports["CustomControlF"] = CustomControlF;
  exports["EmptyF"] = EmptyF;
  exports["HasAttribute"] = HasAttribute;
  exports["withAttribute"] = withAttribute;
  exports["showInputTyp"] = showInputTyp;
  exports["hasAttributeFormDef"] = hasAttributeFormDef;
})(PS["Bonsai.Forms.Internal"] = PS["Bonsai.Forms.Internal"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Bonsai_Html_Internal = PS["Bonsai.Html.Internal"];
  var Bonsai_VirtualDom = PS["Bonsai.VirtualDom"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                           
  var value = Bonsai_Html_Internal.stringProperty("value");
  var typ = Bonsai_Html_Internal.attribute("type");        
  var target = Bonsai_Html_Internal.stringProperty("target");
  var style = function (n) {
      return function (v) {
          return {
              name: n,
              value: v
          };
      };
  };
  var step = Bonsai_Html_Internal.stringProperty("step");
  var selected = Bonsai_Html_Internal.booleanProperty("selected");
  var required = Bonsai_Html_Internal.booleanProperty("required");     
  var pattern = Bonsai_Html_Internal.attribute("pattern");            
  var name = Bonsai_Html_Internal.stringProperty("name");
  var min = Bonsai_Html_Internal.stringProperty("min");
  var max = Bonsai_Html_Internal.stringProperty("max");
  var id_ = Bonsai_Html_Internal.stringProperty("id");
  var id = id_;
  var href = Bonsai_Html_Internal.stringProperty("href");
  var $$for = Bonsai_Html_Internal.attribute("size");             
  var defaultValue = Bonsai_Html_Internal.stringProperty("defaultValue");
  var cls = Bonsai_Html_Internal.stringProperty("className");
  var checked = Bonsai_Html_Internal.booleanProperty("checked");    
  var autocomplete = function (b) {
      return Bonsai_Html_Internal.stringProperty("autocomplete")((function () {
          if (b) {
              return "on";
          };
          return "off";
      })());
  };
  exports["style"] = style;
  exports["cls"] = cls;
  exports["id_"] = id_;
  exports["id"] = id;
  exports["typ"] = typ;
  exports["value"] = value;
  exports["defaultValue"] = defaultValue;
  exports["checked"] = checked;
  exports["selected"] = selected;
  exports["autocomplete"] = autocomplete;
  exports["name"] = name;
  exports["pattern"] = pattern;
  exports["required"] = required;
  exports["for"] = $$for;
  exports["max"] = max;
  exports["min"] = min;
  exports["step"] = step;
  exports["href"] = href;
  exports["target"] = target;
})(PS["Bonsai.Html.Attributes"] = PS["Bonsai.Html.Attributes"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Bonsai_Html_Internal = PS["Bonsai.Html.Internal"];
  var Prelude = PS["Prelude"];                   
  var ul = Bonsai_Html_Internal.parent("ul");      
  var textarea = Bonsai_Html_Internal.leaf("textarea");
  var span = Bonsai_Html_Internal.parent("span");  
  var select = Bonsai_Html_Internal.parent("select");    
  var pre_ = Bonsai_Html_Internal.parent("pre");   
  var p = Bonsai_Html_Internal.parent("p");          
  var option = Bonsai_Html_Internal.parent("option");
  var nav = Bonsai_Html_Internal.parent("nav");
  var li = Bonsai_Html_Internal.parent("li");
  var legend = Bonsai_Html_Internal.parent("legend");
  var label = Bonsai_Html_Internal.parent("label");
  var input = Bonsai_Html_Internal.leaf("input");
  var hr = Bonsai_Html_Internal.leaf("hr");  
  var h3 = Bonsai_Html_Internal.parent("h3");                
  var fieldset = Bonsai_Html_Internal.parent("fieldset");
  var div_ = Bonsai_Html_Internal.parent("div");
  var div = div_;                                    
  var button = Bonsai_Html_Internal.parent("button");
  var a = Bonsai_Html_Internal.parent("a");
  exports["nav"] = nav;
  exports["h3"] = h3;
  exports["p"] = p;
  exports["hr"] = hr;
  exports["pre_"] = pre_;
  exports["ul"] = ul;
  exports["li"] = li;
  exports["div_"] = div_;
  exports["div"] = div;
  exports["a"] = a;
  exports["span"] = span;
  exports["fieldset"] = fieldset;
  exports["legend"] = legend;
  exports["label"] = label;
  exports["input"] = input;
  exports["button"] = button;
  exports["select"] = select;
  exports["option"] = option;
  exports["textarea"] = textarea;
})(PS["Bonsai.Html.Elements"] = PS["Bonsai.Html.Elements"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Bonsai_EventHandlers = PS["Bonsai.EventHandlers"];
  var Bonsai_Types = PS["Bonsai.Types"];
  var Bonsai_VirtualDom = PS["Bonsai.VirtualDom"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Data_Function = PS["Data.Function"];
  var Data_Identity = PS["Data.Identity"];
  var Prelude = PS["Prelude"];                 
  var preventDefaultStopPropagation = {
      preventDefault: true,
      stopPropagation: true
  };
  var onClickPreventDefault = function (msg) {
      return Bonsai_VirtualDom.onWithOptions(preventDefaultStopPropagation)("click")(Bonsai_EventHandlers.constHandler(msg));
  };
  var onCheckedChange = function (fn) {
      return Bonsai_VirtualDom.on("change")(Bonsai_EventHandlers.targetCheckedHandler(fn));
  };
  exports["preventDefaultStopPropagation"] = preventDefaultStopPropagation;
  exports["onClickPreventDefault"] = onClickPreventDefault;
  exports["onCheckedChange"] = onCheckedChange;
})(PS["Bonsai.Html.Events"] = PS["Bonsai.Html.Events"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Bonsai_Forms_Internal = PS["Bonsai.Forms.Internal"];
  var Bonsai_Forms_Model = PS["Bonsai.Forms.Model"];
  var Bonsai_Html = PS["Bonsai.Html"];
  var Bonsai_Html_Attributes = PS["Bonsai.Html.Attributes"];
  var Bonsai_Html_Elements = PS["Bonsai.Html.Elements"];
  var Bonsai_Html_Events = PS["Bonsai.Html.Events"];
  var Bonsai_Html_Internal = PS["Bonsai.Html.Internal"];
  var Bonsai_Types = PS["Bonsai.Types"];
  var Bonsai_VirtualDom = PS["Bonsai.VirtualDom"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Monad_Free = PS["Control.Monad.Free"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_CatList = PS["Data.CatList"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var withMessage = function (elem) {
      return function (s) {
          var go = function (v) {
              if (v instanceof Bonsai_Forms_Internal.InputF) {
                  return new Bonsai_Forms_Internal.InputF({
                      typ: v.value0.typ,
                      name: v.value0.name,
                      label: v.value0.label,
                      message: new Data_Maybe.Just(s),
                      attribs: v.value0.attribs
                  }, v.value1);
              };
              if (v instanceof Bonsai_Forms_Internal.GroupedF) {
                  return new Bonsai_Forms_Internal.GroupedF({
                      typ: v.value0.typ,
                      name: v.value0.name,
                      message: new Data_Maybe.Just(s),
                      attribs: v.value0.attribs,
                      inputs: v.value0.inputs
                  }, v.value1);
              };
              if (v instanceof Bonsai_Forms_Internal.CustomControlF) {
                  return new Bonsai_Forms_Internal.CustomControlF({
                      name: v.value0.name,
                      label: v.value0.label,
                      message: new Data_Maybe.Just(s),
                      markup: v.value0.markup
                  }, v.value1);
              };
              return v;
          };
          return Control_Monad_Free.hoistFree(go)(elem);
      };
  };
  var withLegend = function (efn) {
      return function (s) {
          return function (elem) {
              var go = function (v) {
                  if (v instanceof Bonsai_Forms_Internal.FieldsetF) {
                      return new Bonsai_Forms_Internal.FieldsetF({
                          name: v.value0.name,
                          legend: new Data_Maybe.Just(s),
                          attribs: v.value0.attribs,
                          content: v.value0.content
                      }, v.value1);
                  };
                  if (v instanceof Bonsai_Forms_Internal.FormF) {
                      return new Bonsai_Forms_Internal.FormF({
                          name: v.value0.name,
                          legend: new Data_Maybe.Just(s),
                          attribs: v.value0.attribs,
                          content: v.value0.content
                      }, v.value1);
                  };
                  return v;
              };
              return Control_Monad_Free.hoistFree(go)(efn(elem));
          };
      };
  };
  var simpleSelectMarkup = function (dictFoldable) {
      return function (model) {
          return function (opts) {
              return function (name) {
                  return Bonsai_Html_Internal.withAttribute(Bonsai_Html_Internal.hasAttributeMarkupF)(Bonsai_Html_Elements.select)(Bonsai_VirtualDom.on("change")(function ($21) {
                      return Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Bonsai_Types.Cmd.create)(Bonsai_Forms_Model.targetSelectedOptions(name)($21));
                  }))(Data_Foldable.for_(Control_Monad_Free.freeApplicative)(dictFoldable)(opts)(function (opt) {
                      return Bonsai_Html_Internal.withAttribute(Bonsai_Html_Internal.hasAttributeMarkupF)(Bonsai_Html_Internal.withAttribute(Bonsai_Html_Internal.hasAttributeMarkupF)(Bonsai_Html_Elements.option)(Bonsai_Html_Attributes.value(Data_Tuple.fst(opt))))(Bonsai_Html_Attributes.selected(Bonsai_Forms_Model.lookupChecked(name)(Data_Tuple.fst(opt))(model)))(Bonsai_Html_Internal.text(Data_Tuple.snd(opt)));
                  }));
              };
          };
      };
  };
  var input = function (typ) {
      return function (name) {
          return function (label) {
              return Control_Monad_Free.liftF(new Bonsai_Forms_Internal.InputF({
                  typ: typ,
                  name: name,
                  label: label,
                  attribs: Data_CatList.empty,
                  message: Data_Maybe.Nothing.value
              }, Data_Unit.unit));
          };
      };
  };                                                         
  var numberInput = input(Bonsai_Forms_Internal.INumber.value);    
  var rangeInput = input(Bonsai_Forms_Internal.IRange.value);  
  var telInput = input(Bonsai_Forms_Internal.ITel.value);
  var textInput = input(Bonsai_Forms_Internal.IText.value);
  var textareaInput = input(Bonsai_Forms_Internal.ITextarea.value);
  var urlInput = input(Bonsai_Forms_Internal.IUrl.value);  
  var grouped = function (typ) {
      return function (name) {
          return function (inputs) {
              return Control_Monad_Free.liftF(new Bonsai_Forms_Internal.GroupedF({
                  typ: typ,
                  name: name,
                  inputs: inputs,
                  attribs: Data_CatList.empty,
                  message: Data_Maybe.Nothing.value
              }, Data_Unit.unit));
          };
      };
  };
  var radioInput = grouped(Bonsai_Forms_Internal.IRadio.value);
  var form = function (name) {
      return function (content) {
          return Control_Monad_Free.liftF(new Bonsai_Forms_Internal.FormF({
              name: name,
              content: content,
              legend: Data_Maybe.Nothing.value,
              attribs: Data_CatList.empty
          }, Data_Unit.unit));
      };
  };                                                         
  var datetimeLocalInput = input(Bonsai_Forms_Internal.IDatetimeLocal.value);
  var dateInput = input(Bonsai_Forms_Internal.IDate.value);
  var customControl = function (name) {
      return function (label) {
          return function (markup) {
              return Control_Monad_Free.liftF(new Bonsai_Forms_Internal.CustomControlF({
                  name: name,
                  label: label,
                  markup: markup,
                  message: Data_Maybe.Nothing.value
              }, Data_Unit.unit));
          };
      };
  };
  var simpleSelect = function (dictFoldable) {
      return function (name) {
          return function (label) {
              return function (model) {
                  return function (opts) {
                      return customControl(name)(label)(simpleSelectMarkup(dictFoldable)(model)(opts));
                  };
              };
          };
      };
  };
  var colorInput = input(Bonsai_Forms_Internal.IColor.value);
  var checkboxInput = grouped(Bonsai_Forms_Internal.ICheckbox.value);
  exports["form"] = form;
  exports["withMessage"] = withMessage;
  exports["withLegend"] = withLegend;
  exports["textInput"] = textInput;
  exports["numberInput"] = numberInput;
  exports["colorInput"] = colorInput;
  exports["rangeInput"] = rangeInput;
  exports["telInput"] = telInput;
  exports["urlInput"] = urlInput;
  exports["dateInput"] = dateInput;
  exports["datetimeLocalInput"] = datetimeLocalInput;
  exports["checkboxInput"] = checkboxInput;
  exports["radioInput"] = radioInput;
  exports["textareaInput"] = textareaInput;
  exports["customControl"] = customControl;
  exports["simpleSelectMarkup"] = simpleSelectMarkup;
  exports["simpleSelect"] = simpleSelect;
})(PS["Bonsai.Forms"] = PS["Bonsai.Forms"] || {});
(function(exports) {
    "use strict";

  exports.toCharCode = function (c) {
    return c.charCodeAt(0);
  };

  exports.fromCharCode = function (c) {
    return String.fromCharCode(c);
  };
})(PS["Data.Enum"] = PS["Data.Enum"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Enum"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unfoldable1 = PS["Data.Unfoldable1"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Enum = function (Ord0, pred, succ) {
      this.Ord0 = Ord0;
      this.pred = pred;
      this.succ = succ;
  };
  var BoundedEnum = function (Bounded0, Enum1, cardinality, fromEnum, toEnum) {
      this.Bounded0 = Bounded0;
      this.Enum1 = Enum1;
      this.cardinality = cardinality;
      this.fromEnum = fromEnum;
      this.toEnum = toEnum;
  };
  var toEnum = function (dict) {
      return dict.toEnum;
  };
  var succ = function (dict) {
      return dict.succ;
  }; 
  var pred = function (dict) {
      return dict.pred;
  };              
  var fromEnum = function (dict) {
      return dict.fromEnum;
  };
  var defaultSucc = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) + 1 | 0);
          };
      };
  };
  var defaultPred = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) - 1 | 0);
          };
      };
  };
  var charToEnum = function (v) {
      if (v >= Data_Bounded.bottom(Data_Bounded.boundedInt) && v <= Data_Bounded.top(Data_Bounded.boundedInt)) {
          return new Data_Maybe.Just($foreign.fromCharCode(v));
      };
      return Data_Maybe.Nothing.value;
  };
  var enumChar = new Enum(function () {
      return Data_Ord.ordChar;
  }, defaultPred(charToEnum)($foreign.toCharCode), defaultSucc(charToEnum)($foreign.toCharCode));
  var cardinality = function (dict) {
      return dict.cardinality;
  }; 
  var boundedEnumChar = new BoundedEnum(function () {
      return Data_Bounded.boundedChar;
  }, function () {
      return enumChar;
  }, $foreign.toCharCode(Data_Bounded.top(Data_Bounded.boundedChar)) - $foreign.toCharCode(Data_Bounded.bottom(Data_Bounded.boundedChar)) | 0, $foreign.toCharCode, charToEnum);
  exports["Enum"] = Enum;
  exports["succ"] = succ;
  exports["pred"] = pred;
  exports["BoundedEnum"] = BoundedEnum;
  exports["cardinality"] = cardinality;
  exports["toEnum"] = toEnum;
  exports["fromEnum"] = fromEnum;
  exports["defaultSucc"] = defaultSucc;
  exports["defaultPred"] = defaultPred;
  exports["enumChar"] = enumChar;
  exports["boundedEnumChar"] = boundedEnumChar;
})(PS["Data.Enum"] = PS["Data.Enum"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Enum = PS["Data.Enum"];
  var Data_Maybe = PS["Data.Maybe"];                 
  var toCharCode = Data_Enum.fromEnum(Data_Enum.boundedEnumChar);
  var fromCharCode = Data_Enum.toEnum(Data_Enum.boundedEnumChar);
  exports["toCharCode"] = toCharCode;
  exports["fromCharCode"] = fromCharCode;
})(PS["Data.Char"] = PS["Data.Char"] || {});
(function(exports) {
    "use strict";

  exports.defer = function (thunk) {
    var v = null;
    return function() {
      if (thunk === undefined) return v;

      v = thunk();
      thunk = undefined; // eslint-disable-line no-param-reassign
      return v;
    };
  };

  exports.force = function (l) {
    return l();
  };
})(PS["Data.Lazy"] = PS["Data.Lazy"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Lazy"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var functorLazy = new Data_Functor.Functor(function (f) {
      return function (l) {
          return $foreign.defer(function (v) {
              return f($foreign.force(l));
          });
      };
  });
  var applyLazy = new Control_Apply.Apply(function () {
      return functorLazy;
  }, function (f) {
      return function (x) {
          return $foreign.defer(function (v) {
              return $foreign.force(f)($foreign.force(x));
          });
      };
  });
  var bindLazy = new Control_Bind.Bind(function () {
      return applyLazy;
  }, function (l) {
      return function (f) {
          return $foreign.defer(function (v) {
              return $foreign.force(f($foreign.force(l)));
          });
      };
  });
  exports["functorLazy"] = functorLazy;
  exports["applyLazy"] = applyLazy;
  exports["bindLazy"] = bindLazy;
  exports["defer"] = $foreign.defer;
  exports["force"] = $foreign.force;
})(PS["Data.Lazy"] = PS["Data.Lazy"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Char = PS["Data.Char"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Generic_Rep = PS["Data.Generic.Rep"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Lazy = PS["Data.Lazy"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_String_CodeUnits = PS["Data.String.CodeUnits"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var NatTrie = (function () {
      function NatTrie(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      NatTrie.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new NatTrie(value0, value1, value2);
              };
          };
      };
      return NatTrie;
  })();
  var Tabulate = function (tabulate) {
      this.tabulate = tabulate;
  }; 
  var tabulateNat = new Tabulate((function () {
      var tabulateImpl = function (f) {
          var walk = function (v) {
              return function (v1) {
                  if (v instanceof Data_List_Types.Nil) {
                      return v1.value0;
                  };
                  if (v instanceof Data_List_Types.Cons && !v.value0) {
                      return Control_Bind.bind(Data_Lazy.bindLazy)(v1.value1)(walk(v.value1));
                  };
                  if (v instanceof Data_List_Types.Cons && v.value0) {
                      return Control_Bind.bind(Data_Lazy.bindLazy)(v1.value2)(walk(v.value1));
                  };
                  throw new Error("Failed pattern match at Data.Function.Memoize line 137, column 11 - line 137, column 64: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
          var build = function (n) {
              return new NatTrie(Data_Lazy.defer(function (v) {
                  return f(n);
              }), Data_Lazy.defer(function (v) {
                  return build(n * 2 | 0);
              }), Data_Lazy.defer(function (v) {
                  return build((n * 2 | 0) + 1 | 0);
              }));
          };
          var trie = build(0);
          var bits = (function () {
              var bits$prime = function ($copy_acc) {
                  return function ($copy_v) {
                      var $tco_var_acc = $copy_acc;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(acc, v) {
                          if (v === 0) {
                              $tco_done = true;
                              return acc;
                          };
                          $tco_var_acc = new Data_List_Types.Cons((v & 1) !== 0, acc);
                          $copy_v = v >>> 1;
                          return;
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_acc, $copy_v);
                      };
                      return $tco_result;
                  };
              };
              return bits$prime(Data_List_Types.Nil.value);
          })();
          var go = function (n) {
              return walk(bits(n))(trie);
          };
          return go;
      };
      return tabulateImpl;
  })());
  var tabulate = function (dict) {
      return dict.tabulate;
  };
  var tabulateChar = new Tabulate(function (f) {
      var f1 = tabulate(tabulateNat)(function ($91) {
          return f(Data_Maybe.fromJust()(Data_Char.fromCharCode($91)));
      });
      return function ($92) {
          return f1(Data_Char.toCharCode($92));
      };
  });
  var tabulateMaybe = function (dictTabulate) {
      return new Tabulate(function (f) {
          var n = Data_Lazy.defer(function (v) {
              return f(Data_Maybe.Nothing.value);
          });
          var j = tabulate(dictTabulate)(function ($97) {
              return f(Data_Maybe.Just.create($97));
          });
          return function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return n;
              };
              if (v instanceof Data_Maybe.Just) {
                  return j(v.value0);
              };
              throw new Error("Failed pattern match at Data.Function.Memoize line 67, column 19 - line 69, column 35: " + [ v.constructor.name ]);
          };
      });
  };
  var tabulateTuple = function (dictTabulate) {
      return function (dictTabulate1) {
          return new Tabulate(function (f) {
              var f$prime = tabulate(dictTabulate)(function (a) {
                  return tabulate(dictTabulate1)(function (b) {
                      return f(new Data_Tuple.Tuple(a, b));
                  });
              });
              return function (v) {
                  return Control_Bind.bind(Data_Lazy.bindLazy)(f$prime(v.value0))(function (v1) {
                      return v1(v.value1);
                  });
              };
          });
      };
  };
  var tabulateList = function (dictTabulate) {
      return new Tabulate(function (f) {
          var toList = function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return Data_List_Types.Nil.value;
              };
              if (v instanceof Data_Maybe.Just) {
                  return new Data_List_Types.Cons(v.value0.value0, v.value0.value1);
              };
              throw new Error("Failed pattern match at Data.Function.Memoize line 99, column 7 - line 99, column 27: " + [ v.constructor.name ]);
          };
          var fromList = function (v) {
              if (v instanceof Data_List_Types.Nil) {
                  return Data_Maybe.Nothing.value;
              };
              if (v instanceof Data_List_Types.Cons) {
                  return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, v.value1));
              };
              throw new Error("Failed pattern match at Data.Function.Memoize line 102, column 7 - line 102, column 29: " + [ v.constructor.name ]);
          };
          var f$prime = tabulate(tabulateMaybe(tabulateTuple(dictTabulate)(tabulateList(dictTabulate))))(function ($100) {
              return f(toList($100));
          });
          return function ($101) {
              return f$prime(fromList($101));
          };
      });
  };
  var tabulateArray = function (dictTabulate) {
      return new Tabulate(function (f) {
          var f1 = tabulate(tabulateList(dictTabulate))(function ($102) {
              return f(Data_List.toUnfoldable(Data_Unfoldable.unfoldableArray)($102));
          });
          return function ($103) {
              return f1(Data_List.fromFoldable(Data_Foldable.foldableArray)($103));
          };
      });
  };
  var tabulateString = new Tabulate(function (f) {
      var f1 = tabulate(tabulateArray(tabulateChar))(function ($104) {
          return f(Data_String_CodeUnits.fromCharArray($104));
      });
      return function ($105) {
          return f1(Data_String_CodeUnits.toCharArray($105));
      };
  });
  var memoize = function (dictTabulate) {
      return function (f) {
          var f1 = tabulate(dictTabulate)(f);
          return function ($106) {
              return Data_Lazy.force(f1($106));
          };
      };
  };
  var memoize2 = function (dictTabulate) {
      return function (dictTabulate1) {
          return function (f) {
              var f1 = memoize(tabulateTuple(dictTabulate)(dictTabulate1))(Data_Tuple.uncurry(f));
              return Data_Tuple.curry(f1);
          };
      };
  };
  exports["Tabulate"] = Tabulate;
  exports["tabulate"] = tabulate;
  exports["memoize"] = memoize;
  exports["memoize2"] = memoize2;
  exports["tabulateChar"] = tabulateChar;
  exports["tabulateString"] = tabulateString;
  exports["tabulateMaybe"] = tabulateMaybe;
  exports["tabulateTuple"] = tabulateTuple;
  exports["tabulateList"] = tabulateList;
  exports["tabulateArray"] = tabulateArray;
  exports["tabulateNat"] = tabulateNat;
})(PS["Data.Function.Memoize"] = PS["Data.Function.Memoize"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Bonsai = PS["Bonsai"];
  var Bonsai_EventHandlers = PS["Bonsai.EventHandlers"];
  var Bonsai_Forms_Internal = PS["Bonsai.Forms.Internal"];
  var Bonsai_Forms_Model = PS["Bonsai.Forms.Model"];
  var Bonsai_Html = PS["Bonsai.Html"];
  var Bonsai_Html_Attributes = PS["Bonsai.Html.Attributes"];
  var Bonsai_Html_Elements = PS["Bonsai.Html.Elements"];
  var Bonsai_Html_Events = PS["Bonsai.Html.Events"];
  var Bonsai_Html_Internal = PS["Bonsai.Html.Internal"];
  var Bonsai_VirtualDom = PS["Bonsai.VirtualDom"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Free = PS["Control.Monad.Free"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_CatList = PS["Data.CatList"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Memoize = PS["Data.Function.Memoize"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Tuple = PS["Data.Tuple"];
  var Foreign = PS["Foreign"];
  var Prelude = PS["Prelude"];                 
  var formSingleHandler = function (v) {
      return function (name) {
          return Bonsai_EventHandlers.targetValueHandler(Bonsai_Forms_Model.FormSingle.create(name));
      };
  };
  var constFormOK = Bonsai_EventHandlers.constHandler(Bonsai_Forms_Model.FormOK.value);
  var constFormCancel = Bonsai_EventHandlers.constHandler(Bonsai_Forms_Model.FormCancel.value);
  var alignedForm = function (idPrefix) {
      return function (model) {
          return function (content) {
              var transformMessage = function (msg) {
                  return Data_Foldable.for_(Control_Monad_Free.freeApplicative)(Data_Foldable.foldableMaybe)(msg)(function ($20) {
                      return Bonsai_Html_Internal.withAttribute(Bonsai_Html_Internal.hasAttributeMarkupF)(Bonsai_Html_Elements.span)(Bonsai_Html_Attributes.cls("pure-form-message-inline"))(Bonsai_Html_Internal.text($20));
                  });
              };
              var transformLegend = function (ms) {
                  return Data_Foldable.for_(Control_Monad_Free.freeApplicative)(Data_Foldable.foldableMaybe)(ms)(function ($21) {
                      return Bonsai_Html_Elements.legend(Bonsai_Html_Internal.text($21));
                  });
              };
              var transformGrouped = function (n) {
                  return function (typ) {
                      return function (props) {
                          return function (inputs) {
                              var changeHandler = function (tup) {
                                  return function (b) {
                                      if (typ instanceof Bonsai_Forms_Internal.ICheckbox) {
                                          return new Bonsai_Forms_Model.FormCheck(n, Data_Tuple.fst(tup), b);
                                      };
                                      return new Bonsai_Forms_Model.FormSingle(n, Data_Tuple.fst(tup));
                                  };
                              };
                              return Data_Foldable.for_(Control_Monad_Free.freeApplicative)(Data_Foldable.foldableArray)(inputs)(function (tup) {
                                  return Bonsai_Html_Internal.withAttribute(Bonsai_Html_Internal.hasAttributeMarkupF)(Bonsai_Html_Elements.label)(Bonsai_Html_Attributes.cls("pure-" + Data_Show.show(Bonsai_Forms_Internal.showInputTyp)(typ)))(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(Bonsai_Html_Internal.withAttribute(Bonsai_Html_Internal.hasAttributeMarkup)(Bonsai_Html_Internal.withAttribute(Bonsai_Html_Internal.hasAttributeMarkup)(Bonsai_Html_Internal.withAttribute(Bonsai_Html_Internal.hasAttributeMarkup)(Bonsai_Html_Internal.withAttribute(Bonsai_Html_Internal.hasAttributeMarkup)(Bonsai_Html_Internal.withAttribute(Bonsai_Html_Internal.hasAttributeMarkup)(Bonsai_Html_Internal.withAttributes(Bonsai_Html_Internal.hasAttributeMarkup)(Bonsai_Html_Elements.input)(props))(Bonsai_Html_Attributes.typ(Data_Show.show(Bonsai_Forms_Internal.showInputTyp)(typ))))(Bonsai_Html_Attributes.name(n)))(Bonsai_Html_Events.onCheckedChange(changeHandler(tup))))(Bonsai_Html_Attributes.checked(Bonsai_Forms_Model.lookupChecked(n)(Data_Tuple.fst(tup))(model))))(Bonsai_Html_Attributes.value(Data_Tuple.fst(tup))))(function () {
                                      return Bonsai_Html_Internal.text(" " + Data_Tuple.snd(tup));
                                  }));
                              });
                          };
                      };
                  };
              };
              var transformControl = function (n) {
                  return function (id) {
                      return function (label) {
                          return function (message) {
                              return function (markup) {
                                  return Bonsai_Html_Internal.withAttribute(Bonsai_Html_Internal.hasAttributeMarkupF)(Bonsai_Html_Elements.div)(Bonsai_Html_Attributes.cls("pure-control-group"))(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(Bonsai_Html_Internal.withAttribute(Bonsai_Html_Internal.hasAttributeMarkupF)(Bonsai_Html_Elements.label)(Bonsai_Html_Attributes["for"](id))(Bonsai_Html_Internal.text(label)))(function () {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(Bonsai_Html_Internal.withAttribute(Bonsai_Html_Internal.hasAttributeMarkup)(markup)(Bonsai_Html_Attributes.id(id)))(function () {
                                          return transformMessage(message);
                                      });
                                  }));
                              };
                          };
                      };
                  };
              };
              var transformInput = function (n) {
                  return function (id) {
                      return function (i) {
                          return transformControl(n)(id)(i.label)(i.message)(Bonsai_Html_Internal.withAttribute(Bonsai_Html_Internal.hasAttributeMarkup)(Bonsai_Html_Internal.withAttribute(Bonsai_Html_Internal.hasAttributeMarkup)(Bonsai_Html_Internal.withAttribute(Bonsai_Html_Internal.hasAttributeMarkup)(Bonsai_Html_Internal.withAttributes(Bonsai_Html_Internal.hasAttributeMarkup)(Bonsai_Html_Elements.input)(i.attribs))(Bonsai_Html_Attributes.typ(Data_Show.show(Bonsai_Forms_Internal.showInputTyp)(i.typ))))(Bonsai_VirtualDom.on("input")(Data_Function_Memoize.memoize2(Data_Function_Memoize.tabulateString)(Data_Function_Memoize.tabulateString)(formSingleHandler)(id)(n))))(Bonsai_Html_Attributes.value(Data_Maybe.fromMaybe("")(Bonsai_Forms_Model.lookup(n)(model)))));
                      };
                  };
              };
              var transformTextarea = function (n) {
                  return function (id) {
                      return function (i) {
                          return transformControl(n)(id)(i.label)(i.message)(Bonsai_Html_Internal.withAttribute(Bonsai_Html_Internal.hasAttributeMarkup)(Bonsai_Html_Internal.withAttribute(Bonsai_Html_Internal.hasAttributeMarkup)(Bonsai_Html_Internal.withAttributes(Bonsai_Html_Internal.hasAttributeMarkup)(Bonsai_Html_Elements.textarea)(i.attribs))(Bonsai_VirtualDom.on("input")(Data_Function_Memoize.memoize2(Data_Function_Memoize.tabulateString)(Data_Function_Memoize.tabulateString)(formSingleHandler)(id)(n))))(Bonsai_Html_Attributes.value(Data_Maybe.fromMaybe("")(Bonsai_Forms_Model.lookup(n)(model)))));
                      };
                  };
              };
              var prefix = function (n) {
                  return Data_Maybe.maybe(n)(function (p) {
                      return Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)("_")([ p, n ]);
                  })(idPrefix);
              };
              var transformF = function (v) {
                  return function (v1) {
                      if (v1 instanceof Bonsai_Forms_Internal.EmptyF) {
                          return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(v1.value0);
                      };
                      if (v1 instanceof Bonsai_Forms_Internal.CustomMarkupF) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(v1.value0)(function () {
                              return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(v1.value1);
                          });
                      };
                      if (v1 instanceof Bonsai_Forms_Internal.FormF) {
                          var ns$prime = Data_CatList.snoc(v)(v1.value0.name);
                          var c = transform(ns$prime)(v1.value0.content);
                          var n = Data_Foldable.intercalate(Data_CatList.foldableCatList)(Data_Monoid.monoidString)("_")(ns$prime);
                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(Bonsai_Html_Internal.withAttribute(Bonsai_Html_Internal.hasAttributeKeyedContentF)(Bonsai_Html_Internal.withAttribute(Bonsai_Html_Internal.hasAttributeKeyedContentF)(Bonsai_Html_Internal.withAttributes(Bonsai_Html_Internal.hasAttributeKeyedContentF)(Bonsai_Html_Internal.keyedElement("form"))(v1.value0.attribs))(Bonsai_Html_Attributes.cls("pure-form pure-form-aligned")))(Bonsai_VirtualDom.onWithOptions(Bonsai_Html_Events.preventDefaultStopPropagation)("submit")(constFormOK))(Bonsai_Html_Internal.keyed(n)(Bonsai_Html_Internal.render(Bonsai_Html_Elements.fieldset(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(transformLegend(v1.value0.legend))(function () {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(c)(function () {
                                  return Bonsai_Html_Internal.withAttribute(Bonsai_Html_Internal.hasAttributeMarkupF)(Bonsai_Html_Elements.div)(Bonsai_Html_Attributes.cls("pure-controls"))(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(Bonsai_Html_Internal.withAttribute(Bonsai_Html_Internal.hasAttributeMarkupF)(Bonsai_Html_Internal.withAttribute(Bonsai_Html_Internal.hasAttributeMarkupF)(Bonsai_Html_Elements.button)(Bonsai_Html_Attributes.typ("submit")))(Bonsai_Html_Attributes.cls("pure-button pure-button-primary"))(Bonsai_Html_Internal.text("OK")))(function () {
                                      return Bonsai_Html_Internal.withAttribute(Bonsai_Html_Internal.hasAttributeMarkupF)(Bonsai_Html_Internal.withAttribute(Bonsai_Html_Internal.hasAttributeMarkupF)(Bonsai_Html_Internal.withAttribute(Bonsai_Html_Internal.hasAttributeMarkupF)(Bonsai_Html_Elements.button)(Bonsai_Html_Attributes.typ("button")))(Bonsai_Html_Attributes.cls("pure-button")))(Bonsai_VirtualDom.on("click")(constFormCancel))(Bonsai_Html_Internal.text("Cancel"));
                                  }));
                              });
                          }))))))(function () {
                              return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(v1.value1);
                          });
                      };
                      if (v1 instanceof Bonsai_Forms_Internal.FieldsetF) {
                          var ns$prime = Data_CatList.snoc(v)(v1.value0.name);
                          var c = transform(ns$prime)(v1.value0.content);
                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(Bonsai_Html_Elements.fieldset(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(transformLegend(v1.value0.legend))(function () {
                              return c;
                          })))(function () {
                              return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(v1.value1);
                          });
                      };
                      if (v1 instanceof Bonsai_Forms_Internal.InputF) {
                          var n = Data_Foldable.intercalate(Data_CatList.foldableCatList)(Data_Monoid.monoidString)("_")(Data_CatList.snoc(v)(v1.value0.name));
                          var id = prefix(n);
                          if (v1.value0.typ instanceof Bonsai_Forms_Internal.IRadio) {
                              return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(v1.value1);
                          };
                          if (v1.value0.typ instanceof Bonsai_Forms_Internal.ICheckbox) {
                              return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(v1.value1);
                          };
                          if (v1.value0.typ instanceof Bonsai_Forms_Internal.IFile) {
                              return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(v1.value1);
                          };
                          if (v1.value0.typ instanceof Bonsai_Forms_Internal.ITextarea) {
                              return Control_Apply.applySecond(Control_Monad_Free.freeApply)(transformTextarea(n)(id)(v1.value0))(Control_Applicative.pure(Control_Monad_Free.freeApplicative)(v1.value1));
                          };
                          return Control_Apply.applySecond(Control_Monad_Free.freeApply)(transformInput(n)(id)(v1.value0))(Control_Applicative.pure(Control_Monad_Free.freeApplicative)(v1.value1));
                      };
                      if (v1 instanceof Bonsai_Forms_Internal.GroupedF) {
                          var n = Data_Foldable.intercalate(Data_CatList.foldableCatList)(Data_Monoid.monoidString)("_")(Data_CatList.snoc(v)(v1.value0.name));
                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(Bonsai_Html_Internal.withAttribute(Bonsai_Html_Internal.hasAttributeMarkupF)(Bonsai_Html_Elements.div)(Bonsai_Html_Attributes.cls("pure-controls"))(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(transformGrouped(n)(v1.value0.typ)(v1.value0.attribs)(v1.value0.inputs))(function () {
                              return transformMessage(v1.value0.message);
                          })))(function () {
                              return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(v1.value1);
                          });
                      };
                      if (v1 instanceof Bonsai_Forms_Internal.CustomControlF) {
                          var n = Data_Foldable.intercalate(Data_CatList.foldableCatList)(Data_Monoid.monoidString)("_")(Data_CatList.snoc(v)(v1.value0.name));
                          var id = prefix(n);
                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(transformControl(n)(id)(v1.value0.label)(v1.value0.message)(v1.value0.markup(n)))(function () {
                              return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(v1.value1);
                          });
                      };
                      throw new Error("Failed pattern match at Bonsai.Forms.PureCss line 41, column 5 - line 41, column 82: " + [ v.constructor.name, v1.constructor.name ]);
                  };
              };
              var transform = function (ns) {
                  return function (c) {
                      return Control_Monad_Free.substFree(transformF(ns))(c);
                  };
              };
              return transform(Data_CatList.empty)(content);
          };
      };
  };
  exports["alignedForm"] = alignedForm;
})(PS["Bonsai.Forms.PureCss"] = PS["Bonsai.Forms.PureCss"] || {});
(function(exports) {
    "use strict";

  function id(x) {
    return x;
  }                      
  exports.fromObject = id;

  exports.stringify = function (j) {
    return JSON.stringify(j);
  };                        

  function isArray(a) {
    return objToString.call(a) === "[object Array]";
  }
})(PS["Data.Argonaut.Core"] = PS["Data.Argonaut.Core"] || {});
(function(exports) {
    "use strict";

  exports.empty = {};

  function toArrayWithKey(f) {
    return function (m) {
      var r = [];
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r.push(f(k)(m[k]));
        }
      }
      return r;
    };
  }
})(PS["Foreign.Object"] = PS["Foreign.Object"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Foreign.Object"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Monad_ST_Internal = PS["Control.Monad.ST.Internal"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Foreign_Object_ST = PS["Foreign.Object.ST"];
  var Prelude = PS["Prelude"];
  exports["empty"] = $foreign.empty;
})(PS["Foreign.Object"] = PS["Foreign.Object"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Argonaut.Core"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Foreign_Object = PS["Foreign.Object"];
  var Prelude = PS["Prelude"];                  
  var jsonEmptyObject = $foreign.fromObject(Foreign_Object.empty);
  exports["jsonEmptyObject"] = jsonEmptyObject;
  exports["stringify"] = $foreign.stringify;
})(PS["Data.Argonaut.Core"] = PS["Data.Argonaut.Core"] || {});
(function(exports) {
    "use strict";

  exports._jsonParser = function (fail, succ, s) {
    try {
      return succ(JSON.parse(s));
    }
    catch (e) {
      return fail(e.message);
    }
  };
})(PS["Data.Argonaut.Parser"] = PS["Data.Argonaut.Parser"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Argonaut.Parser"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Either = PS["Data.Either"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];                 
  var jsonParser = function (j) {
      return $foreign._jsonParser(Data_Either.Left.create, Data_Either.Right.create, j);
  };
  exports["jsonParser"] = jsonParser;
})(PS["Data.Argonaut.Parser"] = PS["Data.Argonaut.Parser"] || {});
(function(exports) {
    "use strict";

  exports.joinWith = function (s) {
    return function (xs) {
      return xs.join(s);
    };
  };
})(PS["Data.String.Common"] = PS["Data.String.Common"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.String.Common"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_String_Pattern = PS["Data.String.Pattern"];
  var Prelude = PS["Prelude"];
  exports["joinWith"] = $foreign.joinWith;
})(PS["Data.String.Common"] = PS["Data.String.Common"] || {});
(function(exports) {
  /* globals exports, JSON */
  "use strict";                                         
  exports.unsafeEncodeURIComponent = encodeURIComponent;
})(PS["Global.Unsafe"] = PS["Global.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Global.Unsafe"];
  exports["unsafeEncodeURIComponent"] = $foreign.unsafeEncodeURIComponent;
})(PS["Global.Unsafe"] = PS["Global.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_String_Common = PS["Data.String.Common"];
  var Data_Tuple = PS["Data.Tuple"];
  var Global_Unsafe = PS["Global.Unsafe"];
  var Prelude = PS["Prelude"];
  var toArray = function (v) {
      return v;
  };                                                                                                                 
  var encode = (function () {
      var encodePart = function (v) {
          if (v.value1 instanceof Data_Maybe.Nothing) {
              return Global_Unsafe.unsafeEncodeURIComponent(v.value0);
          };
          if (v.value1 instanceof Data_Maybe.Just) {
              return Global_Unsafe.unsafeEncodeURIComponent(v.value0) + ("=" + Global_Unsafe.unsafeEncodeURIComponent(v.value1.value0));
          };
          throw new Error("Failed pattern match at Data.FormURLEncoded line 35, column 18 - line 37, column 89: " + [ v.constructor.name ]);
      };
      return function ($14) {
          return Data_String_Common.joinWith("&")(Data_Functor.map(Data_Functor.functorArray)(encodePart)(toArray($14)));
      };
  })();
  exports["toArray"] = toArray;
  exports["encode"] = encode;
})(PS["Data.FormURLEncoded"] = PS["Data.FormURLEncoded"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_String_Common = PS["Data.String.Common"];
  var Prelude = PS["Prelude"];                 
  var OPTIONS = (function () {
      function OPTIONS() {

      };
      OPTIONS.value = new OPTIONS();
      return OPTIONS;
  })();
  var GET = (function () {
      function GET() {

      };
      GET.value = new GET();
      return GET;
  })();
  var HEAD = (function () {
      function HEAD() {

      };
      HEAD.value = new HEAD();
      return HEAD;
  })();
  var POST = (function () {
      function POST() {

      };
      POST.value = new POST();
      return POST;
  })();
  var PUT = (function () {
      function PUT() {

      };
      PUT.value = new PUT();
      return PUT;
  })();
  var DELETE = (function () {
      function DELETE() {

      };
      DELETE.value = new DELETE();
      return DELETE;
  })();
  var TRACE = (function () {
      function TRACE() {

      };
      TRACE.value = new TRACE();
      return TRACE;
  })();
  var CONNECT = (function () {
      function CONNECT() {

      };
      CONNECT.value = new CONNECT();
      return CONNECT;
  })();
  var PROPFIND = (function () {
      function PROPFIND() {

      };
      PROPFIND.value = new PROPFIND();
      return PROPFIND;
  })();
  var PROPPATCH = (function () {
      function PROPPATCH() {

      };
      PROPPATCH.value = new PROPPATCH();
      return PROPPATCH;
  })();
  var MKCOL = (function () {
      function MKCOL() {

      };
      MKCOL.value = new MKCOL();
      return MKCOL;
  })();
  var COPY = (function () {
      function COPY() {

      };
      COPY.value = new COPY();
      return COPY;
  })();
  var MOVE = (function () {
      function MOVE() {

      };
      MOVE.value = new MOVE();
      return MOVE;
  })();
  var LOCK = (function () {
      function LOCK() {

      };
      LOCK.value = new LOCK();
      return LOCK;
  })();
  var UNLOCK = (function () {
      function UNLOCK() {

      };
      UNLOCK.value = new UNLOCK();
      return UNLOCK;
  })();
  var PATCH = (function () {
      function PATCH() {

      };
      PATCH.value = new PATCH();
      return PATCH;
  })();
  var unCustomMethod = function (v) {
      return v;
  };
  var showMethod = new Data_Show.Show(function (v) {
      if (v instanceof OPTIONS) {
          return "OPTIONS";
      };
      if (v instanceof GET) {
          return "GET";
      };
      if (v instanceof HEAD) {
          return "HEAD";
      };
      if (v instanceof POST) {
          return "POST";
      };
      if (v instanceof PUT) {
          return "PUT";
      };
      if (v instanceof DELETE) {
          return "DELETE";
      };
      if (v instanceof TRACE) {
          return "TRACE";
      };
      if (v instanceof CONNECT) {
          return "CONNECT";
      };
      if (v instanceof PROPFIND) {
          return "PROPFIND";
      };
      if (v instanceof PROPPATCH) {
          return "PROPPATCH";
      };
      if (v instanceof MKCOL) {
          return "MKCOL";
      };
      if (v instanceof COPY) {
          return "COPY";
      };
      if (v instanceof MOVE) {
          return "MOVE";
      };
      if (v instanceof LOCK) {
          return "LOCK";
      };
      if (v instanceof UNLOCK) {
          return "UNLOCK";
      };
      if (v instanceof PATCH) {
          return "PATCH";
      };
      throw new Error("Failed pattern match at Data.HTTP.Method line 40, column 1 - line 40, column 35: " + [ v.constructor.name ]);
  });
  var print = Data_Either.either(Data_Show.show(showMethod))(unCustomMethod);
  exports["OPTIONS"] = OPTIONS;
  exports["GET"] = GET;
  exports["HEAD"] = HEAD;
  exports["POST"] = POST;
  exports["PUT"] = PUT;
  exports["DELETE"] = DELETE;
  exports["TRACE"] = TRACE;
  exports["CONNECT"] = CONNECT;
  exports["PROPFIND"] = PROPFIND;
  exports["PROPPATCH"] = PROPPATCH;
  exports["MKCOL"] = MKCOL;
  exports["COPY"] = COPY;
  exports["MOVE"] = MOVE;
  exports["LOCK"] = LOCK;
  exports["UNLOCK"] = UNLOCK;
  exports["PATCH"] = PATCH;
  exports["unCustomMethod"] = unCustomMethod;
  exports["print"] = print;
  exports["showMethod"] = showMethod;
})(PS["Data.HTTP.Method"] = PS["Data.HTTP.Method"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                 
  var MediaType = function (x) {
      return x;
  }; 
  var newtypeMediaType = new Data_Newtype.Newtype(function (n) {
      return n;
  }, MediaType);
  exports["MediaType"] = MediaType;
  exports["newtypeMediaType"] = newtypeMediaType;
})(PS["Data.MediaType"] = PS["Data.MediaType"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_MediaType = PS["Data.MediaType"];           
  var applicationJSON = "application/json";
  var applicationFormURLEncoded = "application/x-www-form-urlencoded";
  exports["applicationFormURLEncoded"] = applicationFormURLEncoded;
  exports["applicationJSON"] = applicationJSON;
})(PS["Data.MediaType.Common"] = PS["Data.MediaType.Common"] || {});
(function(exports) {
    "use strict";

  exports["null"] = null;

  exports.notNull = function (x) {
    return x;
  };
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Nullable"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                 
  var toNullable = Data_Maybe.maybe($foreign["null"])($foreign.notNull);
  exports["toNullable"] = toNullable;
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Bonsai = PS["Bonsai"];
  var Bonsai_Forms_Model = PS["Bonsai.Forms.Model"];
  var Bonsai_Html = PS["Bonsai.Html"];
  var Bonsai_Html_Elements = PS["Bonsai.Html.Elements"];
  var Bonsai_Html_Internal = PS["Bonsai.Html.Internal"];
  var Bonsai_Types = PS["Bonsai.Types"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad_Free = PS["Control.Monad.Free"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_List = PS["Data.List"];
  var Data_List_NonEmpty = PS["Data.List.NonEmpty"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Map = PS["Data.Map"];
  var Data_Map_Internal = PS["Data.Map.Internal"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Show = PS["Data.Show"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];                 
  var viewModel = function (model) {
      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(Bonsai_Html_Elements.hr)(function () {
          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(Bonsai_Html_Elements.h3(Bonsai_Html_Internal.text("Last Button")))(function () {
              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(Bonsai_Html_Elements.p(Bonsai_Html_Internal.text(Data_Show.show(Data_Maybe.showMaybe(Data_Show.showString))(model.button))))(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(Bonsai_Html_Elements.h3(Bonsai_Html_Internal.text("Model")))(function () {
                      return Bonsai_Html_Elements.ul(Data_Foldable.traverse_(Control_Monad_Free.freeApplicative)(Data_List_Types.foldableList)(function (v) {
                          return Bonsai_Html_Elements.li(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(Bonsai_Html_Internal.text(v.value0))(function () {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(Bonsai_Html_Internal.text(": "))(function () {
                                  return Bonsai_Html_Internal.text(Data_Foldable.intercalate(Data_List_Types.foldableNonEmptyList)(Data_Monoid.monoidString)(", ")(v.value1));
                              });
                          }));
                      })(Data_Map_Internal.toUnfoldable(Data_List_Types.unfoldableList)(model.formModel)));
                  });
              });
          });
      });
  };
  var viewDemo = function (demoFn) {
      return function (demoModel) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(demoFn(demoModel))(function () {
              return viewModel(demoModel);
          });
      };
  };
  var update = function (v) {
      return function (model) {
          if (v instanceof Bonsai_Forms_Model.FormOK) {
              return Data_Tuple.Tuple.create(Control_Plus.empty(Bonsai_Types.cmdPlus))({
                  button: new Data_Maybe.Just("OK"),
                  formModel: model.formModel,
                  source: model.source
              });
          };
          if (v instanceof Bonsai_Forms_Model.FormCancel) {
              return Data_Tuple.Tuple.create(Control_Plus.empty(Bonsai_Types.cmdPlus))({
                  button: new Data_Maybe.Just("Cancel"),
                  formModel: model.formModel,
                  source: model.source
              });
          };
          return Data_Bifunctor.bimap(Data_Tuple.bifunctorTuple)(Control_Category.identity(Control_Category.categoryFn))(function (x) {
              return {
                  formModel: x,
                  button: model.button,
                  source: model.source
              };
          })(Bonsai_Forms_Model.updateForm(v)(model.formModel));
      };
  };
  var emptyModel = {
      button: Data_Maybe.Nothing.value,
      source: Data_Maybe.Nothing.value,
      formModel: Bonsai_Forms_Model.emptyFormModel
  };
  exports["emptyModel"] = emptyModel;
  exports["update"] = update;
  exports["viewModel"] = viewModel;
  exports["viewDemo"] = viewDemo;
})(PS["Demo.Common"] = PS["Demo.Common"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Bonsai_Forms = PS["Bonsai.Forms"];
  var Bonsai_Forms_Internal = PS["Bonsai.Forms.Internal"];
  var Bonsai_Forms_PureCss = PS["Bonsai.Forms.PureCss"];
  var Bonsai_Html = PS["Bonsai.Html"];
  var Bonsai_Html_Attributes = PS["Bonsai.Html.Attributes"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Free = PS["Control.Monad.Free"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Demo_Common = PS["Demo.Common"];
  var Prelude = PS["Prelude"];                 
  var view = function (model) {
      return Bonsai_Forms_PureCss.alignedForm(Data_Maybe.Nothing.value)(model.formModel)(Bonsai_Forms.withLegend(Bonsai_Forms.form("checkbox"))("Checkboxes ...")(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(Bonsai_Forms_Internal.withAttribute(Bonsai_Forms_Internal.hasAttributeFormDef)(Bonsai_Forms.withMessage(Bonsai_Forms.textInput("name")("Name"))("Required"))(Bonsai_Html_Attributes.required(true)))(function () {
          return Bonsai_Forms.checkboxInput("can")([ new Data_Tuple.Tuple("sing", "Can Sing"), new Data_Tuple.Tuple("dance", "Can Dance"), new Data_Tuple.Tuple("program", "Can Program") ]);
      })));
  };
  exports["view"] = view;
})(PS["Demo.Checkbox"] = PS["Demo.Checkbox"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Bonsai_Forms = PS["Bonsai.Forms"];
  var Bonsai_Forms_Internal = PS["Bonsai.Forms.Internal"];
  var Bonsai_Forms_Model = PS["Bonsai.Forms.Model"];
  var Bonsai_Forms_PureCss = PS["Bonsai.Forms.PureCss"];
  var Bonsai_Html = PS["Bonsai.Html"];
  var Bonsai_Html_Attributes = PS["Bonsai.Html.Attributes"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Free = PS["Control.Monad.Free"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Demo_Common = PS["Demo.Common"];
  var Prelude = PS["Prelude"];                 
  var emptyModel = {
      button: Data_Maybe.Nothing.value,
      source: Data_Maybe.Nothing.value,
      formModel: Bonsai_Forms_Model.insert("date_select")("opt1")(Bonsai_Forms_Model.emptyFormModel)
  };
  var demoSelect = function (model) {
      return Bonsai_Forms.simpleSelect(Data_Foldable.foldableArray)("select")("Select")(model)([ new Data_Tuple.Tuple("opt1", "Option 1"), new Data_Tuple.Tuple("opt2", "Option 2") ]);
  };
  var view = function (model) {
      return Bonsai_Forms_PureCss.alignedForm(Data_Maybe.Nothing.value)(model.formModel)(Bonsai_Forms.withLegend(Bonsai_Forms.form("date"))("Date and others that degrade to text  ...")(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(Bonsai_Forms_Internal.withAttribute(Bonsai_Forms_Internal.hasAttributeFormDef)(Bonsai_Forms.withMessage(Bonsai_Forms.dateInput("required")("Required"))("Required"))(Bonsai_Html_Attributes.required(true)))(function () {
          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(Bonsai_Forms.datetimeLocalInput("datetime")("Date/Time"))(function () {
              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(Bonsai_Forms.colorInput("color")("Color"))(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(Bonsai_Forms.telInput("tel")("Tel"))(function () {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(Bonsai_Forms.urlInput("url")("URL"))(function () {
                          return demoSelect(model.formModel);
                      });
                  });
              });
          });
      })));
  };
  exports["emptyModel"] = emptyModel;
  exports["view"] = view;
  exports["demoSelect"] = demoSelect;
})(PS["Demo.MiscInput"] = PS["Demo.MiscInput"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Bonsai_Forms = PS["Bonsai.Forms"];
  var Bonsai_Forms_Internal = PS["Bonsai.Forms.Internal"];
  var Bonsai_Forms_PureCss = PS["Bonsai.Forms.PureCss"];
  var Bonsai_Html = PS["Bonsai.Html"];
  var Bonsai_Html_Attributes = PS["Bonsai.Html.Attributes"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Free = PS["Control.Monad.Free"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Demo_Common = PS["Demo.Common"];
  var Prelude = PS["Prelude"];                 
  var view = function (model) {
      return Bonsai_Forms_PureCss.alignedForm(new Data_Maybe.Just("ShouldNotBeInModel"))(model.formModel)(Bonsai_Forms.withLegend(Bonsai_Forms.form("number"))("Number fields ...")(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(Bonsai_Forms_Internal.withAttribute(Bonsai_Forms_Internal.hasAttributeFormDef)(Bonsai_Forms.withMessage(Bonsai_Forms.numberInput("required")("Required"))("Required"))(Bonsai_Html_Attributes.required(true)))(function () {
          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(Bonsai_Forms_Internal.withAttribute(Bonsai_Forms_Internal.hasAttributeFormDef)(Bonsai_Forms_Internal.withAttribute(Bonsai_Forms_Internal.hasAttributeFormDef)(Bonsai_Forms.numberInput("minmax")("Min/max"))(Bonsai_Html_Attributes.min("1")))(Bonsai_Html_Attributes.max("10")))(function () {
              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(Bonsai_Forms_Internal.withAttribute(Bonsai_Forms_Internal.hasAttributeFormDef)(Bonsai_Forms_Internal.withAttribute(Bonsai_Forms_Internal.hasAttributeFormDef)(Bonsai_Forms_Internal.withAttribute(Bonsai_Forms_Internal.hasAttributeFormDef)(Bonsai_Forms.numberInput("step")("Step"))(Bonsai_Html_Attributes.min("1")))(Bonsai_Html_Attributes.max("10")))(Bonsai_Html_Attributes.step("0.1")))(function () {
                  return Bonsai_Forms_Internal.withAttribute(Bonsai_Forms_Internal.hasAttributeFormDef)(Bonsai_Forms_Internal.withAttribute(Bonsai_Forms_Internal.hasAttributeFormDef)(Bonsai_Forms_Internal.withAttribute(Bonsai_Forms_Internal.hasAttributeFormDef)(Bonsai_Forms.rangeInput("range")("Range"))(Bonsai_Html_Attributes.min("1")))(Bonsai_Html_Attributes.max("10")))(Bonsai_Html_Attributes.step("0.1"));
              });
          });
      })));
  };
  exports["view"] = view;
})(PS["Demo.NumberInput"] = PS["Demo.NumberInput"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Bonsai_Forms = PS["Bonsai.Forms"];
  var Bonsai_Forms_Internal = PS["Bonsai.Forms.Internal"];
  var Bonsai_Forms_Model = PS["Bonsai.Forms.Model"];
  var Bonsai_Forms_PureCss = PS["Bonsai.Forms.PureCss"];
  var Bonsai_Html = PS["Bonsai.Html"];
  var Bonsai_Html_Attributes = PS["Bonsai.Html.Attributes"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Free = PS["Control.Monad.Free"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Demo_Common = PS["Demo.Common"];
  var Prelude = PS["Prelude"];                 
  var view = function (model) {
      return Bonsai_Forms_PureCss.alignedForm(Data_Maybe.Nothing.value)(model.formModel)(Bonsai_Forms.withLegend(Bonsai_Forms.form("radio"))("Radio ...")(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(Bonsai_Forms_Internal.withAttribute(Bonsai_Forms_Internal.hasAttributeFormDef)(Bonsai_Forms.withMessage(Bonsai_Forms.textInput("name")("Name"))("Required"))(Bonsai_Html_Attributes.required(true)))(function () {
          return Bonsai_Forms.radioInput("sex")([ new Data_Tuple.Tuple("m", "Male"), new Data_Tuple.Tuple("f", "Female"), new Data_Tuple.Tuple("x", "Yes please") ]);
      })));
  };
  var emptyModel = {
      button: Data_Maybe.Nothing.value,
      source: Data_Maybe.Nothing.value,
      formModel: Bonsai_Forms_Model.insert("radio_sex")("m")(Bonsai_Forms_Model.emptyFormModel)
  };
  exports["emptyModel"] = emptyModel;
  exports["view"] = view;
})(PS["Demo.Radio"] = PS["Demo.Radio"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Bonsai_Forms = PS["Bonsai.Forms"];
  var Bonsai_Forms_Internal = PS["Bonsai.Forms.Internal"];
  var Bonsai_Forms_PureCss = PS["Bonsai.Forms.PureCss"];
  var Bonsai_Html = PS["Bonsai.Html"];
  var Bonsai_Html_Attributes = PS["Bonsai.Html.Attributes"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Free = PS["Control.Monad.Free"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Demo_Common = PS["Demo.Common"];
  var Prelude = PS["Prelude"];                 
  var view = function (model) {
      return Bonsai_Forms_PureCss.alignedForm(Data_Maybe.Nothing.value)(model.formModel)(Bonsai_Forms.withLegend(Bonsai_Forms.form("text"))("Text fields ...")(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(Bonsai_Forms_Internal.withAttribute(Bonsai_Forms_Internal.hasAttributeFormDef)(Bonsai_Forms.withMessage(Bonsai_Forms.textInput("name")("Name"))("Required"))(Bonsai_Html_Attributes.required(true)))(function () {
          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(Bonsai_Forms_Internal.withAttribute(Bonsai_Forms_Internal.hasAttributeFormDef)(Bonsai_Forms.withMessage(Bonsai_Forms.textInput("code")("Code"))("All uppercase."))(Bonsai_Html_Attributes.pattern("[A-Z]*")))(function () {
              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(Bonsai_Forms_Internal.withAttribute(Bonsai_Forms_Internal.hasAttributeFormDef)(Bonsai_Forms.textInput("noauto")("No Autocomplete"))(Bonsai_Html_Attributes.autocomplete(false)))(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(Bonsai_Forms_Internal.withAttribute(Bonsai_Forms_Internal.hasAttributeFormDef)(Bonsai_Forms.textInput("longInput")("Long input"))(Bonsai_Html_Attributes.cls("pure-u-1-2")))(function () {
                      return Bonsai_Forms_Internal.withAttribute(Bonsai_Forms_Internal.hasAttributeFormDef)(Bonsai_Forms.textareaInput("comment")("Comment"))(Bonsai_Html_Attributes.cls("pure-u-1-2"));
                  });
              });
          });
      })));
  };
  exports["view"] = view;
})(PS["Demo.TextInput"] = PS["Demo.TextInput"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Effect = PS["Effect"];
  var Effect_Aff = PS["Effect.Aff"];
  var Effect_Exception = PS["Effect.Exception"];
  var Effect_Uncurried = PS["Effect.Uncurried"];
  var Prelude = PS["Prelude"];
  var fromEffectFnAff = function (v) {
      return Effect_Aff.makeAff(function (k) {
          return function __do() {
              var v1 = v(function ($4) {
                  return k(Data_Either.Left.create($4))();
              }, function ($5) {
                  return k(Data_Either.Right.create($5))();
              });
              return function (e) {
                  return Effect_Aff.makeAff(function (k2) {
                      return function __do() {
                          v1(e, function ($6) {
                              return k2(Data_Either.Left.create($6))();
                          }, function ($7) {
                              return k2(Data_Either.Right.create($7))();
                          });
                          return Effect_Aff.nonCanceler;
                      };
                  });
              };
          };
      });
  };
  exports["fromEffectFnAff"] = fromEffectFnAff;
})(PS["Effect.Aff.Compat"] = PS["Effect.Aff.Compat"] || {});
(function(exports) {
  /* global exports */
  /* global XMLHttpRequest */
  /* global module */
  /* global process */
  "use strict";

  exports._ajax = function () {
    var platformSpecific = { };
    if (typeof module !== "undefined" && module.require && !(typeof process !== "undefined" && process.versions["electron"])) {
      // We are on node.js
      platformSpecific.newXHR = function () {
        var XHR = module.require("xhr2");
        return new XHR();
      };

      platformSpecific.fixupUrl = function (url) {
        var urllib = module.require("url");
        var u = urllib.parse(url);
        u.protocol = u.protocol || "http:";
        u.hostname = u.hostname || "localhost";
        return urllib.format(u);
      };

      platformSpecific.getResponse = function (xhr) {
        return xhr.response;
      };
    } else {
      // We are in the browser
      platformSpecific.newXHR = function () {
        return new XMLHttpRequest();
      };

      platformSpecific.fixupUrl = function (url) {
        return url || "/";
      };

      platformSpecific.getResponse = function (xhr) {
        return xhr.response;
      };
    }

    return function (mkHeader, options) {
      return function (errback, callback) {
        var xhr = platformSpecific.newXHR();
        var fixedUrl = platformSpecific.fixupUrl(options.url);
        xhr.open(options.method || "GET", fixedUrl, true, options.username, options.password);
        if (options.headers) {
          try {
            for (var i = 0, header; (header = options.headers[i]) != null; i++) {
              xhr.setRequestHeader(header.field, header.value);
            }
          } catch (e) {
            errback(e);
          }
        }
        xhr.onerror = function () {
          errback(new Error("AJAX request failed: " + options.method + " " + options.url));
        };
        xhr.onload = function () {
          callback({
            status: xhr.status,
            statusText: xhr.statusText,
            headers: xhr.getAllResponseHeaders().split("\r\n")
              .filter(function (header) {
                return header.length > 0;
              })
              .map(function (header) {
                var i = header.indexOf(":");
                return mkHeader(header.substring(0, i))(header.substring(i + 2));
              }),
            response: platformSpecific.getResponse(xhr)
          });
        };
        xhr.responseType = options.responseType;
        xhr.withCredentials = options.withCredentials;
        xhr.send(options.content);

        return function (error, cancelErrback, cancelCallback) {
          try {
            xhr.abort();
          } catch (e) {
            return cancelErrback(e);
          }
          return cancelCallback();
        };
      };
    };
  }();
})(PS["Network.HTTP.Affjax"] = PS["Network.HTTP.Affjax"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
  var Data_FormURLEncoded = PS["Data.FormURLEncoded"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_MediaType = PS["Data.MediaType"];
  var Data_MediaType_Common = PS["Data.MediaType.Common"];
  var Web_DOM_Document = PS["Web.DOM.Document"];
  var Web_File_Blob = PS["Web.File.Blob"];
  var Web_XHR_FormData = PS["Web.XHR.FormData"];                 
  var ArrayView = (function () {
      function ArrayView(value0) {
          this.value0 = value0;
      };
      ArrayView.create = function (value0) {
          return new ArrayView(value0);
      };
      return ArrayView;
  })();
  var Blob = (function () {
      function Blob(value0) {
          this.value0 = value0;
      };
      Blob.create = function (value0) {
          return new Blob(value0);
      };
      return Blob;
  })();
  var Document = (function () {
      function Document(value0) {
          this.value0 = value0;
      };
      Document.create = function (value0) {
          return new Document(value0);
      };
      return Document;
  })();
  var $$String = (function () {
      function $$String(value0) {
          this.value0 = value0;
      };
      $$String.create = function (value0) {
          return new $$String(value0);
      };
      return $$String;
  })();
  var FormData = (function () {
      function FormData(value0) {
          this.value0 = value0;
      };
      FormData.create = function (value0) {
          return new FormData(value0);
      };
      return FormData;
  })();
  var FormURLEncoded = (function () {
      function FormURLEncoded(value0) {
          this.value0 = value0;
      };
      FormURLEncoded.create = function (value0) {
          return new FormURLEncoded(value0);
      };
      return FormURLEncoded;
  })();
  var Json = (function () {
      function Json(value0) {
          this.value0 = value0;
      };
      Json.create = function (value0) {
          return new Json(value0);
      };
      return Json;
  })();
  var toMediaType = function (v) {
      if (v instanceof FormURLEncoded) {
          return new Data_Maybe.Just(Data_MediaType_Common.applicationFormURLEncoded);
      };
      if (v instanceof Json) {
          return new Data_Maybe.Just(Data_MediaType_Common.applicationJSON);
      };
      return Data_Maybe.Nothing.value;
  };
  exports["ArrayView"] = ArrayView;
  exports["Blob"] = Blob;
  exports["Document"] = Document;
  exports["String"] = $$String;
  exports["FormData"] = FormData;
  exports["FormURLEncoded"] = FormURLEncoded;
  exports["Json"] = Json;
  exports["toMediaType"] = toMediaType;
})(PS["Network.HTTP.Affjax.Request"] = PS["Network.HTTP.Affjax.Request"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_MediaType = PS["Data.MediaType"];
  var Data_MediaType_Common = PS["Data.MediaType.Common"];
  var Prelude = PS["Prelude"];
  var Web_DOM_Document = PS["Web.DOM.Document"];
  var Web_File_Blob = PS["Web.File.Blob"];                 
  var $$ArrayBuffer = (function () {
      function $$ArrayBuffer(value0) {
          this.value0 = value0;
      };
      $$ArrayBuffer.create = function (value0) {
          return new $$ArrayBuffer(value0);
      };
      return $$ArrayBuffer;
  })();
  var Blob = (function () {
      function Blob(value0) {
          this.value0 = value0;
      };
      Blob.create = function (value0) {
          return new Blob(value0);
      };
      return Blob;
  })();
  var Document = (function () {
      function Document(value0) {
          this.value0 = value0;
      };
      Document.create = function (value0) {
          return new Document(value0);
      };
      return Document;
  })();
  var Json = (function () {
      function Json(value0) {
          this.value0 = value0;
      };
      Json.create = function (value0) {
          return new Json(value0);
      };
      return Json;
  })();
  var $$String = (function () {
      function $$String(value0) {
          this.value0 = value0;
      };
      $$String.create = function (value0) {
          return new $$String(value0);
      };
      return $$String;
  })();
  var Ignore = (function () {
      function Ignore(value0) {
          this.value0 = value0;
      };
      Ignore.create = function (value0) {
          return new Ignore(value0);
      };
      return Ignore;
  })();
  var toResponseType = function (v) {
      if (v instanceof $$ArrayBuffer) {
          return "arraybuffer";
      };
      if (v instanceof Blob) {
          return "blob";
      };
      if (v instanceof Document) {
          return "document";
      };
      if (v instanceof Json) {
          return "text";
      };
      if (v instanceof $$String) {
          return "text";
      };
      if (v instanceof Ignore) {
          return "";
      };
      throw new Error("Failed pattern match at Network.HTTP.Affjax.Response line 41, column 3 - line 49, column 1: " + [ v.constructor.name ]);
  };
  var toMediaType = function (v) {
      if (v instanceof Json) {
          return new Data_Maybe.Just(Data_MediaType_Common.applicationJSON);
      };
      return Data_Maybe.Nothing.value;
  };
  var string = new $$String(Control_Category.identity(Control_Category.categoryFn));
  exports["ArrayBuffer"] = $$ArrayBuffer;
  exports["Blob"] = Blob;
  exports["Document"] = Document;
  exports["Json"] = Json;
  exports["String"] = $$String;
  exports["Ignore"] = Ignore;
  exports["string"] = string;
  exports["toResponseType"] = toResponseType;
  exports["toMediaType"] = toMediaType;
})(PS["Network.HTTP.Affjax.Response"] = PS["Network.HTTP.Affjax.Response"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_MediaType = PS["Data.MediaType"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                 
  var Accept = (function () {
      function Accept(value0) {
          this.value0 = value0;
      };
      Accept.create = function (value0) {
          return new Accept(value0);
      };
      return Accept;
  })();
  var ContentType = (function () {
      function ContentType(value0) {
          this.value0 = value0;
      };
      ContentType.create = function (value0) {
          return new ContentType(value0);
      };
      return ContentType;
  })();
  var RequestHeader = (function () {
      function RequestHeader(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      RequestHeader.create = function (value0) {
          return function (value1) {
              return new RequestHeader(value0, value1);
          };
      };
      return RequestHeader;
  })();
  var requestHeaderValue = function (v) {
      if (v instanceof Accept) {
          return Data_Newtype.unwrap(Data_MediaType.newtypeMediaType)(v.value0);
      };
      if (v instanceof ContentType) {
          return Data_Newtype.unwrap(Data_MediaType.newtypeMediaType)(v.value0);
      };
      if (v instanceof RequestHeader) {
          return v.value1;
      };
      throw new Error("Failed pattern match at Network.HTTP.RequestHeader line 29, column 1 - line 29, column 46: " + [ v.constructor.name ]);
  };
  var requestHeaderName = function (v) {
      if (v instanceof Accept) {
          return "Accept";
      };
      if (v instanceof ContentType) {
          return "Content-Type";
      };
      if (v instanceof RequestHeader) {
          return v.value0;
      };
      throw new Error("Failed pattern match at Network.HTTP.RequestHeader line 24, column 1 - line 24, column 45: " + [ v.constructor.name ]);
  };
  exports["Accept"] = Accept;
  exports["ContentType"] = ContentType;
  exports["RequestHeader"] = RequestHeader;
  exports["requestHeaderName"] = requestHeaderName;
  exports["requestHeaderValue"] = requestHeaderValue;
})(PS["Network.HTTP.RequestHeader"] = PS["Network.HTTP.RequestHeader"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                 
  var ResponseHeader = (function () {
      function ResponseHeader(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ResponseHeader.create = function (value0) {
          return function (value1) {
              return new ResponseHeader(value0, value1);
          };
      };
      return ResponseHeader;
  })();
  var responseHeader = function (field) {
      return function (value) {
          return new ResponseHeader(field, value);
      };
  };
  exports["responseHeader"] = responseHeader;
})(PS["Network.HTTP.ResponseHeader"] = PS["Network.HTTP.ResponseHeader"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Network.HTTP.Affjax"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Parallel = PS["Control.Parallel"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Argonaut_Parser = PS["Data.Argonaut.Parser"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FormURLEncoded = PS["Data.FormURLEncoded"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HTTP_Method = PS["Data.HTTP.Method"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Int = PS["Data.Int"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Data_Unit = PS["Data.Unit"];
  var Effect_Aff = PS["Effect.Aff"];
  var Effect_Aff_Compat = PS["Effect.Aff.Compat"];
  var Effect_Class = PS["Effect.Class"];
  var Effect_Exception = PS["Effect.Exception"];
  var Effect_Ref = PS["Effect.Ref"];
  var Foreign = PS["Foreign"];
  var $$Math = PS["Math"];
  var Network_HTTP_Affjax_Request = PS["Network.HTTP.Affjax.Request"];
  var Network_HTTP_Affjax_Response = PS["Network.HTTP.Affjax.Response"];
  var Network_HTTP_RequestHeader = PS["Network.HTTP.RequestHeader"];
  var Network_HTTP_ResponseHeader = PS["Network.HTTP.ResponseHeader"];
  var Network_HTTP_StatusCode = PS["Network.HTTP.StatusCode"];
  var Prelude = PS["Prelude"];
  var defaultRequest = {
      method: new Data_Either.Left(Data_HTTP_Method.GET.value),
      url: "/",
      headers: [  ],
      content: Data_Maybe.Nothing.value,
      username: Data_Maybe.Nothing.value,
      password: Data_Maybe.Nothing.value,
      withCredentials: false
  };
  var affjax = function (rt) {
      return function (req) {
          var parseJSON = function (v) {
              if (v === "") {
                  return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Argonaut_Core.jsonEmptyObject);
              };
              return Data_Either.either(function ($58) {
                  return Foreign.fail(Foreign.ForeignError.create($58));
              })(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity)))(Data_Argonaut_Parser.jsonParser(v));
          };
          var fromResponse$prime = (function () {
              if (rt instanceof Network_HTTP_Affjax_Response["ArrayBuffer"]) {
                  return Foreign.unsafeReadTagged("ArrayBuffer");
              };
              if (rt instanceof Network_HTTP_Affjax_Response.Blob) {
                  return Foreign.unsafeReadTagged("Blob");
              };
              if (rt instanceof Network_HTTP_Affjax_Response.Document) {
                  return Foreign.unsafeReadTagged("Document");
              };
              if (rt instanceof Network_HTTP_Affjax_Response.Json) {
                  return Control_Bind.composeKleisliFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(function ($59) {
                      return rt.value0(parseJSON($59));
                  })(Foreign.unsafeReadTagged("String"));
              };
              if (rt instanceof Network_HTTP_Affjax_Response["String"]) {
                  return Foreign.unsafeReadTagged("String");
              };
              if (rt instanceof Network_HTTP_Affjax_Response.Ignore) {
                  return Data_Function["const"](rt.value0(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Unit.unit)));
              };
              throw new Error("Failed pattern match at Network.HTTP.Affjax line 261, column 19 - line 267, column 51: " + [ rt.constructor.name ]);
          })();
          var extractContent = function (v) {
              if (v instanceof Network_HTTP_Affjax_Request.ArrayView) {
                  return v.value0(Foreign.unsafeToForeign);
              };
              if (v instanceof Network_HTTP_Affjax_Request.Blob) {
                  return Foreign.unsafeToForeign(v.value0);
              };
              if (v instanceof Network_HTTP_Affjax_Request.Document) {
                  return Foreign.unsafeToForeign(v.value0);
              };
              if (v instanceof Network_HTTP_Affjax_Request["String"]) {
                  return Foreign.unsafeToForeign(v.value0);
              };
              if (v instanceof Network_HTTP_Affjax_Request.FormData) {
                  return Foreign.unsafeToForeign(v.value0);
              };
              if (v instanceof Network_HTTP_Affjax_Request.FormURLEncoded) {
                  return Foreign.unsafeToForeign(Data_FormURLEncoded.encode(v.value0));
              };
              if (v instanceof Network_HTTP_Affjax_Request.Json) {
                  return Foreign.unsafeToForeign(Data_Argonaut_Core.stringify(v.value0));
              };
              throw new Error("Failed pattern match at Network.HTTP.Affjax line 235, column 20 - line 242, column 53: " + [ v.constructor.name ]);
          };
          var addHeader = function (mh) {
              return function (hs) {
                  if (mh instanceof Data_Maybe.Just && !Data_Foldable.any(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Function.on(Data_Eq.eq(Data_Eq.eqString))(Network_HTTP_RequestHeader.requestHeaderName)(mh.value0))(hs)) {
                      return Data_Array.snoc(hs)(mh.value0);
                  };
                  return hs;
              };
          };
          var headers = function (reqContent) {
              return addHeader(Data_Functor.map(Data_Maybe.functorMaybe)(Network_HTTP_RequestHeader.ContentType.create)(Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(Network_HTTP_Affjax_Request.toMediaType)(reqContent)))(addHeader(Data_Functor.map(Data_Maybe.functorMaybe)(Network_HTTP_RequestHeader.Accept.create)(Network_HTTP_Affjax_Response.toMediaType(rt)))(req.headers));
          };
          var req$prime = {
              method: Data_HTTP_Method.print(req.method),
              url: req.url,
              headers: Data_Functor.map(Data_Functor.functorArray)(function (h) {
                  return {
                      field: Network_HTTP_RequestHeader.requestHeaderName(h),
                      value: Network_HTTP_RequestHeader.requestHeaderValue(h)
                  };
              })(headers(req.content)),
              content: Data_Nullable.toNullable(Data_Functor.map(Data_Maybe.functorMaybe)(extractContent)(req.content)),
              responseType: Network_HTTP_Affjax_Response.toResponseType(rt),
              username: Data_Nullable.toNullable(req.username),
              password: Data_Nullable.toNullable(req.password),
              withCredentials: req.withCredentials
          };
          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff_Compat.fromEffectFnAff($foreign._ajax(Network_HTTP_ResponseHeader.responseHeader, req$prime)))(function (v) {
              var v1 = Control_Monad_Except.runExcept(fromResponse$prime(v.response));
              if (v1 instanceof Data_Either.Left) {
                  return Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff)(Effect_Exception.error(Data_Foldable.intercalate(Data_List_Types.foldableNonEmptyList)(Data_Monoid.monoidString)("\x0a")(Data_Functor.map(Data_List_Types.functorNonEmptyList)(Foreign.renderForeignError)(v1.value0))));
              };
              if (v1 instanceof Data_Either.Right) {
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)({
                      response: v1.value0,
                      headers: v.headers,
                      status: v.status,
                      statusText: v.statusText
                  });
              };
              throw new Error("Failed pattern match at Network.HTTP.Affjax line 217, column 3 - line 219, column 49: " + [ v1.constructor.name ]);
          });
      };
  };                                                          
  var get = function (rt) {
      return function (u) {
          return affjax(rt)({
              method: defaultRequest.method,
              url: u,
              headers: defaultRequest.headers,
              content: defaultRequest.content,
              username: defaultRequest.username,
              password: defaultRequest.password,
              withCredentials: defaultRequest.withCredentials
          });
      };
  };
  exports["defaultRequest"] = defaultRequest;
  exports["affjax"] = affjax;
  exports["get"] = get;
})(PS["Network.HTTP.Affjax"] = PS["Network.HTTP.Affjax"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Bonsai = PS["Bonsai"];
  var Bonsai_Core = PS["Bonsai.Core"];
  var Bonsai_Core_DOM = PS["Bonsai.Core.DOM"];
  var Bonsai_DOM = PS["Bonsai.DOM"];
  var Bonsai_Forms = PS["Bonsai.Forms"];
  var Bonsai_Html = PS["Bonsai.Html"];
  var Bonsai_Html_Attributes = PS["Bonsai.Html.Attributes"];
  var Bonsai_Html_Elements = PS["Bonsai.Html.Elements"];
  var Bonsai_Html_Events = PS["Bonsai.Html.Events"];
  var Bonsai_Html_Internal = PS["Bonsai.Html.Internal"];
  var Bonsai_Types = PS["Bonsai.Types"];
  var Bonsai_VirtualDom = PS["Bonsai.VirtualDom"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Monad_Free = PS["Control.Monad.Free"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Demo_Checkbox = PS["Demo.Checkbox"];
  var Demo_Common = PS["Demo.Common"];
  var Demo_MiscInput = PS["Demo.MiscInput"];
  var Demo_NumberInput = PS["Demo.NumberInput"];
  var Demo_Radio = PS["Demo.Radio"];
  var Demo_TextInput = PS["Demo.TextInput"];
  var Effect = PS["Effect"];
  var Effect_Aff = PS["Effect.Aff"];
  var Network_HTTP_Affjax = PS["Network.HTTP.Affjax"];
  var Network_HTTP_Affjax_Response = PS["Network.HTTP.Affjax.Response"];
  var Prelude = PS["Prelude"];                 
  var TextInputDemo = (function () {
      function TextInputDemo() {

      };
      TextInputDemo.value = new TextInputDemo();
      return TextInputDemo;
  })();
  var NumberInputDemo = (function () {
      function NumberInputDemo() {

      };
      NumberInputDemo.value = new NumberInputDemo();
      return NumberInputDemo;
  })();
  var MiscInputDemo = (function () {
      function MiscInputDemo() {

      };
      MiscInputDemo.value = new MiscInputDemo();
      return MiscInputDemo;
  })();
  var CheckboxDemo = (function () {
      function CheckboxDemo() {

      };
      CheckboxDemo.value = new CheckboxDemo();
      return CheckboxDemo;
  })();
  var RadioDemo = (function () {
      function RadioDemo() {

      };
      RadioDemo.value = new RadioDemo();
      return RadioDemo;
  })();
  var SetCurrent = (function () {
      function SetCurrent(value0) {
          this.value0 = value0;
      };
      SetCurrent.create = function (value0) {
          return new SetCurrent(value0);
      };
      return SetCurrent;
  })();
  var SetSource = (function () {
      function SetSource(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SetSource.create = function (value0) {
          return function (value1) {
              return new SetSource(value0, value1);
          };
      };
      return SetSource;
  })();
  var EmptyModel = (function () {
      function EmptyModel() {

      };
      EmptyModel.value = new EmptyModel();
      return EmptyModel;
  })();
  var ShowSource = (function () {
      function ShowSource(value0) {
          this.value0 = value0;
      };
      ShowSource.create = function (value0) {
          return new ShowSource(value0);
      };
      return ShowSource;
  })();
  var TextInputMsg = (function () {
      function TextInputMsg(value0) {
          this.value0 = value0;
      };
      TextInputMsg.create = function (value0) {
          return new TextInputMsg(value0);
      };
      return TextInputMsg;
  })();
  var NumberInputMsg = (function () {
      function NumberInputMsg(value0) {
          this.value0 = value0;
      };
      NumberInputMsg.create = function (value0) {
          return new NumberInputMsg(value0);
      };
      return NumberInputMsg;
  })();
  var MiscInputMsg = (function () {
      function MiscInputMsg(value0) {
          this.value0 = value0;
      };
      MiscInputMsg.create = function (value0) {
          return new MiscInputMsg(value0);
      };
      return MiscInputMsg;
  })();
  var CheckboxMsg = (function () {
      function CheckboxMsg(value0) {
          this.value0 = value0;
      };
      CheckboxMsg.create = function (value0) {
          return new CheckboxMsg(value0);
      };
      return CheckboxMsg;
  })();
  var RadioMsg = (function () {
      function RadioMsg(value0) {
          this.value0 = value0;
      };
      RadioMsg.create = function (value0) {
          return new RadioMsg(value0);
      };
      return RadioMsg;
  })();
  var wrapModel = function (model) {
      return function (demoModel) {
          if (model.active instanceof TextInputDemo) {
              return {
                  active: model.active,
                  showSource: model.showSource,
                  textInputModel: demoModel,
                  numberInputModel: model.numberInputModel,
                  miscInputModel: model.miscInputModel,
                  checkboxModel: model.checkboxModel,
                  radioModel: model.radioModel
              };
          };
          if (model.active instanceof NumberInputDemo) {
              return {
                  active: model.active,
                  showSource: model.showSource,
                  textInputModel: model.textInputModel,
                  numberInputModel: demoModel,
                  miscInputModel: model.miscInputModel,
                  checkboxModel: model.checkboxModel,
                  radioModel: model.radioModel
              };
          };
          if (model.active instanceof MiscInputDemo) {
              return {
                  active: model.active,
                  showSource: model.showSource,
                  textInputModel: model.textInputModel,
                  numberInputModel: model.numberInputModel,
                  miscInputModel: demoModel,
                  checkboxModel: model.checkboxModel,
                  radioModel: model.radioModel
              };
          };
          if (model.active instanceof CheckboxDemo) {
              return {
                  active: model.active,
                  showSource: model.showSource,
                  textInputModel: model.textInputModel,
                  numberInputModel: model.numberInputModel,
                  miscInputModel: model.miscInputModel,
                  checkboxModel: demoModel,
                  radioModel: model.radioModel
              };
          };
          if (model.active instanceof RadioDemo) {
              return {
                  active: model.active,
                  showSource: model.showSource,
                  textInputModel: model.textInputModel,
                  numberInputModel: model.numberInputModel,
                  miscInputModel: model.miscInputModel,
                  checkboxModel: model.checkboxModel,
                  radioModel: demoModel
              };
          };
          throw new Error("Failed pattern match at Main line 264, column 3 - line 269, column 50: " + [ model.active.constructor.name ]);
      };
  };
  var viewContent = function (model) {
      var mapMarkup = function (fn) {
          return function ($65) {
              return Bonsai_Html_Internal.vnode(Data_Functor.map(Bonsai_VirtualDom.functorVNode)(fn)(Bonsai_Html_Internal.render($65)));
          };
      };
      return Bonsai_Html_Internal.withStyle(Bonsai_Html_Internal.hasStyleMarkupF)(Bonsai_Html_Internal.withAttribute(Bonsai_Html_Internal.hasAttributeMarkupF)(Bonsai_Html_Elements.div_)(Bonsai_Html_Attributes.cls("l-box")))(Bonsai_Html_Attributes.style("margin-left")("2em"))((function () {
          if (model.active instanceof TextInputDemo) {
              return mapMarkup(TextInputMsg.create)(Demo_Common.viewDemo(Demo_TextInput.view)(model.textInputModel));
          };
          if (model.active instanceof NumberInputDemo) {
              return mapMarkup(NumberInputMsg.create)(Demo_Common.viewDemo(Demo_NumberInput.view)(model.numberInputModel));
          };
          if (model.active instanceof MiscInputDemo) {
              return mapMarkup(MiscInputMsg.create)(Demo_Common.viewDemo(Demo_MiscInput.view)(model.miscInputModel));
          };
          if (model.active instanceof CheckboxDemo) {
              return mapMarkup(CheckboxMsg.create)(Demo_Common.viewDemo(Demo_Checkbox.view)(model.checkboxModel));
          };
          if (model.active instanceof RadioDemo) {
              return mapMarkup(RadioMsg.create)(Demo_Common.viewDemo(Demo_Radio.view)(model.radioModel));
          };
          throw new Error("Failed pattern match at Main line 194, column 5 - line 204, column 73: " + [ model.active.constructor.name ]);
      })());
  };
  var unwrapModel = function (model) {
      if (model.active instanceof TextInputDemo) {
          return model.textInputModel;
      };
      if (model.active instanceof NumberInputDemo) {
          return model.numberInputModel;
      };
      if (model.active instanceof MiscInputDemo) {
          return model.miscInputModel;
      };
      if (model.active instanceof CheckboxDemo) {
          return model.checkboxModel;
      };
      if (model.active instanceof RadioDemo) {
          return model.radioModel;
      };
      throw new Error("Failed pattern match at Main line 255, column 3 - line 260, column 34: " + [ model.active.constructor.name ]);
  };
  var sourceFilename = function (demo) {
      var n = (function () {
          if (demo instanceof TextInputDemo) {
              return "TextInput";
          };
          if (demo instanceof NumberInputDemo) {
              return "NumberInput";
          };
          if (demo instanceof CheckboxDemo) {
              return "Checkbox";
          };
          if (demo instanceof RadioDemo) {
              return "Radio";
          };
          if (demo instanceof MiscInputDemo) {
              return "MiscInput";
          };
          throw new Error("Failed pattern match at Main line 225, column 9 - line 232, column 1: " + [ demo.constructor.name ]);
      })();
      return "src/Demo/" + (n + ".purs");
  };
  var loadCurrentSourceTask = function (model) {
      var go = function (m) {
          if (m.source instanceof Data_Maybe.Just) {
              return Control_Plus.empty(Bonsai_Types.cmdPlus);
          };
          if (m.source instanceof Data_Maybe.Nothing) {
              return Bonsai_Types.simpleTask(function (v) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(Network_HTTP_Affjax.get(Network_HTTP_Affjax_Response.string)(sourceFilename(model.active)))(function (v1) {
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(new SetSource(model.active, v1.response));
                  });
              });
          };
          throw new Error("Failed pattern match at Main line 125, column 7 - line 131, column 55: " + [ m.source.constructor.name ]);
      };
      var formModel = unwrapModel(model);
      var $45 = model.showSource && Data_Maybe.isNothing(formModel.source);
      if ($45) {
          return go(formModel);
      };
      return Control_Plus.empty(Bonsai_Types.cmdPlus);
  };
  var hashDemo = function (hash) {
      if (hash === "#text") {
          return TextInputDemo.value;
      };
      if (hash === "#number") {
          return NumberInputDemo.value;
      };
      if (hash === "#misc") {
          return MiscInputDemo.value;
      };
      if (hash === "#checkbox") {
          return CheckboxDemo.value;
      };
      if (hash === "#radio") {
          return RadioDemo.value;
      };
      return TextInputDemo.value;
  };
  var eqExample = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof TextInputDemo && y instanceof TextInputDemo) {
              return true;
          };
          if (x instanceof NumberInputDemo && y instanceof NumberInputDemo) {
              return true;
          };
          if (x instanceof MiscInputDemo && y instanceof MiscInputDemo) {
              return true;
          };
          if (x instanceof CheckboxDemo && y instanceof CheckboxDemo) {
              return true;
          };
          if (x instanceof RadioDemo && y instanceof RadioDemo) {
              return true;
          };
          return false;
      };
  });
  var viewMenu = function (model) {
      var menuItemClasses = function (ex) {
          return Bonsai_Html_Attributes.cls((function () {
              var $49 = Data_Eq.eq(eqExample)(ex)(model.active);
              if ($49) {
                  return "pure-menu-item pure-menu-selected";
              };
              return "pure-menu-item";
          })());
      };
      var item = function (demo) {
          return function (str) {
              return Bonsai_Html_Internal.withAttribute(Bonsai_Html_Internal.hasAttributeMarkupF)(Bonsai_Html_Elements.li)(menuItemClasses(demo))(Bonsai_Html_Internal.withAttribute(Bonsai_Html_Internal.hasAttributeMarkupF)(Bonsai_Html_Internal.withAttribute(Bonsai_Html_Internal.hasAttributeMarkupF)(Bonsai_Html_Internal.withAttribute(Bonsai_Html_Internal.hasAttributeMarkupF)(Bonsai_Html_Elements.a)(Bonsai_Html_Attributes.cls("pure-menu-link")))(Bonsai_Html_Attributes.href("#")))(Bonsai_Html_Events.onClickPreventDefault(new SetCurrent(demo)))(Bonsai_Html_Internal.text(str)));
          };
      };
      return Bonsai_Html_Internal.withAttribute(Bonsai_Html_Internal.hasAttributeMarkupF)(Bonsai_Html_Elements.nav)(Bonsai_Html_Attributes.cls("l-box pure-menu pure-menu-horizontal pure-menu-scrollable"))(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(Bonsai_Html_Internal.withAttribute(Bonsai_Html_Internal.hasAttributeMarkupF)(Bonsai_Html_Internal.withAttribute(Bonsai_Html_Internal.hasAttributeMarkupF)(Bonsai_Html_Internal.withAttribute(Bonsai_Html_Internal.hasAttributeMarkupF)(Bonsai_Html_Elements.a)(Bonsai_Html_Attributes.cls("pure-menu-heading pure-menu-link")))(Bonsai_Html_Attributes.target("_blank")))(Bonsai_Html_Attributes.href("https://github.com/grmble/purescript-bonsai-forms-demo/"))(Bonsai_Html_Internal.text("Forms Demo")))(function () {
          return Bonsai_Html_Internal.withAttribute(Bonsai_Html_Internal.hasAttributeMarkupF)(Bonsai_Html_Elements.ul)(Bonsai_Html_Attributes.cls("pure-menu-list"))(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(item(TextInputDemo.value)("Text Input"))(function () {
              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(item(NumberInputDemo.value)("Number Input"))(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(item(CheckboxDemo.value)("Checkbox"))(function () {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(item(RadioDemo.value)("Radio"))(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(item(MiscInputDemo.value)("Misc Input"))(function () {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(Bonsai_Html_Internal.withAttribute(Bonsai_Html_Internal.hasAttributeMarkupF)(Bonsai_Html_Elements.li)(Bonsai_Html_Attributes.cls("pure-menu-item pure-menu-link pure-form"))(Bonsai_Html_Elements.label(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(Bonsai_Html_Internal.withAttribute(Bonsai_Html_Internal.hasAttributeMarkup)(Bonsai_Html_Internal.withAttribute(Bonsai_Html_Internal.hasAttributeMarkup)(Bonsai_Html_Internal.withAttribute(Bonsai_Html_Internal.hasAttributeMarkup)(Bonsai_Html_Internal.withAttribute(Bonsai_Html_Internal.hasAttributeMarkup)(Bonsai_Html_Elements.input)(Bonsai_Html_Attributes.typ("checkbox")))(Bonsai_Html_Attributes.defaultValue("y")))(Bonsai_Html_Attributes.checked(model.showSource)))(Bonsai_Html_Events.onCheckedChange(ShowSource.create)))(function () {
                                  return Bonsai_Html_Internal.text(" Show Source");
                              }))))(function () {
                                  return Bonsai_Html_Internal.withAttribute(Bonsai_Html_Internal.hasAttributeMarkupF)(Bonsai_Html_Elements.li)(Bonsai_Html_Attributes.cls("pure-menu-item"))(Bonsai_Html_Internal.withAttribute(Bonsai_Html_Internal.hasAttributeMarkupF)(Bonsai_Html_Internal.withAttribute(Bonsai_Html_Internal.hasAttributeMarkupF)(Bonsai_Html_Internal.withAttribute(Bonsai_Html_Internal.hasAttributeMarkupF)(Bonsai_Html_Elements.a)(Bonsai_Html_Attributes.cls("pure-menu-link")))(Bonsai_Html_Attributes.href("#")))(Bonsai_Html_Events.onClickPreventDefault(EmptyModel.value))(Bonsai_Html_Internal.text("Empty Model")));
                              });
                          });
                      });
                  });
              });
          }));
      }));
  };
  var view = function (model) {
      var menuAndContent = function (klass) {
          return Bonsai_Html_Internal.withAttribute(Bonsai_Html_Internal.hasAttributeMarkupF)(Bonsai_Html_Elements.div_)(Bonsai_Html_Attributes.cls(klass))(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(Bonsai_Html_Internal.vnode(Bonsai_VirtualDom.lazy(function ($66) {
              return Bonsai_Html_Internal.render(viewMenu($66));
          })(model)))(function () {
              return viewContent(model);
          }));
      };
      return Bonsai_Html_Internal.render(Bonsai_Html_Internal.withAttribute(Bonsai_Html_Internal.hasAttributeMarkupF)(Bonsai_Html_Internal.withAttribute(Bonsai_Html_Internal.hasAttributeMarkupF)(Bonsai_Html_Elements.div_)(Bonsai_Html_Attributes.id_("bonsai-main")))(Bonsai_Html_Attributes.cls("pure-g"))((function () {
          if (model.showSource) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(menuAndContent("pure-u-1 pure-u-lg-1-2"))(function () {
                  return Bonsai_Html_Internal.withAttribute(Bonsai_Html_Internal.hasAttributeMarkupF)(Bonsai_Html_Internal.withAttribute(Bonsai_Html_Internal.hasAttributeMarkupF)(Bonsai_Html_Elements.div_)(Bonsai_Html_Attributes.id_("source")))(Bonsai_Html_Attributes.cls("pure-u-1 pure-u-lg-1-2"))(Bonsai_Html_Elements.pre_(Bonsai_Html_Internal.text(Data_Maybe.fromMaybe("Loading ...")((unwrapModel(model)).source))));
              });
          };
          return menuAndContent("pure-u-1");
      })()));
  };
  var emptyModel = {
      active: TextInputDemo.value,
      showSource: false,
      textInputModel: Demo_Common.emptyModel,
      numberInputModel: Demo_Common.emptyModel,
      miscInputModel: Demo_MiscInput.emptyModel,
      checkboxModel: Demo_Common.emptyModel,
      radioModel: Demo_Radio.emptyModel
  };
  var demoHash = function (demo) {
      if (demo instanceof TextInputDemo) {
          return "#text";
      };
      if (demo instanceof NumberInputDemo) {
          return "#number";
      };
      if (demo instanceof MiscInputDemo) {
          return "#misc";
      };
      if (demo instanceof CheckboxDemo) {
          return "#checkbox";
      };
      if (demo instanceof RadioDemo) {
          return "#radio";
      };
      throw new Error("Failed pattern match at Main line 234, column 3 - line 241, column 1: " + [ demo.constructor.name ]);
  };
  var update = function (v) {
      return function (model) {
          if (v instanceof SetCurrent) {
              var model$prime = {
                  active: v.value0,
                  checkboxModel: model.checkboxModel,
                  miscInputModel: model.miscInputModel,
                  numberInputModel: model.numberInputModel,
                  radioModel: model.radioModel,
                  showSource: model.showSource,
                  textInputModel: model.textInputModel
              };
              return new Data_Tuple.Tuple(Control_Alt.alt(Bonsai_Types.cmdAlt)(loadCurrentSourceTask(model$prime))(Bonsai_Core_DOM.locationHashCmd(demoHash(v.value0))), model$prime);
          };
          if (v instanceof SetSource) {
              var go = function (m) {
                  return function (setM) {
                      return setM({
                          button: m.button,
                          formModel: m.formModel,
                          source: new Data_Maybe.Just(v.value1)
                      });
                  };
              };
              return new Data_Tuple.Tuple(Control_Plus.empty(Bonsai_Types.cmdPlus), (function () {
                  if (v.value0 instanceof TextInputDemo) {
                      return go(model.textInputModel)(function (v1) {
                          return {
                              active: model.active,
                              showSource: model.showSource,
                              textInputModel: v1,
                              numberInputModel: model.numberInputModel,
                              miscInputModel: model.miscInputModel,
                              checkboxModel: model.checkboxModel,
                              radioModel: model.radioModel
                          };
                      });
                  };
                  if (v.value0 instanceof NumberInputDemo) {
                      return go(model.numberInputModel)(function (v1) {
                          return {
                              active: model.active,
                              showSource: model.showSource,
                              textInputModel: model.textInputModel,
                              numberInputModel: v1,
                              miscInputModel: model.miscInputModel,
                              checkboxModel: model.checkboxModel,
                              radioModel: model.radioModel
                          };
                      });
                  };
                  if (v.value0 instanceof MiscInputDemo) {
                      return go(model.miscInputModel)(function (v1) {
                          return {
                              active: model.active,
                              showSource: model.showSource,
                              textInputModel: model.textInputModel,
                              numberInputModel: model.numberInputModel,
                              miscInputModel: v1,
                              checkboxModel: model.checkboxModel,
                              radioModel: model.radioModel
                          };
                      });
                  };
                  if (v.value0 instanceof CheckboxDemo) {
                      return go(model.checkboxModel)(function (v1) {
                          return {
                              active: model.active,
                              showSource: model.showSource,
                              textInputModel: model.textInputModel,
                              numberInputModel: model.numberInputModel,
                              miscInputModel: model.miscInputModel,
                              checkboxModel: v1,
                              radioModel: model.radioModel
                          };
                      });
                  };
                  if (v.value0 instanceof RadioDemo) {
                      return go(model.radioModel)(function (v1) {
                          return {
                              active: model.active,
                              showSource: model.showSource,
                              textInputModel: model.textInputModel,
                              numberInputModel: model.numberInputModel,
                              miscInputModel: model.miscInputModel,
                              checkboxModel: model.checkboxModel,
                              radioModel: v1
                          };
                      });
                  };
                  throw new Error("Failed pattern match at Main line 76, column 7 - line 86, column 57: " + [ v.value0.constructor.name ]);
              })());
          };
          if (v instanceof ShowSource) {
              var model$prime = {
                  showSource: v.value0,
                  active: model.active,
                  checkboxModel: model.checkboxModel,
                  miscInputModel: model.miscInputModel,
                  numberInputModel: model.numberInputModel,
                  radioModel: model.radioModel,
                  textInputModel: model.textInputModel
              };
              var cmd = loadCurrentSourceTask(model$prime);
              return new Data_Tuple.Tuple(cmd, model$prime);
          };
          if (v instanceof EmptyModel) {
              var model$prime = {
                  showSource: model.showSource,
                  active: model.active,
                  checkboxModel: emptyModel.checkboxModel,
                  miscInputModel: emptyModel.miscInputModel,
                  numberInputModel: emptyModel.numberInputModel,
                  radioModel: emptyModel.radioModel,
                  textInputModel: emptyModel.textInputModel
              };
              return new Data_Tuple.Tuple(loadCurrentSourceTask(model$prime), model$prime);
          };
          if (v instanceof TextInputMsg) {
              return Data_Bifunctor.bimap(Data_Tuple.bifunctorTuple)(Data_Functor.map(Bonsai_Types.cmdFunctor)(TextInputMsg.create))(function (v1) {
                  return {
                      textInputModel: v1,
                      active: model.active,
                      checkboxModel: model.checkboxModel,
                      miscInputModel: model.miscInputModel,
                      numberInputModel: model.numberInputModel,
                      radioModel: model.radioModel,
                      showSource: model.showSource
                  };
              })(Demo_Common.update(v.value0)(model.textInputModel));
          };
          if (v instanceof NumberInputMsg) {
              return Data_Bifunctor.bimap(Data_Tuple.bifunctorTuple)(Data_Functor.map(Bonsai_Types.cmdFunctor)(NumberInputMsg.create))(function (v1) {
                  return {
                      numberInputModel: v1,
                      active: model.active,
                      checkboxModel: model.checkboxModel,
                      miscInputModel: model.miscInputModel,
                      radioModel: model.radioModel,
                      showSource: model.showSource,
                      textInputModel: model.textInputModel
                  };
              })(Demo_Common.update(v.value0)(model.numberInputModel));
          };
          if (v instanceof MiscInputMsg) {
              return Data_Bifunctor.bimap(Data_Tuple.bifunctorTuple)(Data_Functor.map(Bonsai_Types.cmdFunctor)(MiscInputMsg.create))(function (v1) {
                  return {
                      miscInputModel: v1,
                      active: model.active,
                      checkboxModel: model.checkboxModel,
                      numberInputModel: model.numberInputModel,
                      radioModel: model.radioModel,
                      showSource: model.showSource,
                      textInputModel: model.textInputModel
                  };
              })(Demo_Common.update(v.value0)(model.miscInputModel));
          };
          if (v instanceof CheckboxMsg) {
              return Data_Bifunctor.bimap(Data_Tuple.bifunctorTuple)(Data_Functor.map(Bonsai_Types.cmdFunctor)(CheckboxMsg.create))(function (v1) {
                  return {
                      checkboxModel: v1,
                      active: model.active,
                      miscInputModel: model.miscInputModel,
                      numberInputModel: model.numberInputModel,
                      radioModel: model.radioModel,
                      showSource: model.showSource,
                      textInputModel: model.textInputModel
                  };
              })(Demo_Common.update(v.value0)(model.checkboxModel));
          };
          if (v instanceof RadioMsg) {
              return Data_Bifunctor.bimap(Data_Tuple.bifunctorTuple)(Data_Functor.map(Bonsai_Types.cmdFunctor)(RadioMsg.create))(function (v1) {
                  return {
                      radioModel: v1,
                      active: model.active,
                      checkboxModel: model.checkboxModel,
                      miscInputModel: model.miscInputModel,
                      numberInputModel: model.numberInputModel,
                      showSource: model.showSource,
                      textInputModel: model.textInputModel
                  };
              })(Demo_Common.update(v.value0)(model.radioModel));
          };
          throw new Error("Failed pattern match at Main line 59, column 1 - line 62, column 39: " + [ v.constructor.name, model.constructor.name ]);
      };
  };
  var main = (function () {
      var dbgProgram = Bonsai_Core.debugProgram({
          timing: true,
          events: Bonsai_Core.noDebug.events,
          patch: Bonsai_Core.noDebug.patch
      });
      return function __do() {
          var v = Bonsai_DOM.effF(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Bonsai_DOM.window)(Bonsai_DOM.document))(Bonsai_DOM.locationHash))();
          var demo = hashDemo(v);
          var model = {
              active: demo,
              checkboxModel: emptyModel.checkboxModel,
              miscInputModel: emptyModel.miscInputModel,
              numberInputModel: emptyModel.numberInputModel,
              radioModel: emptyModel.radioModel,
              showSource: emptyModel.showSource,
              textInputModel: emptyModel.textInputModel
          };
          var v1 = dbgProgram("main")(update)(view)(model)(Bonsai_DOM.window)();
          return Data_Unit.unit;
      };
  })();
  exports["TextInputDemo"] = TextInputDemo;
  exports["NumberInputDemo"] = NumberInputDemo;
  exports["MiscInputDemo"] = MiscInputDemo;
  exports["CheckboxDemo"] = CheckboxDemo;
  exports["RadioDemo"] = RadioDemo;
  exports["SetCurrent"] = SetCurrent;
  exports["SetSource"] = SetSource;
  exports["EmptyModel"] = EmptyModel;
  exports["ShowSource"] = ShowSource;
  exports["TextInputMsg"] = TextInputMsg;
  exports["NumberInputMsg"] = NumberInputMsg;
  exports["MiscInputMsg"] = MiscInputMsg;
  exports["CheckboxMsg"] = CheckboxMsg;
  exports["RadioMsg"] = RadioMsg;
  exports["update"] = update;
  exports["loadCurrentSourceTask"] = loadCurrentSourceTask;
  exports["view"] = view;
  exports["viewMenu"] = viewMenu;
  exports["viewContent"] = viewContent;
  exports["emptyModel"] = emptyModel;
  exports["sourceFilename"] = sourceFilename;
  exports["demoHash"] = demoHash;
  exports["hashDemo"] = hashDemo;
  exports["unwrapModel"] = unwrapModel;
  exports["wrapModel"] = wrapModel;
  exports["main"] = main;
  exports["eqExample"] = eqExample;
})(PS["Main"] = PS["Main"] || {});
PS["Main"].main();